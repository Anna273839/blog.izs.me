{
    "blog": {
        "description": "Writing and Stuff from Isaac Z. Schlueter",
        "name": "izs",
        "title": "blog.izs.me",
        "updated": 1544578035,
        "url": "http://blog.izs.me/",
        "uuid": "t:qZa3tMNNGjX7PQ45aXJ-jw"
    },
    "blog_name": "izs",
    "body": "<p>My first npm publish was unusual.  npm didn&rsquo;t exist at the time, so\nthat presented a bit of a challenge.</p>\n\n<p>This is the story of helping to inventing a universe so that I could\n<a href=\"https://www.youtube.com/watch?v=zSgiXGELjbc\">make an apple pie from\nscratch</a>.</p>\n\n<h3>SSJS</h3>\n\n<p>Back in 2009, I was working at Yahoo! as a Front-End Engineer.  That\nmeant that I wrote a lot of PHP and JavaScript.  I had just finished\na project where we had front-end components generated on the back-end\nand shipped to the client based on some data being parsed into a\ntemplate, and then later on, on the front-end, do the same work in\nJavaScript with the same templates and data services.</p>\n\n<p>These days, that&rsquo;d be called &ldquo;fast boot&rdquo; or &ldquo;isometric templates&rdquo; or\nsomething clever, but back in those dark days, it required tediously\nmaintaining two implementations of a view layer, one in PHP and the\nother in JavaScript.  Maintaining the same thing in two languages was\ndownright awful.</p>\n\n<p>&ldquo;Well&rdquo;, I figured, &ldquo;JavaScript is a language, and we can control\nwhat&rsquo;s on the server, why not <em>just</em> run JavaScript on the server?&rdquo;</p>\n\n<p>The state of the art in server-side JavaScript (SSJS) was Rhino on the\nJVM.  The problem was, unless you compiled your JavaScript into JVM\nbytecode using arcane special magicks, it was godawful slow.  I\nstarted messing around with V8 and SpiderMonkey, thinking &ldquo;I want\nsomething like PHP, but JavaScript&rdquo;.</p>\n\n<p>The SSJS community at that time was a very different place than the\nNode.js of today.  There were dozens of projects, any one of which\ncould&rsquo;ve seemed like it would be the breakout hit.\n<a href=\"http://spiderape.sourceforge.net/\">SpiderApe</a> and\n<a href=\"https://code.google.com/archive/p/v8-juice/\">v8-juice</a> were trying to\nmake it easier to embed spidermonkey and v8, and add a standard\nlibrary to each.  <a href=\"https://code.google.com/archive/p/v8cgi/\">v8cgi</a>\n(renamed to <a href=\"https://code.google.com/archive/p/teajs/\">TeaJS</a>)\nprovided a CGI binding to use v8 in Apache2.  I started messing around\nwith <a href=\"https://github.com/sebastien/k7\">K7</a>, which provided a bunch of\nmacros for using V8 in various contexts, and\n<a href=\"https://github.com/tlrobinson/narwhal\">Narwhal</a>, which was the only\none of these that seemed to be delivering a fully thought-out platform\nfor making programs.  There was also <a href=\"http://helma.org/\">Helma</a> and\n<a href=\"https://ringojs.org/\">RingoJS</a>, and probably a bunch of others I&rsquo;m\nforgetting.</p>\n\n<p>A few years ago, we used to joke that every Node.js dev had their own\ntest framework and argument parser.  Well, in 2009, every server-side\nJavaScript developer had their own SSJS platform.</p>\n\n<p>The contributors to all of these platforms got together in a mailing\nlist and tried to form some kind of standard for server-side\nJavaScript programming.  Front-end JavaScript has the DOM, so we\nthought, and right now, writing server-side JavaScript suffers from a\ndearth of portability.  What we need is a standards body, clearly!\nThis was initially called &ldquo;ServerJS&rdquo;, but then expanded its scope to\n<a href=\"http://www.commonjs.org/\">CommonJS</a>.</p>\n\n<p>The first proper &ldquo;module&rdquo; I wrote in JavaScript was a port of a url\nparser I wrote for YUI.  I landed it in Narwhal.  There was no\nuserland, really.  Just lots of little cores.</p>\n\n<p>Some time later, in August of 2009, I gave <a href=\"https://web.archive.org/web/20091020193405/http://developer.yahoo.com/yui/theater/video.php?v=isaac-ssjs\">a tech\ntalk</a>\nabout SSJS and demonstrated using Narwhal and Jack, a Rack-like thing\nbuilt on top of Narwhal, using the\n<a href=\"https://en.wikipedia.org/wiki/JSGI\">JSGI</a> protocol.</p>\n\n<p>After the talk, one of the people in the audience asked if I&rsquo;d ever\ntried out Node.js.  As it turned out, I had, but like so many SSJS\nplatforms:</p>\n\n<ol><li>It had a single developer working on it, and no other contributors\nor community.</li>\n<li>The documentation was <a href=\"https://nodejs.org/docs/v0.0.2/\">extremely\nsparse</a></li>\n<li>It failed to build on my mac laptop.</li>\n</ol><p>Ergo: Not a thing.</p>\n\n<p>&ldquo;I dunno,&rdquo; he said.  &ldquo;Maybe try it again.  It&rsquo;s pretty nifty.&rdquo;</p>\n\n<p>He insisted that it was fast, and I was like, &ldquo;Meh.  JVM is fine.&rdquo;</p>\n\n<h3>Node.js</h3>\n\n<p>I checked the website again, and <a href=\"https://nodejs.org/docs/v0.0.6/#community\">they&rsquo;d added a &ldquo;Community&rdquo;\nsection</a>.  Also, the docs\nstill sucked, but it was version 0.0.6 now, which was like, 4 more\nthan it was the first time I&rsquo;d checked, so whoever this Ryan guy was,\nhe was at least working hard on the thing.</p>\n\n<p>It compiled successfully, and I was hooked!  It started up so fast\ncompared to Rhino!  And it had tests that ran when I did <code>make test</code>,\nand they passed!</p>\n\n<p>3 important lessons for OSS success:</p>\n\n<ol><li>Docs and tests matter.</li>\n<li>At least have a link to a mailing list or <em>something</em>.  (Remember:\nthis was before GitHub connected us all with Issues.)</li>\n<li>It has to build and be fast.</li>\n</ol><p>I gradually stopped paying much attention to CommonJS, and instead\njust threw my efforts at Node.  I hung out on the mailing list and in\nIRC during all my free time.</p>\n\n<p>The problem with Node back then was that even though a growing number\nof people were all writing really interesting programs, it was hard to\nshare them.  So, I wrote <a href=\"https://github.com/npm/npm/commit/4626dfa\">this\nthing</a>, which was a port of\na bash script I was using to play with people&rsquo;s code.</p>\n\n<h3>The Registry</h3>\n\n<p>Technically that wasn&rsquo;t &ldquo;publishing&rdquo; though.  In order to actually\n<em>publish</em> to npm there had to be an npm registry.  Today, that\nregistry is a webservice at <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a>, run by\n<a href=\"https://www.npmjs.com/\">npm, Inc.</a>.  The first registry was a git\nrepo called &ldquo;npm-data&rdquo;.  I collected up the handful of modules that&rsquo;d\nbeen shared from on the mailing list and in the Node.js wiki page, and\nmade a JSON file with links to them.</p>\n\n<p>One principle of package management that I felt was really important\nwas that no one person should be the bottleneck in community growth.\nEspecially if that person is me.  Because I really hate that crap.</p>\n\n<p>I don&rsquo;t mind working really hard on lots of challenging stuff, but if\nI have to do some simple task over and over again, especially if other\npeople are depending on me to do it, it&rsquo;s like torture to me.  The\nprospect of being in someone&rsquo;s critical path for deploying their\nmodule was just&hellip; ugh.  Gross.</p>\n\n<p>I needed a web service type thing that would let people publish\npackages and then could download those packages and install them.</p>\n\n<p>I got to talking to <a href=\"http://mikealrogers.com/\">Mikeal Rogers</a>, who\nworked at\n<a href=\"https://www.crunchbase.com/organization/couch-io\">Couch.IO</a>.  He\nbuilt <a href=\"https://github.com/npm/npm-registry-couchapp/commit/f7f5c93\">the first npm registry\nCouchApp</a>,\nand got it functional.</p>\n\n<p>Fun fact!  For a little while, anyone could publish any package, and\nwe relied on the honor system to keep anyone from clobbering\nanyone else&rsquo;s name.  It was an ok system for a short while, since\nthere were only about 4 or 5 people in the world who knew this thing\nexisted, but we got an authentication and authorization system set up\nbefore anyone could take advantage of it.</p>\n\n<p>By that time, I&rsquo;d quit my job at Yahoo! and was taking a sabatical.\nIf you can afford it, I highly recommend saving up a little nest egg\nand taking a few months off to see what comes out of you.  Muses\ncan be fickle, and tend to call when least expected.</p>\n\n<h3>I know what you&rsquo;re thinking&hellip;</h3>\n\n<p>You&rsquo;re thinking that the culmination of this story is that I published\nnpm to npm and that was my first npm publish, and it&rsquo;ll be super meta\nand awesome like that.  It&rsquo;d be a beautiful punchline.</p>\n\n<p>Real life is sloppy sometimes.</p>\n\n<p>I knew that I wanted npm to be able to accept abbreviated versions of\ncommands, so that <code>npm inst</code> would do the same thing as <code>npm install</code>.\n(To this day, the friendly CLI shorthands are some of npm&rsquo;s most\nbeloved features.)</p>\n\n<p>The first thing I published to npm was <a href=\"http://npm.im/abbrev\">abbrev</a>.\nI&rsquo;d written it already, mostly as a sort of coding crossword\npuzzle some&hellip; Saturday?  Wednesday?  All the days were pretty\nidentical during those two lazy/exhausting months of funemployment.</p>\n\n<p>Since abbrev was only one module, no build command, it was\nreally easy to publish and install repeatedly.  Ever since then, it&rsquo;s\nalways been one of my go-to testing modules to make sure things are\nworking properly.  Not only was it <em>my</em> first npm publish, it was\n<em>the</em> first npm publish, and it was published probably dozens or\nhundreds of times to <code>http://localhost:5984/</code> while I was working on\nnpm.  So, of course, when I had a registry running on my little\nDreamHost instance, <code>abbrev</code> was the first thing I published to it.</p>\n\n<p>The really wacky part: despite it being the first thing I&rsquo;d published\nwith npm, I didn&rsquo;t actually <em>use</em> abbrev in npm until <a href=\"https://github.com/npm/npm/commit/4f8b35e\">5 months\nlater</a>. That whole time I\nkept trying to figure out how to have proper dependencies in the thing\nthat installed dependencies.  Eventually, I gave up and threw it in a\n<code>utils</code> folder.</p>\n\n<p>Looking back over abbrev now, it&rsquo;s amazing to me how little it&rsquo;s\nchanged.  Most of the code is still that initial implementation from\nMay 2010.</p>\n\n<p>The moral of the story is that you don&rsquo;t know how it&rsquo;s going to end.</p>",
    "can_like": false,
    "can_reblog": false,
    "can_reply": false,
    "can_send_in_message": true,
    "date": "2017-02-16 01:17:27 GMT",
    "display_avatar": true,
    "format": "markdown",
    "id": 157295170418,
    "is_blocks_post_format": false,
    "note_count": 12,
    "post_url": "http://blog.izs.me/post/157295170418/my-first-npm-publish",
    "reblog": {
        "comment": "<p>My first npm publish was unusual.  npm didn\u2019t exist at the time, so\nthat presented a bit of a challenge.</p>\n\n<p>This is the story of helping to inventing a universe so that I could\n<a href=\"https://www.youtube.com/watch?v=zSgiXGELjbc\">make an apple pie from\nscratch</a>.</p>\n\n<h3>SSJS</h3>\n\n<p>Back in 2009, I was working at Yahoo! as a Front-End Engineer.  That\nmeant that I wrote a lot of PHP and JavaScript.  I had just finished\na project where we had front-end components generated on the back-end\nand shipped to the client based on some data being parsed into a\ntemplate, and then later on, on the front-end, do the same work in\nJavaScript with the same templates and data services.</p>\n\n<p>These days, that\u2019d be called \u201cfast boot\u201d or \u201cisometric templates\u201d or\nsomething clever, but back in those dark days, it required tediously\nmaintaining two implementations of a view layer, one in PHP and the\nother in JavaScript.  Maintaining the same thing in two languages was\ndownright awful.</p>\n\n<p>\u201cWell\u201d, I figured, \u201cJavaScript is a language, and we can control\nwhat\u2019s on the server, why not <em>just</em> run JavaScript on the server?\u201d</p>\n\n<p>The state of the art in server-side JavaScript (SSJS) was Rhino on the\nJVM.  The problem was, unless you compiled your JavaScript into JVM\nbytecode using arcane special magicks, it was godawful slow.  I\nstarted messing around with V8 and SpiderMonkey, thinking \u201cI want\nsomething like PHP, but JavaScript\u201d.</p>\n\n<p>The SSJS community at that time was a very different place than the\nNode.js of today.  There were dozens of projects, any one of which\ncould\u2019ve seemed like it would be the breakout hit.\n<a href=\"http://spiderape.sourceforge.net/\">SpiderApe</a> and\n<a href=\"https://code.google.com/archive/p/v8-juice/\">v8-juice</a> were trying to\nmake it easier to embed spidermonkey and v8, and add a standard\nlibrary to each.  <a href=\"https://code.google.com/archive/p/v8cgi/\">v8cgi</a>\n(renamed to <a href=\"https://code.google.com/archive/p/teajs/\">TeaJS</a>)\nprovided a CGI binding to use v8 in Apache2.  I started messing around\nwith <a href=\"https://github.com/sebastien/k7\">K7</a>, which provided a bunch of\nmacros for using V8 in various contexts, and\n<a href=\"https://github.com/tlrobinson/narwhal\">Narwhal</a>, which was the only\none of these that seemed to be delivering a fully thought-out platform\nfor making programs.  There was also <a href=\"http://helma.org/\">Helma</a> and\n<a href=\"https://ringojs.org/\">RingoJS</a>, and probably a bunch of others I\u2019m\nforgetting.</p>\n\n<p>A few years ago, we used to joke that every Node.js dev had their own\ntest framework and argument parser.  Well, in 2009, every server-side\nJavaScript developer had their own SSJS platform.</p>\n\n<p>The contributors to all of these platforms got together in a mailing\nlist and tried to form some kind of standard for server-side\nJavaScript programming.  Front-end JavaScript has the DOM, so we\nthought, and right now, writing server-side JavaScript suffers from a\ndearth of portability.  What we need is a standards body, clearly!\nThis was initially called \u201cServerJS\u201d, but then expanded its scope to\n<a href=\"http://www.commonjs.org/\">CommonJS</a>.</p>\n\n<p>The first proper \u201cmodule\u201d I wrote in JavaScript was a port of a url\nparser I wrote for YUI.  I landed it in Narwhal.  There was no\nuserland, really.  Just lots of little cores.</p>\n\n<p>Some time later, in August of 2009, I gave <a href=\"https://web.archive.org/web/20091020193405/http://developer.yahoo.com/yui/theater/video.php?v=isaac-ssjs\">a tech\ntalk</a>\nabout SSJS and demonstrated using Narwhal and Jack, a Rack-like thing\nbuilt on top of Narwhal, using the\n<a href=\"https://en.wikipedia.org/wiki/JSGI\">JSGI</a> protocol.</p>\n\n<p>After the talk, one of the people in the audience asked if I\u2019d ever\ntried out Node.js.  As it turned out, I had, but like so many SSJS\nplatforms:</p>\n\n<ol><li>It had a single developer working on it, and no other contributors\nor community.</li>\n<li>The documentation was <a href=\"https://nodejs.org/docs/v0.0.2/\">extremely\nsparse</a></li>\n<li>It failed to build on my mac laptop.</li>\n</ol><p>Ergo: Not a thing.</p>\n\n<p>\u201cI dunno,\u201d he said.  \u201cMaybe try it again.  It\u2019s pretty nifty.\u201d</p>\n\n<p>He insisted that it was fast, and I was like, \u201cMeh.  JVM is fine.\u201d</p>\n\n<h3>Node.js</h3>\n\n<p>I checked the website again, and <a href=\"https://nodejs.org/docs/v0.0.6/#community\">they\u2019d added a \u201cCommunity\u201d\nsection</a>.  Also, the docs\nstill sucked, but it was version 0.0.6 now, which was like, 4 more\nthan it was the first time I\u2019d checked, so whoever this Ryan guy was,\nhe was at least working hard on the thing.</p>\n\n<p>It compiled successfully, and I was hooked!  It started up so fast\ncompared to Rhino!  And it had tests that ran when I did <code>make test</code>,\nand they passed!</p>\n\n<p>3 important lessons for OSS success:</p>\n\n<ol><li>Docs and tests matter.</li>\n<li>At least have a link to a mailing list or <em>something</em>.  (Remember:\nthis was before GitHub connected us all with Issues.)</li>\n<li>It has to build and be fast.</li>\n</ol><p>I gradually stopped paying much attention to CommonJS, and instead\njust threw my efforts at Node.  I hung out on the mailing list and in\nIRC during all my free time.</p>\n\n<p>The problem with Node back then was that even though a growing number\nof people were all writing really interesting programs, it was hard to\nshare them.  So, I wrote <a href=\"https://github.com/npm/npm/commit/4626dfa\">this\nthing</a>, which was a port of\na bash script I was using to play with people\u2019s code.</p>\n\n<h3>The Registry</h3>\n\n<p>Technically that wasn\u2019t \u201cpublishing\u201d though.  In order to actually\n<em>publish</em> to npm there had to be an npm registry.  Today, that\nregistry is a webservice at <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a>, run by\n<a href=\"https://www.npmjs.com/\">npm, Inc.</a>.  The first registry was a git\nrepo called \u201cnpm-data\u201d.  I collected up the handful of modules that\u2019d\nbeen shared from on the mailing list and in the Node.js wiki page, and\nmade a JSON file with links to them.</p>\n\n<p>One principle of package management that I felt was really important\nwas that no one person should be the bottleneck in community growth.\nEspecially if that person is me.  Because I really hate that crap.</p>\n\n<p>I don\u2019t mind working really hard on lots of challenging stuff, but if\nI have to do some simple task over and over again, especially if other\npeople are depending on me to do it, it\u2019s like torture to me.  The\nprospect of being in someone\u2019s critical path for deploying their\nmodule was just\u2026 ugh.  Gross.</p>\n\n<p>I needed a web service type thing that would let people publish\npackages and then could download those packages and install them.</p>\n\n<p>I got to talking to <a href=\"http://mikealrogers.com/\">Mikeal Rogers</a>, who\nworked at\n<a href=\"https://www.crunchbase.com/organization/couch-io\">Couch.IO</a>.  He\nbuilt <a href=\"https://github.com/npm/npm-registry-couchapp/commit/f7f5c93\">the first npm registry\nCouchApp</a>,\nand got it functional.</p>\n\n<p>Fun fact!  For a little while, anyone could publish any package, and\nwe relied on the honor system to keep anyone from clobbering\nanyone else\u2019s name.  It was an ok system for a short while, since\nthere were only about 4 or 5 people in the world who knew this thing\nexisted, but we got an authentication and authorization system set up\nbefore anyone could take advantage of it.</p>\n\n<p>By that time, I\u2019d quit my job at Yahoo! and was taking a sabatical.\nIf you can afford it, I highly recommend saving up a little nest egg\nand taking a few months off to see what comes out of you.  Muses\ncan be fickle, and tend to call when least expected.</p>\n\n<h3>I know what you\u2019re thinking\u2026</h3>\n\n<p>You\u2019re thinking that the culmination of this story is that I published\nnpm to npm and that was my first npm publish, and it\u2019ll be super meta\nand awesome like that.  It\u2019d be a beautiful punchline.</p>\n\n<p>Real life is sloppy sometimes.</p>\n\n<p>I knew that I wanted npm to be able to accept abbreviated versions of\ncommands, so that <code>npm inst</code> would do the same thing as <code>npm install</code>.\n(To this day, the friendly CLI shorthands are some of npm\u2019s most\nbeloved features.)</p>\n\n<p>The first thing I published to npm was <a href=\"http://npm.im/abbrev\">abbrev</a>.\nI\u2019d written it already, mostly as a sort of coding crossword\npuzzle some\u2026 Saturday?  Wednesday?  All the days were pretty\nidentical during those two lazy/exhausting months of funemployment.</p>\n\n<p>Since abbrev was only one module, no build command, it was\nreally easy to publish and install repeatedly.  Ever since then, it\u2019s\nalways been one of my go-to testing modules to make sure things are\nworking properly.  Not only was it <em>my</em> first npm publish, it was\n<em>the</em> first npm publish, and it was published probably dozens or\nhundreds of times to <code>http://localhost:5984/</code> while I was working on\nnpm.  So, of course, when I had a registry running on my little\nDreamHost instance, <code>abbrev</code> was the first thing I published to it.</p>\n\n<p>The really wacky part: despite it being the first thing I\u2019d published\nwith npm, I didn\u2019t actually <em>use</em> abbrev in npm until <a href=\"https://github.com/npm/npm/commit/4f8b35e\">5 months\nlater</a>. That whole time I\nkept trying to figure out how to have proper dependencies in the thing\nthat installed dependencies.  Eventually, I gave up and threw it in a\n<code>utils</code> folder.</p>\n\n<p>Looking back over abbrev now, it\u2019s amazing to me how little it\u2019s\nchanged.  Most of the code is still that initial implementation from\nMay 2010.</p>\n\n<p>The moral of the story is that you don\u2019t know how it\u2019s going to end.</p>",
        "tree_html": ""
    },
    "reblog_key": "gjsB7KYQ",
    "reblogged_from_can_message": false,
    "reblogged_from_id": "157288221340",
    "reblogged_from_name": "npmjs",
    "reblogged_from_title": "The npm Blog",
    "reblogged_from_url": "https://blog.npmjs.org/post/157288221340/my-first-npm-publish",
    "reblogged_from_uuid": "t:nXsLs1P4AptPf1fBr_nFxw",
    "reblogged_root_can_message": false,
    "reblogged_root_id": "157288221340",
    "reblogged_root_name": "npmjs",
    "reblogged_root_title": "The npm Blog",
    "reblogged_root_url": "https://blog.npmjs.org/post/157288221340/my-first-npm-publish",
    "reblogged_root_uuid": "t:nXsLs1P4AptPf1fBr_nFxw",
    "recommended_color": null,
    "recommended_source": null,
    "short_url": "https://tmblr.co/Z7nwWy2IVXTDo",
    "slug": "my-first-npm-publish",
    "state": "published",
    "summary": "My First npm Publish",
    "tags": [],
    "timestamp": 1487207847,
    "title": "My First npm Publish",
    "trail": [
        {
            "blog": {
                "active": true,
                "can_be_followed": true,
                "name": "izs",
                "share_following": false,
                "share_likes": false,
                "theme": {
                    "avatar_shape": "square",
                    "background_color": "#444444",
                    "body_font": "Helvetica Neue",
                    "header_bounds": "978,2448,2355,0",
                    "header_focus_height": 1152,
                    "header_focus_width": 2048,
                    "header_full_height": 3264,
                    "header_full_width": 2448,
                    "header_image": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o.jpg",
                    "header_image_focused": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/mA1nbvglg/tumblr_static_tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_focused_v3.jpg",
                    "header_image_scaled": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_2048_v2.jpg",
                    "header_stretch": true,
                    "link_color": "#FB4C16",
                    "show_avatar": true,
                    "show_description": true,
                    "show_header_image": true,
                    "show_title": true,
                    "title_color": "#fb4c16",
                    "title_font": "Gibson",
                    "title_font_weight": "regular"
                }
            },
            "content": "<p>My first npm publish was unusual.  npm didn&rsquo;t exist at the time, so\nthat presented a bit of a challenge.</p>\n\n<p>This is the story of helping to inventing a universe so that I could\n<a href=\"https://www.youtube.com/watch?v=zSgiXGELjbc\">make an apple pie from\nscratch</a>.</p>\n\n<h3>SSJS</h3>\n\n<p>Back in 2009, I was working at Yahoo! as a Front-End Engineer.  That\nmeant that I wrote a lot of PHP and JavaScript.  I had just finished\na project where we had front-end components generated on the back-end\nand shipped to the client based on some data being parsed into a\ntemplate, and then later on, on the front-end, do the same work in\nJavaScript with the same templates and data services.</p>\n\n<p>These days, that&rsquo;d be called &ldquo;fast boot&rdquo; or &ldquo;isometric templates&rdquo; or\nsomething clever, but back in those dark days, it required tediously\nmaintaining two implementations of a view layer, one in PHP and the\nother in JavaScript.  Maintaining the same thing in two languages was\ndownright awful.</p>\n\n<p>&ldquo;Well&rdquo;, I figured, &ldquo;JavaScript is a language, and we can control\nwhat&rsquo;s on the server, why not <em>just</em> run JavaScript on the server?&rdquo;</p>\n\n<p>The state of the art in server-side JavaScript (SSJS) was Rhino on the\nJVM.  The problem was, unless you compiled your JavaScript into JVM\nbytecode using arcane special magicks, it was godawful slow.  I\nstarted messing around with V8 and SpiderMonkey, thinking &ldquo;I want\nsomething like PHP, but JavaScript&rdquo;.</p>\n\n<p>The SSJS community at that time was a very different place than the\nNode.js of today.  There were dozens of projects, any one of which\ncould&rsquo;ve seemed like it would be the breakout hit.\n<a href=\"http://spiderape.sourceforge.net/\">SpiderApe</a> and\n<a href=\"https://code.google.com/archive/p/v8-juice/\">v8-juice</a> were trying to\nmake it easier to embed spidermonkey and v8, and add a standard\nlibrary to each.  <a href=\"https://code.google.com/archive/p/v8cgi/\">v8cgi</a>\n(renamed to <a href=\"https://code.google.com/archive/p/teajs/\">TeaJS</a>)\nprovided a CGI binding to use v8 in Apache2.  I started messing around\nwith <a href=\"https://github.com/sebastien/k7\">K7</a>, which provided a bunch of\nmacros for using V8 in various contexts, and\n<a href=\"https://github.com/tlrobinson/narwhal\">Narwhal</a>, which was the only\none of these that seemed to be delivering a fully thought-out platform\nfor making programs.  There was also <a href=\"http://helma.org/\">Helma</a> and\n<a href=\"https://ringojs.org/\">RingoJS</a>, and probably a bunch of others I&rsquo;m\nforgetting.</p>\n\n<p>A few years ago, we used to joke that every Node.js dev had their own\ntest framework and argument parser.  Well, in 2009, every server-side\nJavaScript developer had their own SSJS platform.</p>\n\n<p>The contributors to all of these platforms got together in a mailing\nlist and tried to form some kind of standard for server-side\nJavaScript programming.  Front-end JavaScript has the DOM, so we\nthought, and right now, writing server-side JavaScript suffers from a\ndearth of portability.  What we need is a standards body, clearly!\nThis was initially called &ldquo;ServerJS&rdquo;, but then expanded its scope to\n<a href=\"http://www.commonjs.org/\">CommonJS</a>.</p>\n\n<p>The first proper &ldquo;module&rdquo; I wrote in JavaScript was a port of a url\nparser I wrote for YUI.  I landed it in Narwhal.  There was no\nuserland, really.  Just lots of little cores.</p>\n\n<p>Some time later, in August of 2009, I gave <a href=\"https://web.archive.org/web/20091020193405/http://developer.yahoo.com/yui/theater/video.php?v=isaac-ssjs\">a tech\ntalk</a>\nabout SSJS and demonstrated using Narwhal and Jack, a Rack-like thing\nbuilt on top of Narwhal, using the\n<a href=\"https://en.wikipedia.org/wiki/JSGI\">JSGI</a> protocol.</p>\n\n<p>After the talk, one of the people in the audience asked if I&rsquo;d ever\ntried out Node.js.  As it turned out, I had, but like so many SSJS\nplatforms:</p>\n\n<ol><li>It had a single developer working on it, and no other contributors\nor community.</li>\n<li>The documentation was <a href=\"https://nodejs.org/docs/v0.0.2/\">extremely\nsparse</a></li>\n<li>It failed to build on my mac laptop.</li>\n</ol><p>Ergo: Not a thing.</p>\n\n<p>&ldquo;I dunno,&rdquo; he said.  &ldquo;Maybe try it again.  It&rsquo;s pretty nifty.&rdquo;</p>\n\n<p>He insisted that it was fast, and I was like, &ldquo;Meh.  JVM is fine.&rdquo;</p>\n\n<h3>Node.js</h3>\n\n<p>I checked the website again, and <a href=\"https://nodejs.org/docs/v0.0.6/#community\">they&rsquo;d added a &ldquo;Community&rdquo;\nsection</a>.  Also, the docs\nstill sucked, but it was version 0.0.6 now, which was like, 4 more\nthan it was the first time I&rsquo;d checked, so whoever this Ryan guy was,\nhe was at least working hard on the thing.</p>\n\n<p>It compiled successfully, and I was hooked!  It started up so fast\ncompared to Rhino!  And it had tests that ran when I did <code>make test</code>,\nand they passed!</p>\n\n<p>3 important lessons for OSS success:</p>\n\n<ol><li>Docs and tests matter.</li>\n<li>At least have a link to a mailing list or <em>something</em>.  (Remember:\nthis was before GitHub connected us all with Issues.)</li>\n<li>It has to build and be fast.</li>\n</ol><p>I gradually stopped paying much attention to CommonJS, and instead\njust threw my efforts at Node.  I hung out on the mailing list and in\nIRC during all my free time.</p>\n\n<p>The problem with Node back then was that even though a growing number\nof people were all writing really interesting programs, it was hard to\nshare them.  So, I wrote <a href=\"https://github.com/npm/npm/commit/4626dfa\">this\nthing</a>, which was a port of\na bash script I was using to play with people&rsquo;s code.</p>\n\n<h3>The Registry</h3>\n\n<p>Technically that wasn&rsquo;t &ldquo;publishing&rdquo; though.  In order to actually\n<em>publish</em> to npm there had to be an npm registry.  Today, that\nregistry is a webservice at <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a>, run by\n<a href=\"https://www.npmjs.com/\">npm, Inc.</a>.  The first registry was a git\nrepo called &ldquo;npm-data&rdquo;.  I collected up the handful of modules that&rsquo;d\nbeen shared from on the mailing list and in the Node.js wiki page, and\nmade a JSON file with links to them.</p>\n\n<p>One principle of package management that I felt was really important\nwas that no one person should be the bottleneck in community growth.\nEspecially if that person is me.  Because I really hate that crap.</p>\n\n<p>I don&rsquo;t mind working really hard on lots of challenging stuff, but if\nI have to do some simple task over and over again, especially if other\npeople are depending on me to do it, it&rsquo;s like torture to me.  The\nprospect of being in someone&rsquo;s critical path for deploying their\nmodule was just&hellip; ugh.  Gross.</p>\n\n<p>I needed a web service type thing that would let people publish\npackages and then could download those packages and install them.</p>\n\n<p>I got to talking to <a href=\"http://mikealrogers.com/\">Mikeal Rogers</a>, who\nworked at\n<a href=\"https://www.crunchbase.com/organization/couch-io\">Couch.IO</a>.  He\nbuilt <a href=\"https://github.com/npm/npm-registry-couchapp/commit/f7f5c93\">the first npm registry\nCouchApp</a>,\nand got it functional.</p>\n\n<p>Fun fact!  For a little while, anyone could publish any package, and\nwe relied on the honor system to keep anyone from clobbering\nanyone else&rsquo;s name.  It was an ok system for a short while, since\nthere were only about 4 or 5 people in the world who knew this thing\nexisted, but we got an authentication and authorization system set up\nbefore anyone could take advantage of it.</p>\n\n<p>By that time, I&rsquo;d quit my job at Yahoo! and was taking a sabatical.\nIf you can afford it, I highly recommend saving up a little nest egg\nand taking a few months off to see what comes out of you.  Muses\ncan be fickle, and tend to call when least expected.</p>\n\n<h3>I know what you&rsquo;re thinking&hellip;</h3>\n\n<p>You&rsquo;re thinking that the culmination of this story is that I published\nnpm to npm and that was my first npm publish, and it&rsquo;ll be super meta\nand awesome like that.  It&rsquo;d be a beautiful punchline.</p>\n\n<p>Real life is sloppy sometimes.</p>\n\n<p>I knew that I wanted npm to be able to accept abbreviated versions of\ncommands, so that <code>npm inst</code> would do the same thing as <code>npm install</code>.\n(To this day, the friendly CLI shorthands are some of npm&rsquo;s most\nbeloved features.)</p>\n\n<p>The first thing I published to npm was <a href=\"http://npm.im/abbrev\">abbrev</a>.\nI&rsquo;d written it already, mostly as a sort of coding crossword\npuzzle some&hellip; Saturday?  Wednesday?  All the days were pretty\nidentical during those two lazy/exhausting months of funemployment.</p>\n\n<p>Since abbrev was only one module, no build command, it was\nreally easy to publish and install repeatedly.  Ever since then, it&rsquo;s\nalways been one of my go-to testing modules to make sure things are\nworking properly.  Not only was it <em>my</em> first npm publish, it was\n<em>the</em> first npm publish, and it was published probably dozens or\nhundreds of times to <code>http://localhost:5984/</code> while I was working on\nnpm.  So, of course, when I had a registry running on my little\nDreamHost instance, <code>abbrev</code> was the first thing I published to it.</p>\n\n<p>The really wacky part: despite it being the first thing I&rsquo;d published\nwith npm, I didn&rsquo;t actually <em>use</em> abbrev in npm until <a href=\"https://github.com/npm/npm/commit/4f8b35e\">5 months\nlater</a>. That whole time I\nkept trying to figure out how to have proper dependencies in the thing\nthat installed dependencies.  Eventually, I gave up and threw it in a\n<code>utils</code> folder.</p>\n\n<p>Looking back over abbrev now, it&rsquo;s amazing to me how little it&rsquo;s\nchanged.  Most of the code is still that initial implementation from\nMay 2010.</p>\n\n<p>The moral of the story is that you don&rsquo;t know how it&rsquo;s going to end.</p>",
            "content_raw": "<p>My first npm publish was unusual.  npm didn\u2019t exist at the time, so\nthat presented a bit of a challenge.</p>\n\n<p>This is the story of helping to inventing a universe so that I could\n<a href=\"https://www.youtube.com/watch?v=zSgiXGELjbc\">make an apple pie from\nscratch</a>.</p>\n\n<h3>SSJS</h3>\n\n<p>Back in 2009, I was working at Yahoo! as a Front-End Engineer.  That\nmeant that I wrote a lot of PHP and JavaScript.  I had just finished\na project where we had front-end components generated on the back-end\nand shipped to the client based on some data being parsed into a\ntemplate, and then later on, on the front-end, do the same work in\nJavaScript with the same templates and data services.</p>\n\n<p>These days, that\u2019d be called \u201cfast boot\u201d or \u201cisometric templates\u201d or\nsomething clever, but back in those dark days, it required tediously\nmaintaining two implementations of a view layer, one in PHP and the\nother in JavaScript.  Maintaining the same thing in two languages was\ndownright awful.</p>\n\n<p>\u201cWell\u201d, I figured, \u201cJavaScript is a language, and we can control\nwhat\u2019s on the server, why not <em>just</em> run JavaScript on the server?\u201d</p>\n\n<p>The state of the art in server-side JavaScript (SSJS) was Rhino on the\nJVM.  The problem was, unless you compiled your JavaScript into JVM\nbytecode using arcane special magicks, it was godawful slow.  I\nstarted messing around with V8 and SpiderMonkey, thinking \u201cI want\nsomething like PHP, but JavaScript\u201d.</p>\n\n<p>The SSJS community at that time was a very different place than the\nNode.js of today.  There were dozens of projects, any one of which\ncould\u2019ve seemed like it would be the breakout hit.\n<a href=\"http://spiderape.sourceforge.net/\">SpiderApe</a> and\n<a href=\"https://code.google.com/archive/p/v8-juice/\">v8-juice</a> were trying to\nmake it easier to embed spidermonkey and v8, and add a standard\nlibrary to each.  <a href=\"https://code.google.com/archive/p/v8cgi/\">v8cgi</a>\n(renamed to <a href=\"https://code.google.com/archive/p/teajs/\">TeaJS</a>)\nprovided a CGI binding to use v8 in Apache2.  I started messing around\nwith <a href=\"https://github.com/sebastien/k7\">K7</a>, which provided a bunch of\nmacros for using V8 in various contexts, and\n<a href=\"https://github.com/tlrobinson/narwhal\">Narwhal</a>, which was the only\none of these that seemed to be delivering a fully thought-out platform\nfor making programs.  There was also <a href=\"http://helma.org/\">Helma</a> and\n<a href=\"https://ringojs.org/\">RingoJS</a>, and probably a bunch of others I\u2019m\nforgetting.</p>\n\n<p>A few years ago, we used to joke that every Node.js dev had their own\ntest framework and argument parser.  Well, in 2009, every server-side\nJavaScript developer had their own SSJS platform.</p>\n\n<p>The contributors to all of these platforms got together in a mailing\nlist and tried to form some kind of standard for server-side\nJavaScript programming.  Front-end JavaScript has the DOM, so we\nthought, and right now, writing server-side JavaScript suffers from a\ndearth of portability.  What we need is a standards body, clearly!\nThis was initially called \u201cServerJS\u201d, but then expanded its scope to\n<a href=\"http://www.commonjs.org/\">CommonJS</a>.</p>\n\n<p>The first proper \u201cmodule\u201d I wrote in JavaScript was a port of a url\nparser I wrote for YUI.  I landed it in Narwhal.  There was no\nuserland, really.  Just lots of little cores.</p>\n\n<p>Some time later, in August of 2009, I gave <a href=\"https://web.archive.org/web/20091020193405/http://developer.yahoo.com/yui/theater/video.php?v=isaac-ssjs\">a tech\ntalk</a>\nabout SSJS and demonstrated using Narwhal and Jack, a Rack-like thing\nbuilt on top of Narwhal, using the\n<a href=\"https://en.wikipedia.org/wiki/JSGI\">JSGI</a> protocol.</p>\n\n<p>After the talk, one of the people in the audience asked if I\u2019d ever\ntried out Node.js.  As it turned out, I had, but like so many SSJS\nplatforms:</p>\n\n<ol><li>It had a single developer working on it, and no other contributors\nor community.</li>\n<li>The documentation was <a href=\"https://nodejs.org/docs/v0.0.2/\">extremely\nsparse</a></li>\n<li>It failed to build on my mac laptop.</li>\n</ol><p>Ergo: Not a thing.</p>\n\n<p>\u201cI dunno,\u201d he said.  \u201cMaybe try it again.  It\u2019s pretty nifty.\u201d</p>\n\n<p>He insisted that it was fast, and I was like, \u201cMeh.  JVM is fine.\u201d</p>\n\n<h3>Node.js</h3>\n\n<p>I checked the website again, and <a href=\"https://nodejs.org/docs/v0.0.6/#community\">they\u2019d added a \u201cCommunity\u201d\nsection</a>.  Also, the docs\nstill sucked, but it was version 0.0.6 now, which was like, 4 more\nthan it was the first time I\u2019d checked, so whoever this Ryan guy was,\nhe was at least working hard on the thing.</p>\n\n<p>It compiled successfully, and I was hooked!  It started up so fast\ncompared to Rhino!  And it had tests that ran when I did <code>make test</code>,\nand they passed!</p>\n\n<p>3 important lessons for OSS success:</p>\n\n<ol><li>Docs and tests matter.</li>\n<li>At least have a link to a mailing list or <em>something</em>.  (Remember:\nthis was before GitHub connected us all with Issues.)</li>\n<li>It has to build and be fast.</li>\n</ol><p>I gradually stopped paying much attention to CommonJS, and instead\njust threw my efforts at Node.  I hung out on the mailing list and in\nIRC during all my free time.</p>\n\n<p>The problem with Node back then was that even though a growing number\nof people were all writing really interesting programs, it was hard to\nshare them.  So, I wrote <a href=\"https://github.com/npm/npm/commit/4626dfa\">this\nthing</a>, which was a port of\na bash script I was using to play with people\u2019s code.</p>\n\n<h3>The Registry</h3>\n\n<p>Technically that wasn\u2019t \u201cpublishing\u201d though.  In order to actually\n<em>publish</em> to npm there had to be an npm registry.  Today, that\nregistry is a webservice at <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a>, run by\n<a href=\"https://www.npmjs.com/\">npm, Inc.</a>.  The first registry was a git\nrepo called \u201cnpm-data\u201d.  I collected up the handful of modules that\u2019d\nbeen shared from on the mailing list and in the Node.js wiki page, and\nmade a JSON file with links to them.</p>\n\n<p>One principle of package management that I felt was really important\nwas that no one person should be the bottleneck in community growth.\nEspecially if that person is me.  Because I really hate that crap.</p>\n\n<p>I don\u2019t mind working really hard on lots of challenging stuff, but if\nI have to do some simple task over and over again, especially if other\npeople are depending on me to do it, it\u2019s like torture to me.  The\nprospect of being in someone\u2019s critical path for deploying their\nmodule was just\u2026 ugh.  Gross.</p>\n\n<p>I needed a web service type thing that would let people publish\npackages and then could download those packages and install them.</p>\n\n<p>I got to talking to <a href=\"http://mikealrogers.com/\">Mikeal Rogers</a>, who\nworked at\n<a href=\"https://www.crunchbase.com/organization/couch-io\">Couch.IO</a>.  He\nbuilt <a href=\"https://github.com/npm/npm-registry-couchapp/commit/f7f5c93\">the first npm registry\nCouchApp</a>,\nand got it functional.</p>\n\n<p>Fun fact!  For a little while, anyone could publish any package, and\nwe relied on the honor system to keep anyone from clobbering\nanyone else\u2019s name.  It was an ok system for a short while, since\nthere were only about 4 or 5 people in the world who knew this thing\nexisted, but we got an authentication and authorization system set up\nbefore anyone could take advantage of it.</p>\n\n<p>By that time, I\u2019d quit my job at Yahoo! and was taking a sabatical.\nIf you can afford it, I highly recommend saving up a little nest egg\nand taking a few months off to see what comes out of you.  Muses\ncan be fickle, and tend to call when least expected.</p>\n\n<h3>I know what you\u2019re thinking\u2026</h3>\n\n<p>You\u2019re thinking that the culmination of this story is that I published\nnpm to npm and that was my first npm publish, and it\u2019ll be super meta\nand awesome like that.  It\u2019d be a beautiful punchline.</p>\n\n<p>Real life is sloppy sometimes.</p>\n\n<p>I knew that I wanted npm to be able to accept abbreviated versions of\ncommands, so that <code>npm inst</code> would do the same thing as <code>npm install</code>.\n(To this day, the friendly CLI shorthands are some of npm\u2019s most\nbeloved features.)</p>\n\n<p>The first thing I published to npm was <a href=\"http://npm.im/abbrev\">abbrev</a>.\nI\u2019d written it already, mostly as a sort of coding crossword\npuzzle some\u2026 Saturday?  Wednesday?  All the days were pretty\nidentical during those two lazy/exhausting months of funemployment.</p>\n\n<p>Since abbrev was only one module, no build command, it was\nreally easy to publish and install repeatedly.  Ever since then, it\u2019s\nalways been one of my go-to testing modules to make sure things are\nworking properly.  Not only was it <em>my</em> first npm publish, it was\n<em>the</em> first npm publish, and it was published probably dozens or\nhundreds of times to <code>http://localhost:5984/</code> while I was working on\nnpm.  So, of course, when I had a registry running on my little\nDreamHost instance, <code>abbrev</code> was the first thing I published to it.</p>\n\n<p>The really wacky part: despite it being the first thing I\u2019d published\nwith npm, I didn\u2019t actually <em>use</em> abbrev in npm until <a href=\"https://github.com/npm/npm/commit/4f8b35e\">5 months\nlater</a>. That whole time I\nkept trying to figure out how to have proper dependencies in the thing\nthat installed dependencies.  Eventually, I gave up and threw it in a\n<code>utils</code> folder.</p>\n\n<p>Looking back over abbrev now, it\u2019s amazing to me how little it\u2019s\nchanged.  Most of the code is still that initial implementation from\nMay 2010.</p>\n\n<p>The moral of the story is that you don\u2019t know how it\u2019s going to end.</p>",
            "is_current_item": true,
            "post": {
                "id": "157295170418"
            }
        }
    ],
    "type": "text"
}