{
    "blog": {
        "description": "Writing and Stuff from Isaac Z. Schlueter",
        "name": "izs",
        "title": "blog.izs.me",
        "updated": 1544578035,
        "url": "http://blog.izs.me/",
        "uuid": "t:qZa3tMNNGjX7PQ45aXJ-jw"
    },
    "blog_name": "izs",
    "body": "<p>The Node.js documentation about the &ldquo;domain&rdquo; error handling module has a <a href=\"http://nodejs.org/api/domain.html#domain_warning_don_t_ignore_errors\">strongly worded warning imploring you to shut down the process when a domain catches an error</a>.</p>\n\n<p>I was recently asked for a more detailed explanation of why this is, and answered with the following <a href=\"https://gist.github.com/isaacs/7269994\">gist</a>.</p>\n\n<script src=\"//gist.github.com/isaacs/7269994.js\"></script><p>This principle is not unique to JavaScript, of course.  Any language with state, side effects, and exceptions that abandon local context without a way to resume at the throw site, will basically guarantee that unexpected exceptions cannot ever be handled in a way that lets the program proceed normally.  (This also applies, for example, to Ruby, Python, PHP, C++, and many other languages, though of course they&rsquo;re going to have their own set of caveats and workarounds.)</p>\n\n<p>This is not <em>so</em> bad if it&rsquo;s a program that isn&rsquo;t long-lived.  PHP scripts typically run to completion and then get cleaned up, so a missed exception is pretty meh.  Same with command line scripts.</p>\n\n<p>But in a server or some other sort of long-lived daemon, it&rsquo;s completely unacceptable, and will nearly always lead to undesirable system behavior.</p>\n\n<p>Finish up what you&rsquo;re doing, close the active connections or whatever, and GTFO.  Let the system start a new process.</p>\n\n<p>It&rsquo;s the only responsible option.</p>",
    "can_like": false,
    "can_reblog": false,
    "can_reply": false,
    "can_send_in_message": true,
    "date": "2013-11-01 19:22:00 GMT",
    "display_avatar": true,
    "format": "markdown",
    "id": 65712662830,
    "is_blocks_post_format": false,
    "note_count": 3,
    "post_url": "http://blog.izs.me/post/65712662830/restart-nodejs-servers-on-domain-errors-sensible",
    "reblog": {
        "comment": "<p>The Node.js documentation about the \u201cdomain\u201d error handling module has a <a href=\"http://nodejs.org/api/domain.html#domain_warning_don_t_ignore_errors\">strongly worded warning imploring you to shut down the process when a domain catches an error</a>.</p>\n\n<p>I was recently asked for a more detailed explanation of why this is, and answered with the following <a href=\"https://gist.github.com/isaacs/7269994\">gist</a>.</p>\n\n<script src=\"//gist.github.com/isaacs/7269994.js\"></script><p>This principle is not unique to JavaScript, of course.  Any language with state, side effects, and exceptions that abandon local context without a way to resume at the throw site, will basically guarantee that unexpected exceptions cannot ever be handled in a way that lets the program proceed normally.  (This also applies, for example, to Ruby, Python, PHP, C++, and many other languages, though of course they\u2019re going to have their own set of caveats and workarounds.)</p>\n\n<p>This is not <em>so</em> bad if it\u2019s a program that isn\u2019t long-lived.  PHP scripts typically run to completion and then get cleaned up, so a missed exception is pretty meh.  Same with command line scripts.</p>\n\n<p>But in a server or some other sort of long-lived daemon, it\u2019s completely unacceptable, and will nearly always lead to undesirable system behavior.</p>\n\n<p>Finish up what you\u2019re doing, close the active connections or whatever, and GTFO.  Let the system start a new process.</p>\n\n<p>It\u2019s the only responsible option.</p>",
        "tree_html": ""
    },
    "reblog_key": "zzDEdFWi",
    "recommended_color": null,
    "recommended_source": null,
    "short_url": "https://tmblr.co/Z7nwWyzCnwak",
    "slug": "restart-nodejs-servers-on-domain-errors-sensible",
    "state": "published",
    "summary": "Restart Node.js servers on domain errors: Sensible FUD",
    "tags": [],
    "timestamp": 1383333720,
    "title": "Restart Node.js servers on domain errors: Sensible FUD",
    "trail": [
        {
            "blog": {
                "active": true,
                "can_be_followed": true,
                "name": "izs",
                "share_following": false,
                "share_likes": false,
                "theme": {
                    "avatar_shape": "square",
                    "background_color": "#444444",
                    "body_font": "Helvetica Neue",
                    "header_bounds": "978,2448,2355,0",
                    "header_focus_height": 1152,
                    "header_focus_width": 2048,
                    "header_full_height": 3264,
                    "header_full_width": 2448,
                    "header_image": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o.jpg",
                    "header_image_focused": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/mA1nbvglg/tumblr_static_tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_focused_v3.jpg",
                    "header_image_scaled": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_2048_v2.jpg",
                    "header_stretch": true,
                    "link_color": "#FB4C16",
                    "show_avatar": true,
                    "show_description": true,
                    "show_header_image": true,
                    "show_title": true,
                    "title_color": "#fb4c16",
                    "title_font": "Gibson",
                    "title_font_weight": "regular"
                }
            },
            "content": "<p>The Node.js documentation about the &ldquo;domain&rdquo; error handling module has a <a href=\"http://nodejs.org/api/domain.html#domain_warning_don_t_ignore_errors\">strongly worded warning imploring you to shut down the process when a domain catches an error</a>.</p>\n\n<p>I was recently asked for a more detailed explanation of why this is, and answered with the following <a href=\"https://gist.github.com/isaacs/7269994\">gist</a>.</p>\n\n<p><a href=\"#\"><img src=\"https://assets.tumblr.com/images/inline_placeholder.png\" width=\"18\" height=\"14\"/></a></p><p>This principle is not unique to JavaScript, of course.  Any language with state, side effects, and exceptions that abandon local context without a way to resume at the throw site, will basically guarantee that unexpected exceptions cannot ever be handled in a way that lets the program proceed normally.  (This also applies, for example, to Ruby, Python, PHP, C++, and many other languages, though of course they&rsquo;re going to have their own set of caveats and workarounds.)</p>\n\n<p>This is not <em>so</em> bad if it&rsquo;s a program that isn&rsquo;t long-lived.  PHP scripts typically run to completion and then get cleaned up, so a missed exception is pretty meh.  Same with command line scripts.</p>\n\n<p>But in a server or some other sort of long-lived daemon, it&rsquo;s completely unacceptable, and will nearly always lead to undesirable system behavior.</p>\n\n<p>Finish up what you&rsquo;re doing, close the active connections or whatever, and GTFO.  Let the system start a new process.</p>\n\n<p>It&rsquo;s the only responsible option.</p>",
            "content_raw": "<p>The Node.js documentation about the \u201cdomain\u201d error handling module has a <a href=\"http://nodejs.org/api/domain.html#domain_warning_don_t_ignore_errors\">strongly worded warning imploring you to shut down the process when a domain catches an error</a>.</p>\n\n<p>I was recently asked for a more detailed explanation of why this is, and answered with the following <a href=\"https://gist.github.com/isaacs/7269994\">gist</a>.</p>\n\n<script src=\"//gist.github.com/isaacs/7269994.js\"></script><p>This principle is not unique to JavaScript, of course.  Any language with state, side effects, and exceptions that abandon local context without a way to resume at the throw site, will basically guarantee that unexpected exceptions cannot ever be handled in a way that lets the program proceed normally.  (This also applies, for example, to Ruby, Python, PHP, C++, and many other languages, though of course they\u2019re going to have their own set of caveats and workarounds.)</p>\n\n<p>This is not <em>so</em> bad if it\u2019s a program that isn\u2019t long-lived.  PHP scripts typically run to completion and then get cleaned up, so a missed exception is pretty meh.  Same with command line scripts.</p>\n\n<p>But in a server or some other sort of long-lived daemon, it\u2019s completely unacceptable, and will nearly always lead to undesirable system behavior.</p>\n\n<p>Finish up what you\u2019re doing, close the active connections or whatever, and GTFO.  Let the system start a new process.</p>\n\n<p>It\u2019s the only responsible option.</p>",
            "is_current_item": true,
            "is_root_item": true,
            "post": {
                "id": "65712662830"
            }
        }
    ],
    "type": "text"
}