{
    "blog": {
        "description": "Writing and Stuff from Isaac Z. Schlueter",
        "name": "izs",
        "title": "blog.izs.me",
        "updated": 1544578035,
        "url": "http://blog.izs.me/",
        "uuid": "t:qZa3tMNNGjX7PQ45aXJ-jw"
    },
    "blog_name": "izs",
    "body": "<p><strong>Update</strong>: The talk is online at <a href=\"http://blip.tv/jsconf/jsconf2012-brian-ford-6091521\">http://blip.tv/jsconf/jsconf2012-brian-ford-6091521</a>.  If you weren&rsquo;t there, you should go watch it before reading this.</p>\n\n<hr><p>As usual, this year&rsquo;s JSConf did not fail to deliver.  The parties, the\nlocation, the talks, the food, it was incredible.  Chris Williams (and\nthe rest of the JSConf family) really put together an incredible event.</p>\n\n<p>By far, the most controversial talk was <a href=\"http://brixen.io/\">Brian\nFord&rsquo;s</a> &ldquo;Is Node.js\nBetter&rdquo;.  I must admit, I walked in skeptical.  Brian Ford seems like a\nbright and reasonable guy, but is clearly not a noder.</p>\n\n<p>I&rsquo;m not going to transcribe what he said.  If you want that, read <a href=\"http://speakerdeck.com/u/brixen/p/is-nodejs-better\">his\nslides</a> and watch\nthe video when it comes out.  This is my reaction and response, and says\nmore about me than it does about Brian.</p>\n\n<p>This is based mostly on my meat-brain memory, and some notes that\nI scribbled.  It&rsquo;s quite\npossible that I may get some of the particulars wrong.  However, rather\nthan wait for the video to come out, I&rsquo;d like to write this now, since\nthe errors in perception are themselves useful information.  If you\nnotice any such error, please let me know.</p>\n\n<p>Of course, there are limits to how deep a speaker can go into a topic in\na 30 minute talk, and those limits are much shallower than how deep I\ncan go in this blog post.  So, I&rsquo;d like to frame this response not so\nmuch as me-vs-Brian, but rather as just another public part of a longer\nmulti-format conversation.  My goal is not to produce more controversy\nthan is useful, but to perhaps produce enough to keep things interesting.</p>\n\n<p>Fair warning, this is a much longer post than most things I write.  If\nyou&rsquo;re reading it, you&rsquo;re probably interested mostly in the specific\nnode stuff at the end.  I&rsquo;ve opted not to shorten it too drastically, because\nthe topics are in my opinion best served by a thorough exploration.</p>\n\n<h2>[citation needed]</h2>\n\n<p>A lot of what I&rsquo;m talking about is discussed in much more rigor\nelsewhere.  This blog post is a synthesis, not a research paper.  In\naddition to <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637\">Thinking Fast and\nSlow</a>\nwhich Brian mentioned, these are about the most\napproachable and informative discussions of the subjects that I&rsquo;ve\nfound:</p>\n\n<ul><li><a href=\"http://www.amazon.com/Influence-Science-Practice-ePub-ebook/dp/B001CDZYVE\">Influence</a></li>\n<li><a href=\"http://www.amazon.com/Predictably-Irrational-Revised-Expanded-ebook/dp/B002C949KE\">Predictably\nIrrational</a></li>\n<li><a href=\"http://lesswrong.com/lw/xy/the_fun_theory_sequence/\">Less Wrong: Fun Theory</a></li>\n<li><a href=\"http://wiki.lesswrong.com/wiki/How_To_Actually_Change_Your_Mind\">Less Wrong: How to Actually Change Your\nMind</a></li>\n</ul><h2>The Right</h2>\n\n<p>Brian started his talk with a very insightful exploration of the nature\nof controversy.  He talked about our fast brain and slow brain, and\nguaranteed that reading <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637\">Thinking Fast and\nSlow</a>\nwould change your life for the better, or he&rsquo;d refund the cost of the book.</p>\n\n<p>In discussing the title of the talk, he made the point that every value\njudgement implies a comparison, and invites controversy.  If presented\nwith a choice of apples and oranges, and you remark that &ldquo;oranges are\nhealthy&rdquo;, then the implication is that apples are not (or at least\n<em>less</em>) healthy.  So, the question &ldquo;Is Node.js Better&rdquo; raises the\nquestion, &ldquo;Better than what?&rdquo;</p>\n\n<h3>Storming Brains</h3>\n\n<p>He went on to stress the importance of the scientific method, especially\nin cases where groupthink can grab ahold of a popular intuition.  A\npowerful example of this is the idea of brainstorming, which has come\nunder\n<a href=\"https://en.wikipedia.org/wiki/Brain-storming#Criticism\">criticism</a> in\nrecent studies.</p>\n\n<p>Of course, another fascinating point worth mentioning (which was not covered\nin Brian&rsquo;s talk) is that the primary\nsource of the criticism is a survey of the results of 22 different\nstudies with different methodologies, done in different environments,\non different subjects.</p>\n\n<p>I&rsquo;m wondering what the differences are between the 4 where brainstorming\nworked, and the 18 where it didn&rsquo;t.  It&rsquo;s especially worth noting that\n18 instances of brainstorming&rsquo;s failure vs 4 instances where it was\nsuccessful, does not imply that brainstorming is &ldquo;usually&rdquo; less\neffective: only that it&rsquo;s usually less effective in the studies\nsurveyed.  If you check the weather in Wisconsin 18 times in the summer,\nand 4 times in the winter, you might conclude it&rsquo;s usually tropical.</p>\n\n<p>This survey was reported several\ntimes in the Journal of Personality and Social Psychology.  More\nrecently, these journal articles were summarized in the New Yorker and\nother popular magazines.  To me, this smacks of &ldquo;turns out&rdquo;-ism.  It\n<em>might</em> be that the popular intuition about brainstorming is wrong.  It\nmight also be that it&rsquo;s just incomplete.</p>\n\n<h3>Organization</h3>\n\n<p>Brian discussed the concept that organizations tend to perpetuate the\nproblems that they were designed to solve.  To my mind, this implies\nthat we ought not to try to solve our problems with organizations, but\nrather, to solve them with chaos and disruption instead, wherever possible.\nSince it is often not possible, and because &ldquo;disruption&rdquo; becomes just\nanother buzzword meaning a specific sort of organization, we should make\nit our goal not to &ldquo;solve problems&rdquo;, but rather to find the problems\nthat are hidden by our current assumptions.</p>\n\n<p>&ldquo;Solving&rdquo; a problem, then,\nbecomes more an exploration than a &ldquo;fix this thing&rdquo; exercise.  An\nexploratory expedition stops exploring when it returns with an answer.\nSimilarly, organizations that are designed to solve a specific problem\n(as opposed to organizations that are designed to, say, throw parties or\nmake buttons)\nshould have their own destruction built into their core constitution.</p>\n\n<p>This principle of minimum institution has guided the choices we&rsquo;ve made\nin npm and in Node.js, technologically as well as socially.\nIt has shaped the community in subtle ways that\nare difficult to recognize from the outside.  It&rsquo;s a principle that is\nclose to my heart, and it&rsquo;s why Node and I have gotten along so well.</p>\n\n<h3>Behavioral Science</h3>\n\n<p>&ldquo;Programming is a behavioral science.&rdquo;  Couldn&rsquo;t agree more.  However,\nthe transition from &ldquo;behavioral science&rdquo; to concurrency as a way to deal\nwith scarcity of compute resources felt a bit forced to me.  From that\npoint of view, everything is behavioral science, because everything we\ndo is done out of some human need (or else we wouldn&rsquo;t do it.)</p>\n\n<p>I think it&rsquo;s more precise to say that software development is behavioral\nscience, because every interface is a human interface, and humans are\neven more unreasonable in their behavior than hard disk platters.</p>\n\n<h2>The Wrong</h2>\n\n<p>There were a few points where I believe that Brian simply was either\nincorrect, misinformed, or perpetuating and reacting to\nthe very groupthink that he is ostensibly setting out to move past.</p>\n\n<h3>Justifications for Using Node.js</h3>\n\n<p>There were a few justifications for using Node that Brian listed:</p>\n\n<ul><li>same language on the client and server</li>\n<li>there are many JavaScript programmers</li>\n<li>Node.js is more fun</li>\n</ul><p>These are all interesting justifications, though really, the\nfirst two are rationalizations for the third.  For a talk that started\nout by diving into the science of hedonics and decision theory (albeit\na somewhat Gladwell-esque popularization of it), I was a bit disappointed to\nsee that he didn&rsquo;t go into more depth on this point.</p>\n\n<p>He said that users call themselves polyglots, so he rejects the claim\nthat a single language is actually relevant.  This is a highly specious\nrebuttal.  I can stand, but I still often find it pleasant to sit.  It\ndoesn&rsquo;t have to be <em>necessary</em> in order to be valid\nin this case, it only needs to be <em>comfortable</em>.  If you&rsquo;ve never\nworked in a single-language stack, I highly recommend it.  Even though\nyou can&rsquo;t share a lot of code in most situations, it does reduce the\ncognitive load switching between different parts of the application.\nThis is the same reason that I&rsquo;ve suggested using semicolons in\nJavaScript programs that include other non-ASI languages: reducing\nswitching cost is reducing cost.</p>\n\n<p>Brian claimed that the &ldquo;many JavaScript programmers&rdquo; argument is\ninvalid, or at least, not very compelling. We ought to figure out the\nideal platform, he said, and then provide advocacy, education, and\nresources to help people adopt it.  This also strikes me as a bit weird.\nI&rsquo;m not claiming that one should make all their technical\ndecisions based solely on popularity, of course, but it certainly is not\n<em>irrelevant</em>.  There&rsquo;s something to be said for pragmatism.</p>\n\n<p>People don&rsquo;t use Node.js because it&rsquo;s the same language on the client\nand server.  They use Node.js because that language is <strong>JavaScript</strong>,\nand JavaScript is fun.</p>\n\n<p>There aren&rsquo;t more JavaScript programmers because of a lack of education\nor advocacy in other languages.  JavaScript is fun (and unavoidable),\nand so all programmers use it.</p>\n\n<p>&ldquo;Node.js is more fun.&rdquo;  This reminds Brian of Ruby a few years ago.\nIt&rsquo;s important to remember, in the context of hedonics especially, that\n&ldquo;fun&rdquo; is a highly subtle term worthy of study on its own.</p>\n\n<p>The problem with &ldquo;Justifications for doing X&rdquo; is that we do things\n<em>primarily</em> because of our emotions.  Even the action of &ldquo;being rational&rdquo;\nis a thing that we choose to do because of a positive feeling attached\nto our self-image as a &ldquo;rational person who does smart things&rdquo;, and the\nassumption that we&rsquo;ll get some pleasantly winful reward that feels good.\nWhen we really want to do something irrational, we usually have no problem\nreconciling the conflict with our preferred self-image as a rational\nindividual.</p>\n\n<p>Emotions are not just <em>part</em> of motivation, they <em>are</em> motivation.  If you\nwant to know why a person does something, don&rsquo;t ask them to explain why\nthey do it; try instead to figure out how they feel.  It&rsquo;s a much more\nchallenging question, but it leads to much more interesting information.</p>\n\n<h3>About the word &ldquo;hype&rdquo;</h3>\n\n<p>When we have a good feeling about something (or even,\nwhen we just make any choice at all, and don&rsquo;t quite understand why),\nour brain begins inventing rationalizations right away.  The\nfirst one to pattern-match against &ldquo;X because Y&rdquo; is likely\naccepted as the &ldquo;reason&rdquo; we&rsquo;re doing something, regardless of how much\nthe truth of &ldquo;Y&rdquo; actually affects the likelihood of &ldquo;X&rdquo;.</p>\n\n<p>Try asking a compulsive gambler why he goes to the casino.  He might\ntell you about his &ldquo;strategy&rdquo; for roulette.  Of course, this is\nbullshit.  Roulette is a deterministically losing game; the more you\nplay, the more you lose.  Same with craps, slots, and\n(unless you&rsquo;re the best at the table) poker.  It&rsquo;s the\n<strong>feeling</strong> of winning that he&rsquo;s chasing, and the <strong>feeling</strong> of the\nchase.  If he was truly motivated by the desire for money,\nthere are obviously much better ways of getting it.</p>\n\n<p>When a person shares their justifications for doing something,\none of two things typically happens, in the &ldquo;fast-brain&rdquo;:</p>\n\n<ol><li>You feel the same way about the thing.  The justification\npattern-matches against &ldquo;I should X-that-I-do because Y&rdquo;, and so\nyou accept the justification as rational, wise, and well-informed.\nAfter all, you already do it, so you must agree.</li>\n<li>You feel differently about the thing.  Or, at least, it&rsquo;s not a thing\nyou do, and so you have invented some justifications for not doing\nit.  Your brain pattern-matches against &ldquo;I should\nX-that-is-stupid because of Y&rdquo;, and so you reject the justification\nas irrational, foolish, and ignorant.  After all, it&rsquo;s stupid, so any\njustification must be misguided.</li>\n</ol><p>If you have some vegan friends, and some friends on the paleo diet, and\nfeel like watching some fireworks, ask them in each others company why\nthey eat the way that they do.  No matter how polite they try to be,\neach will <em>subconsiously</em> perceive the statements of the other as an\nattack, and feel the need to defend their position.  If they are wise\nenough to retreat from needing to <em>convince</em> the other, they&rsquo;ll most\nlikely at least make a big show about &ldquo;agreeing to disagree&rdquo;.\n(Of course, if they&rsquo;ve been on this diet for a while, they may have\nenough practice at these sorts of situations to handle them quite\ngracefully.)</p>\n\n<p>If X is not just &ldquo;do this action&rdquo;, but rather &ldquo;feel this way&rdquo;, and you\ndo not already feel that way, and the justification is not enough to\nincite this feeling (as justifications almost never are),\nthen we label it &ldquo;hype&rdquo;, and it <em>raises</em> the bar\nthat we now require to take the thing seriously next time.</p>\n\n<p>Like so many cognitive\nshortcuts, this is a really good move much of the time.  After all,\npeople&rsquo;s justifications are usually self-delusions as often as\nwell-informed and rational reasons for doing or thinking anything.  It\nmakes perfect sense to be extra skeptical when we are at the risk of\nbeing influenced by it.  If we have to be extra skeptical over and over\nagain, we start to pattern match &ldquo;X is good&rdquo; into the hype category.\nSuddenly, it&rsquo;s not just that veganism or paleo is not for me, it&rsquo;s that\nthe diet is a mark of a foolish <em>person</em>.</p>\n\n<p><strong>The net result is that anyone saying anything positive is likely to be\nlabelled a &ldquo;fanboi&rdquo;, and their statement called &ldquo;hype&rdquo;, no matter what\nthey say.</strong>  This is a dangerous feedback loop that leads technology\ncommunities to stagnation, bitterness, and chest-beating.</p>\n\n<h3>Yo Dawg! I heard you like cognitive distortions, so I distorted your cognition so you can distort while you cognit!</h3>\n\n<p>The mind is such a wonderful thing!  Mistakes in the mistake\ndetection lead to potentially valid statements being\ndiscounted because they are presented <em>along with</em> invalid justifications,\nor presented <em>by</em> a low-status speaker, or are <em>in conflict with</em>\nalready-held beliefs, <em>especially</em> when those already-held beliefs are a\npart of our Tribal Story.</p>\n\n<p>Even worse, you have situations where we see a few &ldquo;X is good because Y&rdquo;\njustifications, deem them false, and then subconsciously\ninternalize the fact that we\ngain status in our tribe by applying the &ldquo;hype&rdquo; label and\ndiscounting it, resulting in spiraling down into the toilet.\nPoliticians and marketers have made a science of getting us to elevate\narbitrary ideas into this Tribal Story, blinding us to any disagreement.</p>\n\n<p>Birds fly.  Fish swim.  Humans make mistakes.  It is our Super Power.\nWe all do this.</p>\n\n<p>We almost never change our minds.  We are influenced in ways we are\nincapable of detecting (and will deny!)  We are motivated by the behavior\nof people who look like us superficially, and believe (at least temporarily)\nliterally everything we hear.</p>\n\n<p>There is virtually no limit to the ability\nof the human mind to find new and creative ways to get out of touch with\nreality.  I don&rsquo;t want to give the impression that I (or anyone) could\ndelineate all the many subtleties of human cognitive error.  Every one\nis so rich and complicated.  Even this discussion of\npattern-matching &ldquo;X-because-Y&rdquo; is a serious oversimplification.</p>\n\n<p>In the ancestral environment of adaptation, disagreement was often\nfatal.  We&rsquo;ve gotten a bit better at intelligent disagreement, but we\nstill try unconsciously to come to an all-or-nothing agreement within\nour own heads, annihilating any &ldquo;bad&rdquo; idea entirely, and shrowding any\n&ldquo;good&rdquo; idea in a halo.</p>\n\n<p>Whenever tempted to call something &ldquo;hype&rdquo; (or, even, &ldquo;anti-hype&rdquo;),\nI try to remember to ask the following questions:</p>\n\n<ol><li>Is the provided justification <em>evidence</em>, <em>data</em>, or an expression of\na <em>feeling</em>?  What is the speaker&rsquo;s experience of the thing being\ndiscussed?  If it&rsquo;s evidence, is it reproducible?  If it&rsquo;s data, is\nit relevant?</li>\n<li>How do I feel about the subject?  How did I feel about it\nyesterday?  What are my justifications?</li>\n<li>Am I tempted to dismiss this?  Is it because of bad evidence,\na speaker who holds low status in my tribe,\nor because I disagree with the feeling?  If it&rsquo;s a lack of evidence,\nwhat evidence <em>would</em> make me feel the same way?  If it&rsquo;s a feeling I\ndon&rsquo;t share, what other things <em>do</em> I feel that way about?  If it&rsquo;s a\nlow-status speaker, how would I feel if <code>&lt;person I respect&gt;</code>\nwas saying it?</li>\n<li>Am I tempted to accept this?  Is it because it agrees with something\nI already think?  What new information does it actually contain?</li>\n</ol><p>This is part of the reason why I try to criticise Node.js\nand npm as harshly and often and publicly as I can.  I do think that\nthey&rsquo;re tremendously useful tools&hellip; but how can you believe me if I\ntell you that they&rsquo;re perfect, when I clearly know better?  And if you\ncan&rsquo;t believe me when I talk about Node.js, then what good am I?</p>\n\n<h3>Better justifications to use Node.js</h3>\n\n<ol><li>The IO paradigm is a good fit for your problem, and V8 is fast enough.\nThis is the case for a lot of web software, but definitely\nnot every program.  Node.js really does make\nit pretty easy to write things like IRC bots and crawlers and\nwebsites, and is probably not ideal for many compute-intensive\napplications.</li>\n<li>It&rsquo;s fun to write programs in this fashion.  There are time-honored\ntraditions of thinking of data as streams of bytes, and JavaScript is\na relatively simple and expressive language for doing this in\ncreative ways.</li>\n<li>It&rsquo;s fun to be a part of making a popular platform better.  The\ncommunity is active and still pretty friendly, and that feels good to\nbe a part of.  Newcomers turn into regulars and then celebrities very\nswiftly.  All it takes is a bit of persistence and enthusiasm.</li>\n<li>You prefer the simpler approach to asynchronous programming, using a\ncallback/observer model (or actor model for child processes), rather\nthan something like green threads or coroutines that &ldquo;look&rdquo; synchronous.</li>\n</ol><p>If you&rsquo;re not writing systems that are well served by nonblocking IO, or\nan event loop/observer pattern approach, or if you don&rsquo;t think it&rsquo;s fun\nto make programs this way, then you probably shouldn&rsquo;t use it.</p>\n\n<p>But, even that aversion is worth looking carefully at that, no matter what\nyou decide.  V8 is an extremely fast virtual machine, and\nthese days, a <em>lot</em> of programs are IO-bound.</p>\n\n<p>And even if it&rsquo;s not, we tend to focus on &ldquo;the right tool for the job&rdquo;,\nat the exclusion of &ldquo;an awesome tool for the job&rdquo;.  The opposite of\n&ldquo;right&rdquo; is &ldquo;wrong&rdquo;, but the opposite of &ldquo;awesome&rdquo; is &ldquo;boring&rdquo;, which is\nsometimes worse, especially if you&rsquo;re trying to maximize creativity.</p>\n\n<p>I&rsquo;m not sure how much research Brian did when he went out looking for\njustifications for using Node.js, but I don&rsquo;t think he really got at\nwhat actually is driving so many people interested in this thing.</p>\n\n<h2>Controversy</h2>\n\n<p>So far, I felt like the setup was nice, but the criticism itself was\nkind of lackluster.  We&rsquo;ve heard it before.  Node is hyped.  The\nsingle-language stack isn&rsquo;t all it&rsquo;s cracked up to be.  Etc.  I was\neager for the meat.</p>\n\n<p>No sooner had I thought this, than the next slide said:</p>\n\n<h3>Node.js rejects reality</h3>\n\n<p>Aha!  There it is.  That primal &ldquo;under attack&rdquo; feeling, the visceral\ntension in my lower abdomen, the warmth on my face.</p>\n\n<p>When I was younger (and still today when I&rsquo;m not at my best, I must\nadmit) the temptation was to hit back, or dismiss the message.  Fight or\nflight.  I think Brian probably\nlost a bunch of the audience with this slide.  It sure did get my attention.</p>\n\n<p>These days, when I feel that reaction, I try to leverage the added\nawareness that comes with the adrenaline, to be on the lookout for\nwhatever comes next, because it is full of valuable information,\nespecially if it is highly disagreeable.  Beware of the moments\nwhen rationality tries to slip away: those are the times you most need\nit.</p>\n\n<p>As I am somewhat dogmatic about endeavoring to\nreject reality less, I was very excited to hear what we might be\nmissing.</p>\n\n<p>Sadly, the justification for the &ldquo;ignores reality&rdquo; claim was not as\npointed as I would have liked.  It amounted to:</p>\n\n<ol><li>JavaScript is a garbage collected language.  Garbage collection\npretends that you have infinite memory, and you don&rsquo;t.</li>\n<li>IO always &ldquo;actually&rdquo; blocks somewhere, so the comparison between\nevents and blocking is not valid, since it has to block somewhere.</li>\n</ol><p>For sure, garbage collection is tricky, and the interaction between\nNode.js and the V8 garbage collector could probably be improved.  But to\ncall it a lie is a bit silly.  Garbage collection doesn&rsquo;t pretend that\nyou have infinite memory; that&rsquo;s virtual memory.  Garbage collection\npretends that you don&rsquo;t have to <code>free</code> memory in order for it to be\nre-used.</p>\n\n<p>One of the biggest pain\npoints of non-managed languages is having to explicitly free memory.\nThe biggest pain point in managed languages is having to deal with a\ngarbage collector.  There may be some sort of approach to memory\nmanagement that isn&rsquo;t collected or manual, but better than either.  If\nso, I don&rsquo;t know of it, and it doesn&rsquo;t matter anyway, because <strong>that is\na language design problem, and Node.js is not about designing a\nlanguage</strong>.  If you have a beef with garbage collection, take it up with\nV8 and TC-39.</p>\n\n<p>As for node being single-threaded, and IO always blocking, that&rsquo;s kind\nof confusing to me.  Of course, you don&rsquo;t\nactually have application-level <em>processing</em> of IO in parallel,\nsince there&rsquo;s only a single <em>JavaScript</em> thread, but IO definitely is\nperformed in parallel to the degree that the machine can provide,\nand &ldquo;nonblocking&rdquo; is the technical term for the\ntype of IO that node does on sockets.  (Nonblocking IO on files is\nsimulated using threads.)</p>\n\n<p>I&rsquo;d really like more details about what exactly Brian\nwas referring to on this point about IO &ldquo;always blocking somewhere&rdquo; and\nin what way Node.js rejects that reality.</p>\n\n<h3>entire ecosystem of tools and libraries must be built</h3>\n\n<p>This was a valid concern in 2010.  I said at the time that it\nwould not be an issue in a few years.  It&rsquo;s not an issue today.</p>\n\n<p>To an extent, this was by design.  A large part of\nRyan&rsquo;s reason for choosing\nJavaScript was that it is the only popular interpreted language with a\nsuitably powerful VM and no existing IO paradigm.  Additionally,\nto the extent that JavaScript <em>does</em> have a tradition of IO, it&rsquo;s\nXHR and the DOM, which are event-based and asynchronous.</p>\n\n<p>Since the birth of Node.js, a lot of libraries have been built.  There\nare 8500 modules on\nnpm.  There are bindings to every popular database, sophisticated test\nframeworks, template libraries, HTTP routers, and so on.  It&rsquo;s easy and\nfun to write modules, and so people have written modules.  This approach\nis remarkably valuable.</p>\n\n<p>That being said, module discovery and visibility leaves a lot to be\ndesired.  npm has grown much faster than Rubyforge or PyPI, much earlier\nin the life of Node, and so we have hit these problems earlier.</p>\n\n<p>Regarding tools, things are coming along quite nicely.</p>\n\n<p>Post-mortem debugging with MDB\njust landed in the master branch, and will be in node 0.7.8.  (Node v0.6\nhas had this for a while already.)  Mad props to Dave Pacheco for that.\nSeriously, if you&rsquo;ve never seen it in action, it&rsquo;s amazing.  In all my\nyears using PHP, I can&rsquo;t even count the number of times I&rsquo;d desparately\nwanted this sort of thing.  The zend IDE had some pretty good debugging\ncapabilities, but Dap&rsquo;s jsstack stuff is truly magical.  Call me a\nfanboi, I don&rsquo;t care: believe the hype.  It&rsquo;s fantastic.\nThe only sad\npoint is that it&rsquo;s only available in SmartOS, but it&rsquo;s not exactly\nsurprising that the OS made by Joyent has some special love for Node.js\n;)</p>\n\n<p>The DTrace support in Node is also impressive.  Again, not\nsurprising, given the fact that so many DTrace heavyweights work at\nJoyent, but the go-to DTrace library for node is not written by a Joyent\nemployee.  It&rsquo;s Chris Andrews&rsquo;\n<a href=\"https://github.com/chrisa/node-dtrace-provider\">node-dtrace-provider</a>\nmodule.  Anarchy &gt; curation, yet again.</p>\n\n<p>The depth and breadth of information that can be provided by\nDTrace, and the great work by Brendan Gregg and others at Joyent to\nactually massage that data into a format that humans can easily consume,\nis absolutely phenomenal.</p>\n\n<p>Similar work on run-time analytics and post-mortem debugging is underway\nat Microsoft, I&rsquo;m told.  Windows users: stay tuned.</p>\n\n<p>As a long-time text-editor-and-shell guy\n(moved from TextMate to vim a while ago), I don&rsquo;t really\nfollow the IDE stuff too closely.  But, Microsoft,\nCloud9, and many others are iterating furiously in this space.\nMany of them are leveraging their existing work on other JavaScript\ntooling, so it&rsquo;s moving quite fast.</p>\n\n<p>The built-in node debugger client is more my style, but node-inspector\nhooks into the Chrome debug tools, which imo blow away most visual\ndebuggers available.  (They even have heap analysis tools!)  There are\nalso plugins for Eclipse to provide stepwise debugging and analysis, and\na lot of existing Eclipse users are more at home there.</p>\n\n<p>So, it&rsquo;s not so much that the ecosystem of tools &ldquo;must\nbe built&rdquo;, as much as that it is being built, and leverages the existing\nJavaScript, V8, and system tools that already existed before Node showed\nup.  In many ways, Node.js provides one of the first server-side systems\nthat can fully take advantage of these things in a mostly cross-platform\nfashion.</p>\n\n<h3>Node.js will reproduce the last 15 years of ruby mistakes</h3>\n\n<p>Bold claim.  One that I was excited to see ample justification for.  What\nare the last 15 years of Ruby mistakes?\nHow can we avoid making those\nsame mistakes?  How did ruby fix them?  What can we learn from ruby&rsquo;s\nexperience?</p>\n\n<p>Brian&rsquo;s main justification of this point was that the\ncluster module is a repeat of Phusion Passenger.</p>\n\n<p>It&rsquo;s not entirely\nclear whether he was referring to TJ&rsquo;s &ldquo;cluster&rdquo; package, or the\nbuilt-in &ldquo;cluster&rdquo; module in v0.6, or the much improved &ldquo;cluster&rdquo;\nmodule in node v0.7.  None of them are a particularly close reproduction\nof passenger, though I suppose that TJ&rsquo;s is probably the closest.  But\nit&rsquo;s not as if any of these are an Apache plugin, or tied to a specific\nweb framework.  The analogy is a stretch, to say the least.</p>\n\n<p>What&rsquo;s even less clear is how Phusion Passenger, a program written in\n2009, and widely recognized as the most effective and popular way to\ndeploy the most effective and popular Ruby application framework, can\npossibly represent a &ldquo;mistake&rdquo;, let alone 15 years of mistakes.</p>\n\n<p>I can only conclude that I do not understand what he was trying to say,\nbecause otherwise, I cannot make sense of it.\nMaybe there was something else called &ldquo;passenger&rdquo; in the Ruby world once\nupon a time, which did kernel load balancing, IPC, and not much else.\nPerhaps this &ldquo;passenger&rdquo; was deemed a mistake, and is now gone.</p>\n\n<p>Show me a ruby mistake we&rsquo;re reproducing, and I&rsquo;ll make sure it gets\nfixed.</p>\n\n<h3>process concurrency is doomed</h3>\n\n<p>Brian declared that process concurrency will never be able to scale\nadequately.  I cannot accept this without data.  Instead of data, he\ngave some hand-wavey assertions about garbage collection getting out of\ncontrol.</p>\n\n<p>I&rsquo;ll assume that he was running low on time, and perhaps had to cut out\nthe histograms and demonstrations.  So let&rsquo;s leave that question open.</p>\n\n<p>Of course, spawning one process per request, or one process per IO\nor timer, is completely unreasonable.\nThat&rsquo;s why CGI was not adequate, and no one runs a real web platform\non bash.  However, running a single process\nper core, and having multiple HTTP servers share the open socket,\nand then using an event loop for IO and timers, is remarkably effective.</p>\n\n<p>If there is doom on the horizon, don&rsquo;t hint about it.  Show me the\nevidence.</p>\n\n<h3>symmetric errors, chain of evidence</h3>\n\n<p>Finally!  Something that <em>genuinely sucks a <strong>lot</strong> in Node.js!</em></p>\n\n<p>Domains is on the list for v0.8.  I don&rsquo;t know that the first pass at\ndomains will be the final and ultimate fix for this, but it&rsquo;ll be\nsomething to iterate on.  This will make errors much more symmetric, and\nprovide a much clearer chain of evidence.</p>\n\n<p>The chain of evidence is also much improved by having post-mortem\ndebugging of production systems.  If you haven&rsquo;t yet, check out Bryan\nCantrill&rsquo;s talk <a href=\"http://www.infoq.com/presentations/Debugging-Production-Systems\">And It All Went Horribly\nWrong</a>.</p>\n\n<p>So, this is important to me, it&rsquo;s important to Node.js users, it&rsquo;s\nimportant to the various companies paying the salaries of the node core\nteam.  It&rsquo;s reasonable to trust it&rsquo;s high priority.</p>\n\n<h2>Problems I Wish He&rsquo;d Mentioned</h2>\n\n<p>If you want to know what&rsquo;s wrong with node, ask a node-core developer.</p>\n\n<p>These are some of the things that are really problematic, some of them\nin a pretty deep way.  Of course, these are the things I know about,\nso they&rsquo;re things that we&rsquo;re working on for future releases of Node.js.\nIf there are things that you think belong on this list, let us know.</p>\n\n<p>Some of them are very hard,\nand will require iteration.  Some of them are pretty straightforward,\nand will be addressed soon.  Some of them are not super difficult, but\njust lower priority, and won&rsquo;t get addressed for a while.</p>\n\n<ol><li>Debugging.\nSee above.  It&rsquo;s our top issue, and it&rsquo;s coming along.  It was\nmentioned, but less strongly than I would have liked to see.</li>\n<li>It is very hard to get visibility into which pending actions are\nkeeping the event loop running.  This is a source of subtle errors.\nThe libuv refcount behavior is in the process of being cleaned up,\nand v0.8 will include a mechanism for seeing exactly which handles\nare in an open state.</li>\n<li>The Stream API, which is by all accounts the core use-case for node,\nis remarkably inconsistent and hard to extend.  It&rsquo;s a lot nicer in\nv0.4 and v0.6 than it was in v0.2 and before, but it&rsquo;s got a ways to\ngo yet.  We paper over a lot of the inconsistency in the\nStream.pipe() method, but it&rsquo;s a source of many subtle issues.  Node\nv0.9 will focus primarily on this issue.</li>\n<li>It&rsquo;s hard to find good node modules.  Reducing the barrier to entry\nfor node package creation has made it a lot easier for more people to\ntake advantage of.  However, when you solve a problem, you open the\ndoor for new ones that were hiding behind it.  We&rsquo;ve grown faster\nthan most platforms, which means that we&rsquo;re encountering the\ndiscovery issues sooner.  This will be addressed in the coming months\nwith a new npmjs.org website.</li>\n<li>The Node.js project lacks a consistent and visible continuous\nintegration system, so performance degradations can occur silently.</li>\n<li>Using binary modules is overly difficult, and requires a build\ntoolchain on the install target.  Work is underway to improve this,\nbut it&rsquo;s tricky.</li>\n</ol><p>And of course, just the fact that Node.js is very young, and has some\nbugs.  It&rsquo;ll no doubt get more, as we continue to work on it, but the\ngoal is to change things in ways that make these bugs easier to spot and\neasier to fix.</p>\n\n<p>It is not sufficient for Node.js to be better than any other platform.\nIt must be so good that it permanently raises expectations in this\nspace.  It must continue to impress and delight users.  There is so much\nwork yet to do, it&rsquo;s mind boggling.</p>\n\n<p>Laurels are not very comfortable to rest on.</p>\n\n<h2>And finally&hellip;</h2>\n\n<p>If you&rsquo;ve gotten this far, congratulations.  I try to keep blog posts\nmuch shorter than this, but there was a lot to respond to here, and\ntouched on several issues that are very close to my interests.</p>\n\n<p>Brian&rsquo;s talk was fascinating.  Even the mistakes were\ninteresting.  When the video comes out, I highly recommend watching it.\nGo get <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637/\">Thinking, Fast and\nSlow</a>.\nI haven&rsquo;t read it, but I&rsquo;m familiar with some of\nKahneman&rsquo;s other work in behavioral economics, and I suspect it&rsquo;s\nevery bit as fantastic as Brian claims.</p>\n\n<p>I got a chance to talk to Brian after the talk, and so hopefully a lot\nof these points (at least, the specific technical details of what sucks\nin Node.js and what we&rsquo;re doing about it) doesn&rsquo;t come as a surprise to\nhim.  He seems like a genuinely nice and thoughtful person.</p>\n\n<p>For a talk that started off with a request that we use science and\nmake conflict useful, I was disappointed that his criticisms of Node\nwere lacking in scientific rigor or constructive calls to action.  But\nas I mentioned earlier, it&rsquo;s hard to fit it all into a 30 minute talk.\nI hope this conversation will not end here.</p>\n\n<p>We&rsquo;re all humans.  We all think wrong.  We all love, and worry, and try\nto do interesting things.  We all fail, and feel shitty, and try\nto explain why we&rsquo;re not a bad person for it.  We\nall succeed, and want to brag about it.  We tell ourselves stories, and\nsometimes those stories are true, but usually they&rsquo;re only just true enough\nto get by.</p>\n\n<p>Try to remember this, the next time you&rsquo;re telling someone how awesome\n(or over-hyped)\nNode.js is, or any other thing you have feelings about,\nand they suggest that you may be a brainwashed idiot.  They are\njust trying to protect something, as are you, and in the course of this\nprotection, our instincts will cause us to fail.</p>\n\n<p>Show that monkey brain who&rsquo;s boss!\nSlow down, breathe, and try to remember that this person\nwho disagrees with you is not some big dumb idiot, but most likely a very\nthoughtful person who&rsquo;s trying to do their best to create truth and beauty\nin the world.  If you don&rsquo;t learn what motivates them, how can you ever\njoin forces?</p>\n\n<div class=\"small\">Many thanks to Mikeal Rogers, Bryan Cantrill, Marco Rogers for reading early drafts of this post and providing feedback.</div>",
    "can_like": false,
    "can_reblog": false,
    "can_reply": false,
    "can_send_in_message": true,
    "date": "2012-04-09 17:27:00 GMT",
    "display_avatar": true,
    "format": "markdown",
    "id": 20786279320,
    "is_blocks_post_format": false,
    "note_count": 19,
    "post_url": "http://blog.izs.me/post/20786279320/re-brixens-is-node-better",
    "reblog": {
        "comment": "<p><p><strong>Update</strong>: The talk is online at <a href=\"http://blip.tv/jsconf/jsconf2012-brian-ford-6091521\">http://blip.tv/jsconf/jsconf2012-brian-ford-6091521</a>.  If you weren\u2019t there, you should go watch it before reading this.</p>\n\n<hr><p>As usual, this year\u2019s JSConf did not fail to deliver.  The parties, the\nlocation, the talks, the food, it was incredible.  Chris Williams (and\nthe rest of the JSConf family) really put together an incredible event.</p>\n\n<p>By far, the most controversial talk was <a href=\"http://brixen.io/\">Brian\nFord\u2019s</a> \u201cIs Node.js\nBetter\u201d.  I must admit, I walked in skeptical.  Brian Ford seems like a\nbright and reasonable guy, but is clearly not a noder.</p>\n\n<p>I\u2019m not going to transcribe what he said.  If you want that, read <a href=\"http://speakerdeck.com/u/brixen/p/is-nodejs-better\">his\nslides</a> and watch\nthe video when it comes out.  This is my reaction and response, and says\nmore about me than it does about Brian.</p>\n\n<p>This is based mostly on my meat-brain memory, and some notes that\nI scribbled.  It\u2019s quite\npossible that I may get some of the particulars wrong.  However, rather\nthan wait for the video to come out, I\u2019d like to write this now, since\nthe errors in perception are themselves useful information.  If you\nnotice any such error, please let me know.</p>\n\n<p>Of course, there are limits to how deep a speaker can go into a topic in\na 30 minute talk, and those limits are much shallower than how deep I\ncan go in this blog post.  So, I\u2019d like to frame this response not so\nmuch as me-vs-Brian, but rather as just another public part of a longer\nmulti-format conversation.  My goal is not to produce more controversy\nthan is useful, but to perhaps produce enough to keep things interesting.</p>\n\n<p>Fair warning, this is a much longer post than most things I write.  If\nyou\u2019re reading it, you\u2019re probably interested mostly in the specific\nnode stuff at the end.  I\u2019ve opted not to shorten it too drastically, because\nthe topics are in my opinion best served by a thorough exploration.</p>\n\n<h2>[citation needed]</h2>\n\n<p>A lot of what I\u2019m talking about is discussed in much more rigor\nelsewhere.  This blog post is a synthesis, not a research paper.  In\naddition to <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637\">Thinking Fast and\nSlow</a>\nwhich Brian mentioned, these are about the most\napproachable and informative discussions of the subjects that I\u2019ve\nfound:</p>\n\n<ul><li><a href=\"http://www.amazon.com/Influence-Science-Practice-ePub-ebook/dp/B001CDZYVE\">Influence</a></li>\n<li><a href=\"http://www.amazon.com/Predictably-Irrational-Revised-Expanded-ebook/dp/B002C949KE\">Predictably\nIrrational</a></li>\n<li><a href=\"http://lesswrong.com/lw/xy/the_fun_theory_sequence/\">Less Wrong: Fun Theory</a></li>\n<li><a href=\"http://wiki.lesswrong.com/wiki/How_To_Actually_Change_Your_Mind\">Less Wrong: How to Actually Change Your\nMind</a></li>\n</ul><h2>The Right</h2>\n\n<p>Brian started his talk with a very insightful exploration of the nature\nof controversy.  He talked about our fast brain and slow brain, and\nguaranteed that reading <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637\">Thinking Fast and\nSlow</a>\nwould change your life for the better, or he\u2019d refund the cost of the book.</p>\n\n<p>In discussing the title of the talk, he made the point that every value\njudgement implies a comparison, and invites controversy.  If presented\nwith a choice of apples and oranges, and you remark that \u201coranges are\nhealthy\u201d, then the implication is that apples are not (or at least\n<em>less</em>) healthy.  So, the question \u201cIs Node.js Better\u201d raises the\nquestion, \u201cBetter than what?\u201d</p>\n\n<h3>Storming Brains</h3>\n\n<p>He went on to stress the importance of the scientific method, especially\nin cases where groupthink can grab ahold of a popular intuition.  A\npowerful example of this is the idea of brainstorming, which has come\nunder\n<a href=\"https://en.wikipedia.org/wiki/Brain-storming#Criticism\">criticism</a> in\nrecent studies.</p>\n\n<p>Of course, another fascinating point worth mentioning (which was not covered\nin Brian\u2019s talk) is that the primary\nsource of the criticism is a survey of the results of 22 different\nstudies with different methodologies, done in different environments,\non different subjects.</p>\n\n<p>I\u2019m wondering what the differences are between the 4 where brainstorming\nworked, and the 18 where it didn\u2019t.  It\u2019s especially worth noting that\n18 instances of brainstorming\u2019s failure vs 4 instances where it was\nsuccessful, does not imply that brainstorming is \u201cusually\u201d less\neffective: only that it\u2019s usually less effective in the studies\nsurveyed.  If you check the weather in Wisconsin 18 times in the summer,\nand 4 times in the winter, you might conclude it\u2019s usually tropical.</p>\n\n<p>This survey was reported several\ntimes in the Journal of Personality and Social Psychology.  More\nrecently, these journal articles were summarized in the New Yorker and\nother popular magazines.  To me, this smacks of \u201cturns out\u201d-ism.  It\n<em>might</em> be that the popular intuition about brainstorming is wrong.  It\nmight also be that it\u2019s just incomplete.</p>\n\n<h3>Organization</h3>\n\n<p>Brian discussed the concept that organizations tend to perpetuate the\nproblems that they were designed to solve.  To my mind, this implies\nthat we ought not to try to solve our problems with organizations, but\nrather, to solve them with chaos and disruption instead, wherever possible.\nSince it is often not possible, and because \u201cdisruption\u201d becomes just\nanother buzzword meaning a specific sort of organization, we should make\nit our goal not to \u201csolve problems\u201d, but rather to find the problems\nthat are hidden by our current assumptions.</p>\n\n<p>\u201cSolving\u201d a problem, then,\nbecomes more an exploration than a \u201cfix this thing\u201d exercise.  An\nexploratory expedition stops exploring when it returns with an answer.\nSimilarly, organizations that are designed to solve a specific problem\n(as opposed to organizations that are designed to, say, throw parties or\nmake buttons)\nshould have their own destruction built into their core constitution.</p>\n\n<p>This principle of minimum institution has guided the choices we\u2019ve made\nin npm and in Node.js, technologically as well as socially.\nIt has shaped the community in subtle ways that\nare difficult to recognize from the outside.  It\u2019s a principle that is\nclose to my heart, and it\u2019s why Node and I have gotten along so well.</p>\n\n<h3>Behavioral Science</h3>\n\n<p>\u201cProgramming is a behavioral science.\u201d  Couldn\u2019t agree more.  However,\nthe transition from \u201cbehavioral science\u201d to concurrency as a way to deal\nwith scarcity of compute resources felt a bit forced to me.  From that\npoint of view, everything is behavioral science, because everything we\ndo is done out of some human need (or else we wouldn\u2019t do it.)</p>\n\n<p>I think it\u2019s more precise to say that software development is behavioral\nscience, because every interface is a human interface, and humans are\neven more unreasonable in their behavior than hard disk platters.</p>\n\n<h2>The Wrong</h2>\n\n<p>There were a few points where I believe that Brian simply was either\nincorrect, misinformed, or perpetuating and reacting to\nthe very groupthink that he is ostensibly setting out to move past.</p>\n\n<h3>Justifications for Using Node.js</h3>\n\n<p>There were a few justifications for using Node that Brian listed:</p>\n\n<ul><li>same language on the client and server</li>\n<li>there are many JavaScript programmers</li>\n<li>Node.js is more fun</li>\n</ul><p>These are all interesting justifications, though really, the\nfirst two are rationalizations for the third.  For a talk that started\nout by diving into the science of hedonics and decision theory (albeit\na somewhat Gladwell-esque popularization of it), I was a bit disappointed to\nsee that he didn\u2019t go into more depth on this point.</p>\n\n<p>He said that users call themselves polyglots, so he rejects the claim\nthat a single language is actually relevant.  This is a highly specious\nrebuttal.  I can stand, but I still often find it pleasant to sit.  It\ndoesn\u2019t have to be <em>necessary</em> in order to be valid\nin this case, it only needs to be <em>comfortable</em>.  If you\u2019ve never\nworked in a single-language stack, I highly recommend it.  Even though\nyou can\u2019t share a lot of code in most situations, it does reduce the\ncognitive load switching between different parts of the application.\nThis is the same reason that I\u2019ve suggested using semicolons in\nJavaScript programs that include other non-ASI languages: reducing\nswitching cost is reducing cost.</p>\n\n<p>Brian claimed that the \u201cmany JavaScript programmers\u201d argument is\ninvalid, or at least, not very compelling. We ought to figure out the\nideal platform, he said, and then provide advocacy, education, and\nresources to help people adopt it.  This also strikes me as a bit weird.\nI\u2019m not claiming that one should make all their technical\ndecisions based solely on popularity, of course, but it certainly is not\n<em>irrelevant</em>.  There\u2019s something to be said for pragmatism.</p>\n\n<p>People don\u2019t use Node.js because it\u2019s the same language on the client\nand server.  They use Node.js because that language is <strong>JavaScript</strong>,\nand JavaScript is fun.</p>\n\n<p>There aren\u2019t more JavaScript programmers because of a lack of education\nor advocacy in other languages.  JavaScript is fun (and unavoidable),\nand so all programmers use it.</p>\n\n<p>\u201cNode.js is more fun.\u201d  This reminds Brian of Ruby a few years ago.\nIt\u2019s important to remember, in the context of hedonics especially, that\n\u201cfun\u201d is a highly subtle term worthy of study on its own.</p>\n\n<p>The problem with \u201cJustifications for doing X\u201d is that we do things\n<em>primarily</em> because of our emotions.  Even the action of \u201cbeing rational\u201d\nis a thing that we choose to do because of a positive feeling attached\nto our self-image as a \u201crational person who does smart things\u201d, and the\nassumption that we\u2019ll get some pleasantly winful reward that feels good.\nWhen we really want to do something irrational, we usually have no problem\nreconciling the conflict with our preferred self-image as a rational\nindividual.</p>\n\n<p>Emotions are not just <em>part</em> of motivation, they <em>are</em> motivation.  If you\nwant to know why a person does something, don\u2019t ask them to explain why\nthey do it; try instead to figure out how they feel.  It\u2019s a much more\nchallenging question, but it leads to much more interesting information.</p>\n\n<h3>About the word \u201chype\u201d</h3>\n\n<p>When we have a good feeling about something (or even,\nwhen we just make any choice at all, and don\u2019t quite understand why),\nour brain begins inventing rationalizations right away.  The\nfirst one to pattern-match against \u201cX because Y\u201d is likely\naccepted as the \u201creason\u201d we\u2019re doing something, regardless of how much\nthe truth of \u201cY\u201d actually affects the likelihood of \u201cX\u201d.</p>\n\n<p>Try asking a compulsive gambler why he goes to the casino.  He might\ntell you about his \u201cstrategy\u201d for roulette.  Of course, this is\nbullshit.  Roulette is a deterministically losing game; the more you\nplay, the more you lose.  Same with craps, slots, and\n(unless you\u2019re the best at the table) poker.  It\u2019s the\n<strong>feeling</strong> of winning that he\u2019s chasing, and the <strong>feeling</strong> of the\nchase.  If he was truly motivated by the desire for money,\nthere are obviously much better ways of getting it.</p>\n\n<p>When a person shares their justifications for doing something,\none of two things typically happens, in the \u201cfast-brain\u201d:</p>\n\n<ol><li>You feel the same way about the thing.  The justification\npattern-matches against \u201cI should X-that-I-do because Y\u201d, and so\nyou accept the justification as rational, wise, and well-informed.\nAfter all, you already do it, so you must agree.</li>\n<li>You feel differently about the thing.  Or, at least, it\u2019s not a thing\nyou do, and so you have invented some justifications for not doing\nit.  Your brain pattern-matches against \u201cI should\nX-that-is-stupid because of Y\u201d, and so you reject the justification\nas irrational, foolish, and ignorant.  After all, it\u2019s stupid, so any\njustification must be misguided.</li>\n</ol><p>If you have some vegan friends, and some friends on the paleo diet, and\nfeel like watching some fireworks, ask them in each others company why\nthey eat the way that they do.  No matter how polite they try to be,\neach will <em>subconsiously</em> perceive the statements of the other as an\nattack, and feel the need to defend their position.  If they are wise\nenough to retreat from needing to <em>convince</em> the other, they\u2019ll most\nlikely at least make a big show about \u201cagreeing to disagree\u201d.\n(Of course, if they\u2019ve been on this diet for a while, they may have\nenough practice at these sorts of situations to handle them quite\ngracefully.)</p>\n\n<p>If X is not just \u201cdo this action\u201d, but rather \u201cfeel this way\u201d, and you\ndo not already feel that way, and the justification is not enough to\nincite this feeling (as justifications almost never are),\nthen we label it \u201chype\u201d, and it <em>raises</em> the bar\nthat we now require to take the thing seriously next time.</p>\n\n<p>Like so many cognitive\nshortcuts, this is a really good move much of the time.  After all,\npeople\u2019s justifications are usually self-delusions as often as\nwell-informed and rational reasons for doing or thinking anything.  It\nmakes perfect sense to be extra skeptical when we are at the risk of\nbeing influenced by it.  If we have to be extra skeptical over and over\nagain, we start to pattern match \u201cX is good\u201d into the hype category.\nSuddenly, it\u2019s not just that veganism or paleo is not for me, it\u2019s that\nthe diet is a mark of a foolish <em>person</em>.</p>\n\n<p><strong>The net result is that anyone saying anything positive is likely to be\nlabelled a \u201cfanboi\u201d, and their statement called \u201chype\u201d, no matter what\nthey say.</strong>  This is a dangerous feedback loop that leads technology\ncommunities to stagnation, bitterness, and chest-beating.</p>\n\n<h3>Yo Dawg! I heard you like cognitive distortions, so I distorted your cognition so you can distort while you cognit!</h3>\n\n<p>The mind is such a wonderful thing!  Mistakes in the mistake\ndetection lead to potentially valid statements being\ndiscounted because they are presented <em>along with</em> invalid justifications,\nor presented <em>by</em> a low-status speaker, or are <em>in conflict with</em>\nalready-held beliefs, <em>especially</em> when those already-held beliefs are a\npart of our Tribal Story.</p>\n\n<p>Even worse, you have situations where we see a few \u201cX is good because Y\u201d\njustifications, deem them false, and then subconsciously\ninternalize the fact that we\ngain status in our tribe by applying the \u201chype\u201d label and\ndiscounting it, resulting in spiraling down into the toilet.\nPoliticians and marketers have made a science of getting us to elevate\narbitrary ideas into this Tribal Story, blinding us to any disagreement.</p>\n\n<p>Birds fly.  Fish swim.  Humans make mistakes.  It is our Super Power.\nWe all do this.</p>\n\n<p>We almost never change our minds.  We are influenced in ways we are\nincapable of detecting (and will deny!)  We are motivated by the behavior\nof people who look like us superficially, and believe (at least temporarily)\nliterally everything we hear.</p>\n\n<p>There is virtually no limit to the ability\nof the human mind to find new and creative ways to get out of touch with\nreality.  I don\u2019t want to give the impression that I (or anyone) could\ndelineate all the many subtleties of human cognitive error.  Every one\nis so rich and complicated.  Even this discussion of\npattern-matching \u201cX-because-Y\u201d is a serious oversimplification.</p>\n\n<p>In the ancestral environment of adaptation, disagreement was often\nfatal.  We\u2019ve gotten a bit better at intelligent disagreement, but we\nstill try unconsciously to come to an all-or-nothing agreement within\nour own heads, annihilating any \u201cbad\u201d idea entirely, and shrowding any\n\u201cgood\u201d idea in a halo.</p>\n\n<p>Whenever tempted to call something \u201chype\u201d (or, even, \u201canti-hype\u201d),\nI try to remember to ask the following questions:</p>\n\n<ol><li>Is the provided justification <em>evidence</em>, <em>data</em>, or an expression of\na <em>feeling</em>?  What is the speaker\u2019s experience of the thing being\ndiscussed?  If it\u2019s evidence, is it reproducible?  If it\u2019s data, is\nit relevant?</li>\n<li>How do I feel about the subject?  How did I feel about it\nyesterday?  What are my justifications?</li>\n<li>Am I tempted to dismiss this?  Is it because of bad evidence,\na speaker who holds low status in my tribe,\nor because I disagree with the feeling?  If it\u2019s a lack of evidence,\nwhat evidence <em>would</em> make me feel the same way?  If it\u2019s a feeling I\ndon\u2019t share, what other things <em>do</em> I feel that way about?  If it\u2019s a\nlow-status speaker, how would I feel if <code>&lt;person I respect&gt;</code>\nwas saying it?</li>\n<li>Am I tempted to accept this?  Is it because it agrees with something\nI already think?  What new information does it actually contain?</li>\n</ol><p>This is part of the reason why I try to criticise Node.js\nand npm as harshly and often and publicly as I can.  I do think that\nthey\u2019re tremendously useful tools\u2026 but how can you believe me if I\ntell you that they\u2019re perfect, when I clearly know better?  And if you\ncan\u2019t believe me when I talk about Node.js, then what good am I?</p>\n\n<h3>Better justifications to use Node.js</h3>\n\n<ol><li>The IO paradigm is a good fit for your problem, and V8 is fast enough.\nThis is the case for a lot of web software, but definitely\nnot every program.  Node.js really does make\nit pretty easy to write things like IRC bots and crawlers and\nwebsites, and is probably not ideal for many compute-intensive\napplications.</li>\n<li>It\u2019s fun to write programs in this fashion.  There are time-honored\ntraditions of thinking of data as streams of bytes, and JavaScript is\na relatively simple and expressive language for doing this in\ncreative ways.</li>\n<li>It\u2019s fun to be a part of making a popular platform better.  The\ncommunity is active and still pretty friendly, and that feels good to\nbe a part of.  Newcomers turn into regulars and then celebrities very\nswiftly.  All it takes is a bit of persistence and enthusiasm.</li>\n<li>You prefer the simpler approach to asynchronous programming, using a\ncallback/observer model (or actor model for child processes), rather\nthan something like green threads or coroutines that \u201clook\u201d synchronous.</li>\n</ol><p>If you\u2019re not writing systems that are well served by nonblocking IO, or\nan event loop/observer pattern approach, or if you don\u2019t think it\u2019s fun\nto make programs this way, then you probably shouldn\u2019t use it.</p>\n\n<p>But, even that aversion is worth looking carefully at that, no matter what\nyou decide.  V8 is an extremely fast virtual machine, and\nthese days, a <em>lot</em> of programs are IO-bound.</p>\n\n<p>And even if it\u2019s not, we tend to focus on \u201cthe right tool for the job\u201d,\nat the exclusion of \u201can awesome tool for the job\u201d.  The opposite of\n\u201cright\u201d is \u201cwrong\u201d, but the opposite of \u201cawesome\u201d is \u201cboring\u201d, which is\nsometimes worse, especially if you\u2019re trying to maximize creativity.</p>\n\n<p>I\u2019m not sure how much research Brian did when he went out looking for\njustifications for using Node.js, but I don\u2019t think he really got at\nwhat actually is driving so many people interested in this thing.</p>\n\n<h2>Controversy</h2>\n\n<p>So far, I felt like the setup was nice, but the criticism itself was\nkind of lackluster.  We\u2019ve heard it before.  Node is hyped.  The\nsingle-language stack isn\u2019t all it\u2019s cracked up to be.  Etc.  I was\neager for the meat.</p>\n\n<p>No sooner had I thought this, than the next slide said:</p>\n\n<h3>Node.js rejects reality</h3>\n\n<p>Aha!  There it is.  That primal \u201cunder attack\u201d feeling, the visceral\ntension in my lower abdomen, the warmth on my face.</p>\n\n<p>When I was younger (and still today when I\u2019m not at my best, I must\nadmit) the temptation was to hit back, or dismiss the message.  Fight or\nflight.  I think Brian probably\nlost a bunch of the audience with this slide.  It sure did get my attention.</p>\n\n<p>These days, when I feel that reaction, I try to leverage the added\nawareness that comes with the adrenaline, to be on the lookout for\nwhatever comes next, because it is full of valuable information,\nespecially if it is highly disagreeable.  Beware of the moments\nwhen rationality tries to slip away: those are the times you most need\nit.</p>\n\n<p>As I am somewhat dogmatic about endeavoring to\nreject reality less, I was very excited to hear what we might be\nmissing.</p>\n\n<p>Sadly, the justification for the \u201cignores reality\u201d claim was not as\npointed as I would have liked.  It amounted to:</p>\n\n<ol><li>JavaScript is a garbage collected language.  Garbage collection\npretends that you have infinite memory, and you don\u2019t.</li>\n<li>IO always \u201cactually\u201d blocks somewhere, so the comparison between\nevents and blocking is not valid, since it has to block somewhere.</li>\n</ol><p>For sure, garbage collection is tricky, and the interaction between\nNode.js and the V8 garbage collector could probably be improved.  But to\ncall it a lie is a bit silly.  Garbage collection doesn\u2019t pretend that\nyou have infinite memory; that\u2019s virtual memory.  Garbage collection\npretends that you don\u2019t have to <code>free</code> memory in order for it to be\nre-used.</p>\n\n<p>One of the biggest pain\npoints of non-managed languages is having to explicitly free memory.\nThe biggest pain point in managed languages is having to deal with a\ngarbage collector.  There may be some sort of approach to memory\nmanagement that isn\u2019t collected or manual, but better than either.  If\nso, I don\u2019t know of it, and it doesn\u2019t matter anyway, because <strong>that is\na language design problem, and Node.js is not about designing a\nlanguage</strong>.  If you have a beef with garbage collection, take it up with\nV8 and TC-39.</p>\n\n<p>As for node being single-threaded, and IO always blocking, that\u2019s kind\nof confusing to me.  Of course, you don\u2019t\nactually have application-level <em>processing</em> of IO in parallel,\nsince there\u2019s only a single <em>JavaScript</em> thread, but IO definitely is\nperformed in parallel to the degree that the machine can provide,\nand \u201cnonblocking\u201d is the technical term for the\ntype of IO that node does on sockets.  (Nonblocking IO on files is\nsimulated using threads.)</p>\n\n<p>I\u2019d really like more details about what exactly Brian\nwas referring to on this point about IO \u201calways blocking somewhere\u201d and\nin what way Node.js rejects that reality.</p>\n\n<h3>entire ecosystem of tools and libraries must be built</h3>\n\n<p>This was a valid concern in 2010.  I said at the time that it\nwould not be an issue in a few years.  It\u2019s not an issue today.</p>\n\n<p>To an extent, this was by design.  A large part of\nRyan\u2019s reason for choosing\nJavaScript was that it is the only popular interpreted language with a\nsuitably powerful VM and no existing IO paradigm.  Additionally,\nto the extent that JavaScript <em>does</em> have a tradition of IO, it\u2019s\nXHR and the DOM, which are event-based and asynchronous.</p>\n\n<p>Since the birth of Node.js, a lot of libraries have been built.  There\nare 8500 modules on\nnpm.  There are bindings to every popular database, sophisticated test\nframeworks, template libraries, HTTP routers, and so on.  It\u2019s easy and\nfun to write modules, and so people have written modules.  This approach\nis remarkably valuable.</p>\n\n<p>That being said, module discovery and visibility leaves a lot to be\ndesired.  npm has grown much faster than Rubyforge or PyPI, much earlier\nin the life of Node, and so we have hit these problems earlier.</p>\n\n<p>Regarding tools, things are coming along quite nicely.</p>\n\n<p>Post-mortem debugging with MDB\njust landed in the master branch, and will be in node 0.7.8.  (Node v0.6\nhas had this for a while already.)  Mad props to Dave Pacheco for that.\nSeriously, if you\u2019ve never seen it in action, it\u2019s amazing.  In all my\nyears using PHP, I can\u2019t even count the number of times I\u2019d desparately\nwanted this sort of thing.  The zend IDE had some pretty good debugging\ncapabilities, but Dap\u2019s jsstack stuff is truly magical.  Call me a\nfanboi, I don\u2019t care: believe the hype.  It\u2019s fantastic.\nThe only sad\npoint is that it\u2019s only available in SmartOS, but it\u2019s not exactly\nsurprising that the OS made by Joyent has some special love for Node.js\n;)</p>\n\n<p>The DTrace support in Node is also impressive.  Again, not\nsurprising, given the fact that so many DTrace heavyweights work at\nJoyent, but the go-to DTrace library for node is not written by a Joyent\nemployee.  It\u2019s Chris Andrews\u2019\n<a href=\"https://github.com/chrisa/node-dtrace-provider\">node-dtrace-provider</a>\nmodule.  Anarchy &gt; curation, yet again.</p>\n\n<p>The depth and breadth of information that can be provided by\nDTrace, and the great work by Brendan Gregg and others at Joyent to\nactually massage that data into a format that humans can easily consume,\nis absolutely phenomenal.</p>\n\n<p>Similar work on run-time analytics and post-mortem debugging is underway\nat Microsoft, I\u2019m told.  Windows users: stay tuned.</p>\n\n<p>As a long-time text-editor-and-shell guy\n(moved from TextMate to vim a while ago), I don\u2019t really\nfollow the IDE stuff too closely.  But, Microsoft,\nCloud9, and many others are iterating furiously in this space.\nMany of them are leveraging their existing work on other JavaScript\ntooling, so it\u2019s moving quite fast.</p>\n\n<p>The built-in node debugger client is more my style, but node-inspector\nhooks into the Chrome debug tools, which imo blow away most visual\ndebuggers available.  (They even have heap analysis tools!)  There are\nalso plugins for Eclipse to provide stepwise debugging and analysis, and\na lot of existing Eclipse users are more at home there.</p>\n\n<p>So, it\u2019s not so much that the ecosystem of tools \u201cmust\nbe built\u201d, as much as that it is being built, and leverages the existing\nJavaScript, V8, and system tools that already existed before Node showed\nup.  In many ways, Node.js provides one of the first server-side systems\nthat can fully take advantage of these things in a mostly cross-platform\nfashion.</p>\n\n<h3>Node.js will reproduce the last 15 years of ruby mistakes</h3>\n\n<p>Bold claim.  One that I was excited to see ample justification for.  What\nare the last 15 years of Ruby mistakes?\nHow can we avoid making those\nsame mistakes?  How did ruby fix them?  What can we learn from ruby\u2019s\nexperience?</p>\n\n<p>Brian\u2019s main justification of this point was that the\ncluster module is a repeat of Phusion Passenger.</p>\n\n<p>It\u2019s not entirely\nclear whether he was referring to TJ\u2019s \u201ccluster\u201d package, or the\nbuilt-in \u201ccluster\u201d module in v0.6, or the much improved \u201ccluster\u201d\nmodule in node v0.7.  None of them are a particularly close reproduction\nof passenger, though I suppose that TJ\u2019s is probably the closest.  But\nit\u2019s not as if any of these are an Apache plugin, or tied to a specific\nweb framework.  The analogy is a stretch, to say the least.</p>\n\n<p>What\u2019s even less clear is how Phusion Passenger, a program written in\n2009, and widely recognized as the most effective and popular way to\ndeploy the most effective and popular Ruby application framework, can\npossibly represent a \u201cmistake\u201d, let alone 15 years of mistakes.</p>\n\n<p>I can only conclude that I do not understand what he was trying to say,\nbecause otherwise, I cannot make sense of it.\nMaybe there was something else called \u201cpassenger\u201d in the Ruby world once\nupon a time, which did kernel load balancing, IPC, and not much else.\nPerhaps this \u201cpassenger\u201d was deemed a mistake, and is now gone.</p>\n\n<p>Show me a ruby mistake we\u2019re reproducing, and I\u2019ll make sure it gets\nfixed.</p>\n\n<h3>process concurrency is doomed</h3>\n\n<p>Brian declared that process concurrency will never be able to scale\nadequately.  I cannot accept this without data.  Instead of data, he\ngave some hand-wavey assertions about garbage collection getting out of\ncontrol.</p>\n\n<p>I\u2019ll assume that he was running low on time, and perhaps had to cut out\nthe histograms and demonstrations.  So let\u2019s leave that question open.</p>\n\n<p>Of course, spawning one process per request, or one process per IO\nor timer, is completely unreasonable.\nThat\u2019s why CGI was not adequate, and no one runs a real web platform\non bash.  However, running a single process\nper core, and having multiple HTTP servers share the open socket,\nand then using an event loop for IO and timers, is remarkably effective.</p>\n\n<p>If there is doom on the horizon, don\u2019t hint about it.  Show me the\nevidence.</p>\n\n<h3>symmetric errors, chain of evidence</h3>\n\n<p>Finally!  Something that <em>genuinely sucks a <strong>lot</strong> in Node.js!</em></p>\n\n<p>Domains is on the list for v0.8.  I don\u2019t know that the first pass at\ndomains will be the final and ultimate fix for this, but it\u2019ll be\nsomething to iterate on.  This will make errors much more symmetric, and\nprovide a much clearer chain of evidence.</p>\n\n<p>The chain of evidence is also much improved by having post-mortem\ndebugging of production systems.  If you haven\u2019t yet, check out Bryan\nCantrill\u2019s talk <a href=\"http://www.infoq.com/presentations/Debugging-Production-Systems\">And It All Went Horribly\nWrong</a>.</p>\n\n<p>So, this is important to me, it\u2019s important to Node.js users, it\u2019s\nimportant to the various companies paying the salaries of the node core\nteam.  It\u2019s reasonable to trust it\u2019s high priority.</p>\n\n<h2>Problems I Wish He\u2019d Mentioned</h2>\n\n<p>If you want to know what\u2019s wrong with node, ask a node-core developer.</p>\n\n<p>These are some of the things that are really problematic, some of them\nin a pretty deep way.  Of course, these are the things I know about,\nso they\u2019re things that we\u2019re working on for future releases of Node.js.\nIf there are things that you think belong on this list, let us know.</p>\n\n<p>Some of them are very hard,\nand will require iteration.  Some of them are pretty straightforward,\nand will be addressed soon.  Some of them are not super difficult, but\njust lower priority, and won\u2019t get addressed for a while.</p>\n\n<ol><li>Debugging.\nSee above.  It\u2019s our top issue, and it\u2019s coming along.  It was\nmentioned, but less strongly than I would have liked to see.</li>\n<li>It is very hard to get visibility into which pending actions are\nkeeping the event loop running.  This is a source of subtle errors.\nThe libuv refcount behavior is in the process of being cleaned up,\nand v0.8 will include a mechanism for seeing exactly which handles\nare in an open state.</li>\n<li>The Stream API, which is by all accounts the core use-case for node,\nis remarkably inconsistent and hard to extend.  It\u2019s a lot nicer in\nv0.4 and v0.6 than it was in v0.2 and before, but it\u2019s got a ways to\ngo yet.  We paper over a lot of the inconsistency in the\nStream.pipe() method, but it\u2019s a source of many subtle issues.  Node\nv0.9 will focus primarily on this issue.</li>\n<li>It\u2019s hard to find good node modules.  Reducing the barrier to entry\nfor node package creation has made it a lot easier for more people to\ntake advantage of.  However, when you solve a problem, you open the\ndoor for new ones that were hiding behind it.  We\u2019ve grown faster\nthan most platforms, which means that we\u2019re encountering the\ndiscovery issues sooner.  This will be addressed in the coming months\nwith a new npmjs.org website.</li>\n<li>The Node.js project lacks a consistent and visible continuous\nintegration system, so performance degradations can occur silently.</li>\n<li>Using binary modules is overly difficult, and requires a build\ntoolchain on the install target.  Work is underway to improve this,\nbut it\u2019s tricky.</li>\n</ol><p>And of course, just the fact that Node.js is very young, and has some\nbugs.  It\u2019ll no doubt get more, as we continue to work on it, but the\ngoal is to change things in ways that make these bugs easier to spot and\neasier to fix.</p>\n\n<p>It is not sufficient for Node.js to be better than any other platform.\nIt must be so good that it permanently raises expectations in this\nspace.  It must continue to impress and delight users.  There is so much\nwork yet to do, it\u2019s mind boggling.</p>\n\n<p>Laurels are not very comfortable to rest on.</p>\n\n<h2>And finally\u2026</h2>\n\n<p>If you\u2019ve gotten this far, congratulations.  I try to keep blog posts\nmuch shorter than this, but there was a lot to respond to here, and\ntouched on several issues that are very close to my interests.</p>\n\n<p>Brian\u2019s talk was fascinating.  Even the mistakes were\ninteresting.  When the video comes out, I highly recommend watching it.\nGo get <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637/\">Thinking, Fast and\nSlow</a>.\nI haven\u2019t read it, but I\u2019m familiar with some of\nKahneman\u2019s other work in behavioral economics, and I suspect it\u2019s\nevery bit as fantastic as Brian claims.</p>\n\n<p>I got a chance to talk to Brian after the talk, and so hopefully a lot\nof these points (at least, the specific technical details of what sucks\nin Node.js and what we\u2019re doing about it) doesn\u2019t come as a surprise to\nhim.  He seems like a genuinely nice and thoughtful person.</p>\n\n<p>For a talk that started off with a request that we use science and\nmake conflict useful, I was disappointed that his criticisms of Node\nwere lacking in scientific rigor or constructive calls to action.  But\nas I mentioned earlier, it\u2019s hard to fit it all into a 30 minute talk.\nI hope this conversation will not end here.</p>\n\n<p>We\u2019re all humans.  We all think wrong.  We all love, and worry, and try\nto do interesting things.  We all fail, and feel shitty, and try\nto explain why we\u2019re not a bad person for it.  We\nall succeed, and want to brag about it.  We tell ourselves stories, and\nsometimes those stories are true, but usually they\u2019re only just true enough\nto get by.</p>\n\n<p>Try to remember this, the next time you\u2019re telling someone how awesome\n(or over-hyped)\nNode.js is, or any other thing you have feelings about,\nand they suggest that you may be a brainwashed idiot.  They are\njust trying to protect something, as are you, and in the course of this\nprotection, our instincts will cause us to fail.</p>\n\n<p>Show that monkey brain who\u2019s boss!\nSlow down, breathe, and try to remember that this person\nwho disagrees with you is not some big dumb idiot, but most likely a very\nthoughtful person who\u2019s trying to do their best to create truth and beauty\nin the world.  If you don\u2019t learn what motivates them, how can you ever\njoin forces?</p>\n\n<div class=\"small\">Many thanks to Mikeal Rogers, Bryan Cantrill, Marco Rogers for reading early drafts of this post and providing feedback.</div></p>",
        "tree_html": ""
    },
    "reblog_key": "H9PddsK1",
    "recommended_color": null,
    "recommended_source": null,
    "short_url": "https://tmblr.co/Z7nwWyJMzNEO",
    "slug": "re-brixens-is-node-better",
    "state": "published",
    "summary": "Re: @brixen\u2019s \"Is Node Better\"",
    "tags": [],
    "timestamp": 1333992420,
    "title": "Re: @brixen\u2019s \"Is Node Better\"",
    "trail": [
        {
            "blog": {
                "active": true,
                "can_be_followed": true,
                "name": "izs",
                "share_following": false,
                "share_likes": false,
                "theme": {
                    "avatar_shape": "square",
                    "background_color": "#444444",
                    "body_font": "Helvetica Neue",
                    "header_bounds": "978,2448,2355,0",
                    "header_focus_height": 1152,
                    "header_focus_width": 2048,
                    "header_full_height": 3264,
                    "header_full_width": 2448,
                    "header_image": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o.jpg",
                    "header_image_focused": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/mA1nbvglg/tumblr_static_tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_focused_v3.jpg",
                    "header_image_scaled": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_2048_v2.jpg",
                    "header_stretch": true,
                    "link_color": "#FB4C16",
                    "show_avatar": true,
                    "show_description": true,
                    "show_header_image": true,
                    "show_title": true,
                    "title_color": "#fb4c16",
                    "title_font": "Gibson",
                    "title_font_weight": "regular"
                }
            },
            "content": "<p><p><strong>Update</strong>: The talk is online at <a href=\"http://blip.tv/jsconf/jsconf2012-brian-ford-6091521\">http://blip.tv/jsconf/jsconf2012-brian-ford-6091521</a>.  If you weren&rsquo;t there, you should go watch it before reading this.</p>\n\n<hr /><p>As usual, this year&rsquo;s JSConf did not fail to deliver.  The parties, the\nlocation, the talks, the food, it was incredible.  Chris Williams (and\nthe rest of the JSConf family) really put together an incredible event.</p>\n\n<p>By far, the most controversial talk was <a href=\"http://brixen.io/\">Brian\nFord&rsquo;s</a> &ldquo;Is Node.js\nBetter&rdquo;.  I must admit, I walked in skeptical.  Brian Ford seems like a\nbright and reasonable guy, but is clearly not a noder.</p>\n\n<p>I&rsquo;m not going to transcribe what he said.  If you want that, read <a href=\"http://speakerdeck.com/u/brixen/p/is-nodejs-better\">his\nslides</a> and watch\nthe video when it comes out.  This is my reaction and response, and says\nmore about me than it does about Brian.</p>\n\n<p>This is based mostly on my meat-brain memory, and some notes that\nI scribbled.  It&rsquo;s quite\npossible that I may get some of the particulars wrong.  However, rather\nthan wait for the video to come out, I&rsquo;d like to write this now, since\nthe errors in perception are themselves useful information.  If you\nnotice any such error, please let me know.</p>\n\n<p>Of course, there are limits to how deep a speaker can go into a topic in\na 30 minute talk, and those limits are much shallower than how deep I\ncan go in this blog post.  So, I&rsquo;d like to frame this response not so\nmuch as me-vs-Brian, but rather as just another public part of a longer\nmulti-format conversation.  My goal is not to produce more controversy\nthan is useful, but to perhaps produce enough to keep things interesting.</p>\n\n<p>Fair warning, this is a much longer post than most things I write.  If\nyou&rsquo;re reading it, you&rsquo;re probably interested mostly in the specific\nnode stuff at the end.  I&rsquo;ve opted not to shorten it too drastically, because\nthe topics are in my opinion best served by a thorough exploration.</p>\n\n<h2>[citation needed]</h2>\n\n<p>A lot of what I&rsquo;m talking about is discussed in much more rigor\nelsewhere.  This blog post is a synthesis, not a research paper.  In\naddition to <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637\">Thinking Fast and\nSlow</a>\nwhich Brian mentioned, these are about the most\napproachable and informative discussions of the subjects that I&rsquo;ve\nfound:</p>\n\n<ul><li><a href=\"http://www.amazon.com/Influence-Science-Practice-ePub-ebook/dp/B001CDZYVE\">Influence</a></li>\n<li><a href=\"http://www.amazon.com/Predictably-Irrational-Revised-Expanded-ebook/dp/B002C949KE\">Predictably\nIrrational</a></li>\n<li><a href=\"http://lesswrong.com/lw/xy/the_fun_theory_sequence/\">Less Wrong: Fun Theory</a></li>\n<li><a href=\"http://wiki.lesswrong.com/wiki/How_To_Actually_Change_Your_Mind\">Less Wrong: How to Actually Change Your\nMind</a></li>\n</ul><h2>The Right</h2>\n\n<p>Brian started his talk with a very insightful exploration of the nature\nof controversy.  He talked about our fast brain and slow brain, and\nguaranteed that reading <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637\">Thinking Fast and\nSlow</a>\nwould change your life for the better, or he&rsquo;d refund the cost of the book.</p>\n\n<p>In discussing the title of the talk, he made the point that every value\njudgement implies a comparison, and invites controversy.  If presented\nwith a choice of apples and oranges, and you remark that &ldquo;oranges are\nhealthy&rdquo;, then the implication is that apples are not (or at least\n<em>less</em>) healthy.  So, the question &ldquo;Is Node.js Better&rdquo; raises the\nquestion, &ldquo;Better than what?&rdquo;</p>\n\n<h3>Storming Brains</h3>\n\n<p>He went on to stress the importance of the scientific method, especially\nin cases where groupthink can grab ahold of a popular intuition.  A\npowerful example of this is the idea of brainstorming, which has come\nunder\n<a href=\"https://en.wikipedia.org/wiki/Brain-storming#Criticism\">criticism</a> in\nrecent studies.</p>\n\n<p>Of course, another fascinating point worth mentioning (which was not covered\nin Brian&rsquo;s talk) is that the primary\nsource of the criticism is a survey of the results of 22 different\nstudies with different methodologies, done in different environments,\non different subjects.</p>\n\n<p>I&rsquo;m wondering what the differences are between the 4 where brainstorming\nworked, and the 18 where it didn&rsquo;t.  It&rsquo;s especially worth noting that\n18 instances of brainstorming&rsquo;s failure vs 4 instances where it was\nsuccessful, does not imply that brainstorming is &ldquo;usually&rdquo; less\neffective: only that it&rsquo;s usually less effective in the studies\nsurveyed.  If you check the weather in Wisconsin 18 times in the summer,\nand 4 times in the winter, you might conclude it&rsquo;s usually tropical.</p>\n\n<p>This survey was reported several\ntimes in the Journal of Personality and Social Psychology.  More\nrecently, these journal articles were summarized in the New Yorker and\nother popular magazines.  To me, this smacks of &ldquo;turns out&rdquo;-ism.  It\n<em>might</em> be that the popular intuition about brainstorming is wrong.  It\nmight also be that it&rsquo;s just incomplete.</p>\n\n<h3>Organization</h3>\n\n<p>Brian discussed the concept that organizations tend to perpetuate the\nproblems that they were designed to solve.  To my mind, this implies\nthat we ought not to try to solve our problems with organizations, but\nrather, to solve them with chaos and disruption instead, wherever possible.\nSince it is often not possible, and because &ldquo;disruption&rdquo; becomes just\nanother buzzword meaning a specific sort of organization, we should make\nit our goal not to &ldquo;solve problems&rdquo;, but rather to find the problems\nthat are hidden by our current assumptions.</p>\n\n<p>&ldquo;Solving&rdquo; a problem, then,\nbecomes more an exploration than a &ldquo;fix this thing&rdquo; exercise.  An\nexploratory expedition stops exploring when it returns with an answer.\nSimilarly, organizations that are designed to solve a specific problem\n(as opposed to organizations that are designed to, say, throw parties or\nmake buttons)\nshould have their own destruction built into their core constitution.</p>\n\n<p>This principle of minimum institution has guided the choices we&rsquo;ve made\nin npm and in Node.js, technologically as well as socially.\nIt has shaped the community in subtle ways that\nare difficult to recognize from the outside.  It&rsquo;s a principle that is\nclose to my heart, and it&rsquo;s why Node and I have gotten along so well.</p>\n\n<h3>Behavioral Science</h3>\n\n<p>&ldquo;Programming is a behavioral science.&rdquo;  Couldn&rsquo;t agree more.  However,\nthe transition from &ldquo;behavioral science&rdquo; to concurrency as a way to deal\nwith scarcity of compute resources felt a bit forced to me.  From that\npoint of view, everything is behavioral science, because everything we\ndo is done out of some human need (or else we wouldn&rsquo;t do it.)</p>\n\n<p>I think it&rsquo;s more precise to say that software development is behavioral\nscience, because every interface is a human interface, and humans are\neven more unreasonable in their behavior than hard disk platters.</p>\n\n<h2>The Wrong</h2>\n\n<p>There were a few points where I believe that Brian simply was either\nincorrect, misinformed, or perpetuating and reacting to\nthe very groupthink that he is ostensibly setting out to move past.</p>\n\n<h3>Justifications for Using Node.js</h3>\n\n<p>There were a few justifications for using Node that Brian listed:</p>\n\n<ul><li>same language on the client and server</li>\n<li>there are many JavaScript programmers</li>\n<li>Node.js is more fun</li>\n</ul><p>These are all interesting justifications, though really, the\nfirst two are rationalizations for the third.  For a talk that started\nout by diving into the science of hedonics and decision theory (albeit\na somewhat Gladwell-esque popularization of it), I was a bit disappointed to\nsee that he didn&rsquo;t go into more depth on this point.</p>\n\n<p>He said that users call themselves polyglots, so he rejects the claim\nthat a single language is actually relevant.  This is a highly specious\nrebuttal.  I can stand, but I still often find it pleasant to sit.  It\ndoesn&rsquo;t have to be <em>necessary</em> in order to be valid\nin this case, it only needs to be <em>comfortable</em>.  If you&rsquo;ve never\nworked in a single-language stack, I highly recommend it.  Even though\nyou can&rsquo;t share a lot of code in most situations, it does reduce the\ncognitive load switching between different parts of the application.\nThis is the same reason that I&rsquo;ve suggested using semicolons in\nJavaScript programs that include other non-ASI languages: reducing\nswitching cost is reducing cost.</p>\n\n<p>Brian claimed that the &ldquo;many JavaScript programmers&rdquo; argument is\ninvalid, or at least, not very compelling. We ought to figure out the\nideal platform, he said, and then provide advocacy, education, and\nresources to help people adopt it.  This also strikes me as a bit weird.\nI&rsquo;m not claiming that one should make all their technical\ndecisions based solely on popularity, of course, but it certainly is not\n<em>irrelevant</em>.  There&rsquo;s something to be said for pragmatism.</p>\n\n<p>People don&rsquo;t use Node.js because it&rsquo;s the same language on the client\nand server.  They use Node.js because that language is <strong>JavaScript</strong>,\nand JavaScript is fun.</p>\n\n<p>There aren&rsquo;t more JavaScript programmers because of a lack of education\nor advocacy in other languages.  JavaScript is fun (and unavoidable),\nand so all programmers use it.</p>\n\n<p>&ldquo;Node.js is more fun.&rdquo;  This reminds Brian of Ruby a few years ago.\nIt&rsquo;s important to remember, in the context of hedonics especially, that\n&ldquo;fun&rdquo; is a highly subtle term worthy of study on its own.</p>\n\n<p>The problem with &ldquo;Justifications for doing X&rdquo; is that we do things\n<em>primarily</em> because of our emotions.  Even the action of &ldquo;being rational&rdquo;\nis a thing that we choose to do because of a positive feeling attached\nto our self-image as a &ldquo;rational person who does smart things&rdquo;, and the\nassumption that we&rsquo;ll get some pleasantly winful reward that feels good.\nWhen we really want to do something irrational, we usually have no problem\nreconciling the conflict with our preferred self-image as a rational\nindividual.</p>\n\n<p>Emotions are not just <em>part</em> of motivation, they <em>are</em> motivation.  If you\nwant to know why a person does something, don&rsquo;t ask them to explain why\nthey do it; try instead to figure out how they feel.  It&rsquo;s a much more\nchallenging question, but it leads to much more interesting information.</p>\n\n<h3>About the word &ldquo;hype&rdquo;</h3>\n\n<p>When we have a good feeling about something (or even,\nwhen we just make any choice at all, and don&rsquo;t quite understand why),\nour brain begins inventing rationalizations right away.  The\nfirst one to pattern-match against &ldquo;X because Y&rdquo; is likely\naccepted as the &ldquo;reason&rdquo; we&rsquo;re doing something, regardless of how much\nthe truth of &ldquo;Y&rdquo; actually affects the likelihood of &ldquo;X&rdquo;.</p>\n\n<p>Try asking a compulsive gambler why he goes to the casino.  He might\ntell you about his &ldquo;strategy&rdquo; for roulette.  Of course, this is\nbullshit.  Roulette is a deterministically losing game; the more you\nplay, the more you lose.  Same with craps, slots, and\n(unless you&rsquo;re the best at the table) poker.  It&rsquo;s the\n<strong>feeling</strong> of winning that he&rsquo;s chasing, and the <strong>feeling</strong> of the\nchase.  If he was truly motivated by the desire for money,\nthere are obviously much better ways of getting it.</p>\n\n<p>When a person shares their justifications for doing something,\none of two things typically happens, in the &ldquo;fast-brain&rdquo;:</p>\n\n<ol><li>You feel the same way about the thing.  The justification\npattern-matches against &ldquo;I should X-that-I-do because Y&rdquo;, and so\nyou accept the justification as rational, wise, and well-informed.\nAfter all, you already do it, so you must agree.</li>\n<li>You feel differently about the thing.  Or, at least, it&rsquo;s not a thing\nyou do, and so you have invented some justifications for not doing\nit.  Your brain pattern-matches against &ldquo;I should\nX-that-is-stupid because of Y&rdquo;, and so you reject the justification\nas irrational, foolish, and ignorant.  After all, it&rsquo;s stupid, so any\njustification must be misguided.</li>\n</ol><p>If you have some vegan friends, and some friends on the paleo diet, and\nfeel like watching some fireworks, ask them in each others company why\nthey eat the way that they do.  No matter how polite they try to be,\neach will <em>subconsiously</em> perceive the statements of the other as an\nattack, and feel the need to defend their position.  If they are wise\nenough to retreat from needing to <em>convince</em> the other, they&rsquo;ll most\nlikely at least make a big show about &ldquo;agreeing to disagree&rdquo;.\n(Of course, if they&rsquo;ve been on this diet for a while, they may have\nenough practice at these sorts of situations to handle them quite\ngracefully.)</p>\n\n<p>If X is not just &ldquo;do this action&rdquo;, but rather &ldquo;feel this way&rdquo;, and you\ndo not already feel that way, and the justification is not enough to\nincite this feeling (as justifications almost never are),\nthen we label it &ldquo;hype&rdquo;, and it <em>raises</em> the bar\nthat we now require to take the thing seriously next time.</p>\n\n<p>Like so many cognitive\nshortcuts, this is a really good move much of the time.  After all,\npeople&rsquo;s justifications are usually self-delusions as often as\nwell-informed and rational reasons for doing or thinking anything.  It\nmakes perfect sense to be extra skeptical when we are at the risk of\nbeing influenced by it.  If we have to be extra skeptical over and over\nagain, we start to pattern match &ldquo;X is good&rdquo; into the hype category.\nSuddenly, it&rsquo;s not just that veganism or paleo is not for me, it&rsquo;s that\nthe diet is a mark of a foolish <em>person</em>.</p>\n\n<p><strong>The net result is that anyone saying anything positive is likely to be\nlabelled a &ldquo;fanboi&rdquo;, and their statement called &ldquo;hype&rdquo;, no matter what\nthey say.</strong>  This is a dangerous feedback loop that leads technology\ncommunities to stagnation, bitterness, and chest-beating.</p>\n\n<h3>Yo Dawg! I heard you like cognitive distortions, so I distorted your cognition so you can distort while you cognit!</h3>\n\n<p>The mind is such a wonderful thing!  Mistakes in the mistake\ndetection lead to potentially valid statements being\ndiscounted because they are presented <em>along with</em> invalid justifications,\nor presented <em>by</em> a low-status speaker, or are <em>in conflict with</em>\nalready-held beliefs, <em>especially</em> when those already-held beliefs are a\npart of our Tribal Story.</p>\n\n<p>Even worse, you have situations where we see a few &ldquo;X is good because Y&rdquo;\njustifications, deem them false, and then subconsciously\ninternalize the fact that we\ngain status in our tribe by applying the &ldquo;hype&rdquo; label and\ndiscounting it, resulting in spiraling down into the toilet.\nPoliticians and marketers have made a science of getting us to elevate\narbitrary ideas into this Tribal Story, blinding us to any disagreement.</p>\n\n<p>Birds fly.  Fish swim.  Humans make mistakes.  It is our Super Power.\nWe all do this.</p>\n\n<p>We almost never change our minds.  We are influenced in ways we are\nincapable of detecting (and will deny!)  We are motivated by the behavior\nof people who look like us superficially, and believe (at least temporarily)\nliterally everything we hear.</p>\n\n<p>There is virtually no limit to the ability\nof the human mind to find new and creative ways to get out of touch with\nreality.  I don&rsquo;t want to give the impression that I (or anyone) could\ndelineate all the many subtleties of human cognitive error.  Every one\nis so rich and complicated.  Even this discussion of\npattern-matching &ldquo;X-because-Y&rdquo; is a serious oversimplification.</p>\n\n<p>In the ancestral environment of adaptation, disagreement was often\nfatal.  We&rsquo;ve gotten a bit better at intelligent disagreement, but we\nstill try unconsciously to come to an all-or-nothing agreement within\nour own heads, annihilating any &ldquo;bad&rdquo; idea entirely, and shrowding any\n&ldquo;good&rdquo; idea in a halo.</p>\n\n<p>Whenever tempted to call something &ldquo;hype&rdquo; (or, even, &ldquo;anti-hype&rdquo;),\nI try to remember to ask the following questions:</p>\n\n<ol><li>Is the provided justification <em>evidence</em>, <em>data</em>, or an expression of\na <em>feeling</em>?  What is the speaker&rsquo;s experience of the thing being\ndiscussed?  If it&rsquo;s evidence, is it reproducible?  If it&rsquo;s data, is\nit relevant?</li>\n<li>How do I feel about the subject?  How did I feel about it\nyesterday?  What are my justifications?</li>\n<li>Am I tempted to dismiss this?  Is it because of bad evidence,\na speaker who holds low status in my tribe,\nor because I disagree with the feeling?  If it&rsquo;s a lack of evidence,\nwhat evidence <em>would</em> make me feel the same way?  If it&rsquo;s a feeling I\ndon&rsquo;t share, what other things <em>do</em> I feel that way about?  If it&rsquo;s a\nlow-status speaker, how would I feel if <code>&lt;person I respect&gt;</code>\nwas saying it?</li>\n<li>Am I tempted to accept this?  Is it because it agrees with something\nI already think?  What new information does it actually contain?</li>\n</ol><p>This is part of the reason why I try to criticise Node.js\nand npm as harshly and often and publicly as I can.  I do think that\nthey&rsquo;re tremendously useful tools&hellip; but how can you believe me if I\ntell you that they&rsquo;re perfect, when I clearly know better?  And if you\ncan&rsquo;t believe me when I talk about Node.js, then what good am I?</p>\n\n<h3>Better justifications to use Node.js</h3>\n\n<ol><li>The IO paradigm is a good fit for your problem, and V8 is fast enough.\nThis is the case for a lot of web software, but definitely\nnot every program.  Node.js really does make\nit pretty easy to write things like IRC bots and crawlers and\nwebsites, and is probably not ideal for many compute-intensive\napplications.</li>\n<li>It&rsquo;s fun to write programs in this fashion.  There are time-honored\ntraditions of thinking of data as streams of bytes, and JavaScript is\na relatively simple and expressive language for doing this in\ncreative ways.</li>\n<li>It&rsquo;s fun to be a part of making a popular platform better.  The\ncommunity is active and still pretty friendly, and that feels good to\nbe a part of.  Newcomers turn into regulars and then celebrities very\nswiftly.  All it takes is a bit of persistence and enthusiasm.</li>\n<li>You prefer the simpler approach to asynchronous programming, using a\ncallback/observer model (or actor model for child processes), rather\nthan something like green threads or coroutines that &ldquo;look&rdquo; synchronous.</li>\n</ol><p>If you&rsquo;re not writing systems that are well served by nonblocking IO, or\nan event loop/observer pattern approach, or if you don&rsquo;t think it&rsquo;s fun\nto make programs this way, then you probably shouldn&rsquo;t use it.</p>\n\n<p>But, even that aversion is worth looking carefully at that, no matter what\nyou decide.  V8 is an extremely fast virtual machine, and\nthese days, a <em>lot</em> of programs are IO-bound.</p>\n\n<p>And even if it&rsquo;s not, we tend to focus on &ldquo;the right tool for the job&rdquo;,\nat the exclusion of &ldquo;an awesome tool for the job&rdquo;.  The opposite of\n&ldquo;right&rdquo; is &ldquo;wrong&rdquo;, but the opposite of &ldquo;awesome&rdquo; is &ldquo;boring&rdquo;, which is\nsometimes worse, especially if you&rsquo;re trying to maximize creativity.</p>\n\n<p>I&rsquo;m not sure how much research Brian did when he went out looking for\njustifications for using Node.js, but I don&rsquo;t think he really got at\nwhat actually is driving so many people interested in this thing.</p>\n\n<h2>Controversy</h2>\n\n<p>So far, I felt like the setup was nice, but the criticism itself was\nkind of lackluster.  We&rsquo;ve heard it before.  Node is hyped.  The\nsingle-language stack isn&rsquo;t all it&rsquo;s cracked up to be.  Etc.  I was\neager for the meat.</p>\n\n<p>No sooner had I thought this, than the next slide said:</p>\n\n<h3>Node.js rejects reality</h3>\n\n<p>Aha!  There it is.  That primal &ldquo;under attack&rdquo; feeling, the visceral\ntension in my lower abdomen, the warmth on my face.</p>\n\n<p>When I was younger (and still today when I&rsquo;m not at my best, I must\nadmit) the temptation was to hit back, or dismiss the message.  Fight or\nflight.  I think Brian probably\nlost a bunch of the audience with this slide.  It sure did get my attention.</p>\n\n<p>These days, when I feel that reaction, I try to leverage the added\nawareness that comes with the adrenaline, to be on the lookout for\nwhatever comes next, because it is full of valuable information,\nespecially if it is highly disagreeable.  Beware of the moments\nwhen rationality tries to slip away: those are the times you most need\nit.</p>\n\n<p>As I am somewhat dogmatic about endeavoring to\nreject reality less, I was very excited to hear what we might be\nmissing.</p>\n\n<p>Sadly, the justification for the &ldquo;ignores reality&rdquo; claim was not as\npointed as I would have liked.  It amounted to:</p>\n\n<ol><li>JavaScript is a garbage collected language.  Garbage collection\npretends that you have infinite memory, and you don&rsquo;t.</li>\n<li>IO always &ldquo;actually&rdquo; blocks somewhere, so the comparison between\nevents and blocking is not valid, since it has to block somewhere.</li>\n</ol><p>For sure, garbage collection is tricky, and the interaction between\nNode.js and the V8 garbage collector could probably be improved.  But to\ncall it a lie is a bit silly.  Garbage collection doesn&rsquo;t pretend that\nyou have infinite memory; that&rsquo;s virtual memory.  Garbage collection\npretends that you don&rsquo;t have to <code>free</code> memory in order for it to be\nre-used.</p>\n\n<p>One of the biggest pain\npoints of non-managed languages is having to explicitly free memory.\nThe biggest pain point in managed languages is having to deal with a\ngarbage collector.  There may be some sort of approach to memory\nmanagement that isn&rsquo;t collected or manual, but better than either.  If\nso, I don&rsquo;t know of it, and it doesn&rsquo;t matter anyway, because <strong>that is\na language design problem, and Node.js is not about designing a\nlanguage</strong>.  If you have a beef with garbage collection, take it up with\nV8 and TC-39.</p>\n\n<p>As for node being single-threaded, and IO always blocking, that&rsquo;s kind\nof confusing to me.  Of course, you don&rsquo;t\nactually have application-level <em>processing</em> of IO in parallel,\nsince there&rsquo;s only a single <em>JavaScript</em> thread, but IO definitely is\nperformed in parallel to the degree that the machine can provide,\nand &ldquo;nonblocking&rdquo; is the technical term for the\ntype of IO that node does on sockets.  (Nonblocking IO on files is\nsimulated using threads.)</p>\n\n<p>I&rsquo;d really like more details about what exactly Brian\nwas referring to on this point about IO &ldquo;always blocking somewhere&rdquo; and\nin what way Node.js rejects that reality.</p>\n\n<h3>entire ecosystem of tools and libraries must be built</h3>\n\n<p>This was a valid concern in 2010.  I said at the time that it\nwould not be an issue in a few years.  It&rsquo;s not an issue today.</p>\n\n<p>To an extent, this was by design.  A large part of\nRyan&rsquo;s reason for choosing\nJavaScript was that it is the only popular interpreted language with a\nsuitably powerful VM and no existing IO paradigm.  Additionally,\nto the extent that JavaScript <em>does</em> have a tradition of IO, it&rsquo;s\nXHR and the DOM, which are event-based and asynchronous.</p>\n\n<p>Since the birth of Node.js, a lot of libraries have been built.  There\nare 8500 modules on\nnpm.  There are bindings to every popular database, sophisticated test\nframeworks, template libraries, HTTP routers, and so on.  It&rsquo;s easy and\nfun to write modules, and so people have written modules.  This approach\nis remarkably valuable.</p>\n\n<p>That being said, module discovery and visibility leaves a lot to be\ndesired.  npm has grown much faster than Rubyforge or PyPI, much earlier\nin the life of Node, and so we have hit these problems earlier.</p>\n\n<p>Regarding tools, things are coming along quite nicely.</p>\n\n<p>Post-mortem debugging with MDB\njust landed in the master branch, and will be in node 0.7.8.  (Node v0.6\nhas had this for a while already.)  Mad props to Dave Pacheco for that.\nSeriously, if you&rsquo;ve never seen it in action, it&rsquo;s amazing.  In all my\nyears using PHP, I can&rsquo;t even count the number of times I&rsquo;d desparately\nwanted this sort of thing.  The zend IDE had some pretty good debugging\ncapabilities, but Dap&rsquo;s jsstack stuff is truly magical.  Call me a\nfanboi, I don&rsquo;t care: believe the hype.  It&rsquo;s fantastic.\nThe only sad\npoint is that it&rsquo;s only available in SmartOS, but it&rsquo;s not exactly\nsurprising that the OS made by Joyent has some special love for Node.js\n;)</p>\n\n<p>The DTrace support in Node is also impressive.  Again, not\nsurprising, given the fact that so many DTrace heavyweights work at\nJoyent, but the go-to DTrace library for node is not written by a Joyent\nemployee.  It&rsquo;s Chris Andrews&rsquo;\n<a href=\"https://github.com/chrisa/node-dtrace-provider\">node-dtrace-provider</a>\nmodule.  Anarchy &gt; curation, yet again.</p>\n\n<p>The depth and breadth of information that can be provided by\nDTrace, and the great work by Brendan Gregg and others at Joyent to\nactually massage that data into a format that humans can easily consume,\nis absolutely phenomenal.</p>\n\n<p>Similar work on run-time analytics and post-mortem debugging is underway\nat Microsoft, I&rsquo;m told.  Windows users: stay tuned.</p>\n\n<p>As a long-time text-editor-and-shell guy\n(moved from TextMate to vim a while ago), I don&rsquo;t really\nfollow the IDE stuff too closely.  But, Microsoft,\nCloud9, and many others are iterating furiously in this space.\nMany of them are leveraging their existing work on other JavaScript\ntooling, so it&rsquo;s moving quite fast.</p>\n\n<p>The built-in node debugger client is more my style, but node-inspector\nhooks into the Chrome debug tools, which imo blow away most visual\ndebuggers available.  (They even have heap analysis tools!)  There are\nalso plugins for Eclipse to provide stepwise debugging and analysis, and\na lot of existing Eclipse users are more at home there.</p>\n\n<p>So, it&rsquo;s not so much that the ecosystem of tools &ldquo;must\nbe built&rdquo;, as much as that it is being built, and leverages the existing\nJavaScript, V8, and system tools that already existed before Node showed\nup.  In many ways, Node.js provides one of the first server-side systems\nthat can fully take advantage of these things in a mostly cross-platform\nfashion.</p>\n\n<h3>Node.js will reproduce the last 15 years of ruby mistakes</h3>\n\n<p>Bold claim.  One that I was excited to see ample justification for.  What\nare the last 15 years of Ruby mistakes?\nHow can we avoid making those\nsame mistakes?  How did ruby fix them?  What can we learn from ruby&rsquo;s\nexperience?</p>\n\n<p>Brian&rsquo;s main justification of this point was that the\ncluster module is a repeat of Phusion Passenger.</p>\n\n<p>It&rsquo;s not entirely\nclear whether he was referring to TJ&rsquo;s &ldquo;cluster&rdquo; package, or the\nbuilt-in &ldquo;cluster&rdquo; module in v0.6, or the much improved &ldquo;cluster&rdquo;\nmodule in node v0.7.  None of them are a particularly close reproduction\nof passenger, though I suppose that TJ&rsquo;s is probably the closest.  But\nit&rsquo;s not as if any of these are an Apache plugin, or tied to a specific\nweb framework.  The analogy is a stretch, to say the least.</p>\n\n<p>What&rsquo;s even less clear is how Phusion Passenger, a program written in\n2009, and widely recognized as the most effective and popular way to\ndeploy the most effective and popular Ruby application framework, can\npossibly represent a &ldquo;mistake&rdquo;, let alone 15 years of mistakes.</p>\n\n<p>I can only conclude that I do not understand what he was trying to say,\nbecause otherwise, I cannot make sense of it.\nMaybe there was something else called &ldquo;passenger&rdquo; in the Ruby world once\nupon a time, which did kernel load balancing, IPC, and not much else.\nPerhaps this &ldquo;passenger&rdquo; was deemed a mistake, and is now gone.</p>\n\n<p>Show me a ruby mistake we&rsquo;re reproducing, and I&rsquo;ll make sure it gets\nfixed.</p>\n\n<h3>process concurrency is doomed</h3>\n\n<p>Brian declared that process concurrency will never be able to scale\nadequately.  I cannot accept this without data.  Instead of data, he\ngave some hand-wavey assertions about garbage collection getting out of\ncontrol.</p>\n\n<p>I&rsquo;ll assume that he was running low on time, and perhaps had to cut out\nthe histograms and demonstrations.  So let&rsquo;s leave that question open.</p>\n\n<p>Of course, spawning one process per request, or one process per IO\nor timer, is completely unreasonable.\nThat&rsquo;s why CGI was not adequate, and no one runs a real web platform\non bash.  However, running a single process\nper core, and having multiple HTTP servers share the open socket,\nand then using an event loop for IO and timers, is remarkably effective.</p>\n\n<p>If there is doom on the horizon, don&rsquo;t hint about it.  Show me the\nevidence.</p>\n\n<h3>symmetric errors, chain of evidence</h3>\n\n<p>Finally!  Something that <em>genuinely sucks a <strong>lot</strong> in Node.js!</em></p>\n\n<p>Domains is on the list for v0.8.  I don&rsquo;t know that the first pass at\ndomains will be the final and ultimate fix for this, but it&rsquo;ll be\nsomething to iterate on.  This will make errors much more symmetric, and\nprovide a much clearer chain of evidence.</p>\n\n<p>The chain of evidence is also much improved by having post-mortem\ndebugging of production systems.  If you haven&rsquo;t yet, check out Bryan\nCantrill&rsquo;s talk <a href=\"http://www.infoq.com/presentations/Debugging-Production-Systems\">And It All Went Horribly\nWrong</a>.</p>\n\n<p>So, this is important to me, it&rsquo;s important to Node.js users, it&rsquo;s\nimportant to the various companies paying the salaries of the node core\nteam.  It&rsquo;s reasonable to trust it&rsquo;s high priority.</p>\n\n<h2>Problems I Wish He&rsquo;d Mentioned</h2>\n\n<p>If you want to know what&rsquo;s wrong with node, ask a node-core developer.</p>\n\n<p>These are some of the things that are really problematic, some of them\nin a pretty deep way.  Of course, these are the things I know about,\nso they&rsquo;re things that we&rsquo;re working on for future releases of Node.js.\nIf there are things that you think belong on this list, let us know.</p>\n\n<p>Some of them are very hard,\nand will require iteration.  Some of them are pretty straightforward,\nand will be addressed soon.  Some of them are not super difficult, but\njust lower priority, and won&rsquo;t get addressed for a while.</p>\n\n<ol><li>Debugging.\nSee above.  It&rsquo;s our top issue, and it&rsquo;s coming along.  It was\nmentioned, but less strongly than I would have liked to see.</li>\n<li>It is very hard to get visibility into which pending actions are\nkeeping the event loop running.  This is a source of subtle errors.\nThe libuv refcount behavior is in the process of being cleaned up,\nand v0.8 will include a mechanism for seeing exactly which handles\nare in an open state.</li>\n<li>The Stream API, which is by all accounts the core use-case for node,\nis remarkably inconsistent and hard to extend.  It&rsquo;s a lot nicer in\nv0.4 and v0.6 than it was in v0.2 and before, but it&rsquo;s got a ways to\ngo yet.  We paper over a lot of the inconsistency in the\nStream.pipe() method, but it&rsquo;s a source of many subtle issues.  Node\nv0.9 will focus primarily on this issue.</li>\n<li>It&rsquo;s hard to find good node modules.  Reducing the barrier to entry\nfor node package creation has made it a lot easier for more people to\ntake advantage of.  However, when you solve a problem, you open the\ndoor for new ones that were hiding behind it.  We&rsquo;ve grown faster\nthan most platforms, which means that we&rsquo;re encountering the\ndiscovery issues sooner.  This will be addressed in the coming months\nwith a new npmjs.org website.</li>\n<li>The Node.js project lacks a consistent and visible continuous\nintegration system, so performance degradations can occur silently.</li>\n<li>Using binary modules is overly difficult, and requires a build\ntoolchain on the install target.  Work is underway to improve this,\nbut it&rsquo;s tricky.</li>\n</ol><p>And of course, just the fact that Node.js is very young, and has some\nbugs.  It&rsquo;ll no doubt get more, as we continue to work on it, but the\ngoal is to change things in ways that make these bugs easier to spot and\neasier to fix.</p>\n\n<p>It is not sufficient for Node.js to be better than any other platform.\nIt must be so good that it permanently raises expectations in this\nspace.  It must continue to impress and delight users.  There is so much\nwork yet to do, it&rsquo;s mind boggling.</p>\n\n<p>Laurels are not very comfortable to rest on.</p>\n\n<h2>And finally&hellip;</h2>\n\n<p>If you&rsquo;ve gotten this far, congratulations.  I try to keep blog posts\nmuch shorter than this, but there was a lot to respond to here, and\ntouched on several issues that are very close to my interests.</p>\n\n<p>Brian&rsquo;s talk was fascinating.  Even the mistakes were\ninteresting.  When the video comes out, I highly recommend watching it.\nGo get <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637/\">Thinking, Fast and\nSlow</a>.\nI haven&rsquo;t read it, but I&rsquo;m familiar with some of\nKahneman&rsquo;s other work in behavioral economics, and I suspect it&rsquo;s\nevery bit as fantastic as Brian claims.</p>\n\n<p>I got a chance to talk to Brian after the talk, and so hopefully a lot\nof these points (at least, the specific technical details of what sucks\nin Node.js and what we&rsquo;re doing about it) doesn&rsquo;t come as a surprise to\nhim.  He seems like a genuinely nice and thoughtful person.</p>\n\n<p>For a talk that started off with a request that we use science and\nmake conflict useful, I was disappointed that his criticisms of Node\nwere lacking in scientific rigor or constructive calls to action.  But\nas I mentioned earlier, it&rsquo;s hard to fit it all into a 30 minute talk.\nI hope this conversation will not end here.</p>\n\n<p>We&rsquo;re all humans.  We all think wrong.  We all love, and worry, and try\nto do interesting things.  We all fail, and feel shitty, and try\nto explain why we&rsquo;re not a bad person for it.  We\nall succeed, and want to brag about it.  We tell ourselves stories, and\nsometimes those stories are true, but usually they&rsquo;re only just true enough\nto get by.</p>\n\n<p>Try to remember this, the next time you&rsquo;re telling someone how awesome\n(or over-hyped)\nNode.js is, or any other thing you have feelings about,\nand they suggest that you may be a brainwashed idiot.  They are\njust trying to protect something, as are you, and in the course of this\nprotection, our instincts will cause us to fail.</p>\n\n<p>Show that monkey brain who&rsquo;s boss!\nSlow down, breathe, and try to remember that this person\nwho disagrees with you is not some big dumb idiot, but most likely a very\nthoughtful person who&rsquo;s trying to do their best to create truth and beauty\nin the world.  If you don&rsquo;t learn what motivates them, how can you ever\njoin forces?</p>\n\nMany thanks to Mikeal Rogers, Bryan Cantrill, Marco Rogers for reading early drafts of this post and providing feedback.</p>",
            "content_raw": "<p><p><strong>Update</strong>: The talk is online at <a href=\"http://blip.tv/jsconf/jsconf2012-brian-ford-6091521\">http://blip.tv/jsconf/jsconf2012-brian-ford-6091521</a>.  If you weren\u2019t there, you should go watch it before reading this.</p>\n\n<hr><p>As usual, this year\u2019s JSConf did not fail to deliver.  The parties, the\nlocation, the talks, the food, it was incredible.  Chris Williams (and\nthe rest of the JSConf family) really put together an incredible event.</p>\n\n<p>By far, the most controversial talk was <a href=\"http://brixen.io/\">Brian\nFord\u2019s</a> \u201cIs Node.js\nBetter\u201d.  I must admit, I walked in skeptical.  Brian Ford seems like a\nbright and reasonable guy, but is clearly not a noder.</p>\n\n<p>I\u2019m not going to transcribe what he said.  If you want that, read <a href=\"http://speakerdeck.com/u/brixen/p/is-nodejs-better\">his\nslides</a> and watch\nthe video when it comes out.  This is my reaction and response, and says\nmore about me than it does about Brian.</p>\n\n<p>This is based mostly on my meat-brain memory, and some notes that\nI scribbled.  It\u2019s quite\npossible that I may get some of the particulars wrong.  However, rather\nthan wait for the video to come out, I\u2019d like to write this now, since\nthe errors in perception are themselves useful information.  If you\nnotice any such error, please let me know.</p>\n\n<p>Of course, there are limits to how deep a speaker can go into a topic in\na 30 minute talk, and those limits are much shallower than how deep I\ncan go in this blog post.  So, I\u2019d like to frame this response not so\nmuch as me-vs-Brian, but rather as just another public part of a longer\nmulti-format conversation.  My goal is not to produce more controversy\nthan is useful, but to perhaps produce enough to keep things interesting.</p>\n\n<p>Fair warning, this is a much longer post than most things I write.  If\nyou\u2019re reading it, you\u2019re probably interested mostly in the specific\nnode stuff at the end.  I\u2019ve opted not to shorten it too drastically, because\nthe topics are in my opinion best served by a thorough exploration.</p>\n\n<h2>[citation needed]</h2>\n\n<p>A lot of what I\u2019m talking about is discussed in much more rigor\nelsewhere.  This blog post is a synthesis, not a research paper.  In\naddition to <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637\">Thinking Fast and\nSlow</a>\nwhich Brian mentioned, these are about the most\napproachable and informative discussions of the subjects that I\u2019ve\nfound:</p>\n\n<ul><li><a href=\"http://www.amazon.com/Influence-Science-Practice-ePub-ebook/dp/B001CDZYVE\">Influence</a></li>\n<li><a href=\"http://www.amazon.com/Predictably-Irrational-Revised-Expanded-ebook/dp/B002C949KE\">Predictably\nIrrational</a></li>\n<li><a href=\"http://lesswrong.com/lw/xy/the_fun_theory_sequence/\">Less Wrong: Fun Theory</a></li>\n<li><a href=\"http://wiki.lesswrong.com/wiki/How_To_Actually_Change_Your_Mind\">Less Wrong: How to Actually Change Your\nMind</a></li>\n</ul><h2>The Right</h2>\n\n<p>Brian started his talk with a very insightful exploration of the nature\nof controversy.  He talked about our fast brain and slow brain, and\nguaranteed that reading <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637\">Thinking Fast and\nSlow</a>\nwould change your life for the better, or he\u2019d refund the cost of the book.</p>\n\n<p>In discussing the title of the talk, he made the point that every value\njudgement implies a comparison, and invites controversy.  If presented\nwith a choice of apples and oranges, and you remark that \u201coranges are\nhealthy\u201d, then the implication is that apples are not (or at least\n<em>less</em>) healthy.  So, the question \u201cIs Node.js Better\u201d raises the\nquestion, \u201cBetter than what?\u201d</p>\n\n<h3>Storming Brains</h3>\n\n<p>He went on to stress the importance of the scientific method, especially\nin cases where groupthink can grab ahold of a popular intuition.  A\npowerful example of this is the idea of brainstorming, which has come\nunder\n<a href=\"https://en.wikipedia.org/wiki/Brain-storming#Criticism\">criticism</a> in\nrecent studies.</p>\n\n<p>Of course, another fascinating point worth mentioning (which was not covered\nin Brian\u2019s talk) is that the primary\nsource of the criticism is a survey of the results of 22 different\nstudies with different methodologies, done in different environments,\non different subjects.</p>\n\n<p>I\u2019m wondering what the differences are between the 4 where brainstorming\nworked, and the 18 where it didn\u2019t.  It\u2019s especially worth noting that\n18 instances of brainstorming\u2019s failure vs 4 instances where it was\nsuccessful, does not imply that brainstorming is \u201cusually\u201d less\neffective: only that it\u2019s usually less effective in the studies\nsurveyed.  If you check the weather in Wisconsin 18 times in the summer,\nand 4 times in the winter, you might conclude it\u2019s usually tropical.</p>\n\n<p>This survey was reported several\ntimes in the Journal of Personality and Social Psychology.  More\nrecently, these journal articles were summarized in the New Yorker and\nother popular magazines.  To me, this smacks of \u201cturns out\u201d-ism.  It\n<em>might</em> be that the popular intuition about brainstorming is wrong.  It\nmight also be that it\u2019s just incomplete.</p>\n\n<h3>Organization</h3>\n\n<p>Brian discussed the concept that organizations tend to perpetuate the\nproblems that they were designed to solve.  To my mind, this implies\nthat we ought not to try to solve our problems with organizations, but\nrather, to solve them with chaos and disruption instead, wherever possible.\nSince it is often not possible, and because \u201cdisruption\u201d becomes just\nanother buzzword meaning a specific sort of organization, we should make\nit our goal not to \u201csolve problems\u201d, but rather to find the problems\nthat are hidden by our current assumptions.</p>\n\n<p>\u201cSolving\u201d a problem, then,\nbecomes more an exploration than a \u201cfix this thing\u201d exercise.  An\nexploratory expedition stops exploring when it returns with an answer.\nSimilarly, organizations that are designed to solve a specific problem\n(as opposed to organizations that are designed to, say, throw parties or\nmake buttons)\nshould have their own destruction built into their core constitution.</p>\n\n<p>This principle of minimum institution has guided the choices we\u2019ve made\nin npm and in Node.js, technologically as well as socially.\nIt has shaped the community in subtle ways that\nare difficult to recognize from the outside.  It\u2019s a principle that is\nclose to my heart, and it\u2019s why Node and I have gotten along so well.</p>\n\n<h3>Behavioral Science</h3>\n\n<p>\u201cProgramming is a behavioral science.\u201d  Couldn\u2019t agree more.  However,\nthe transition from \u201cbehavioral science\u201d to concurrency as a way to deal\nwith scarcity of compute resources felt a bit forced to me.  From that\npoint of view, everything is behavioral science, because everything we\ndo is done out of some human need (or else we wouldn\u2019t do it.)</p>\n\n<p>I think it\u2019s more precise to say that software development is behavioral\nscience, because every interface is a human interface, and humans are\neven more unreasonable in their behavior than hard disk platters.</p>\n\n<h2>The Wrong</h2>\n\n<p>There were a few points where I believe that Brian simply was either\nincorrect, misinformed, or perpetuating and reacting to\nthe very groupthink that he is ostensibly setting out to move past.</p>\n\n<h3>Justifications for Using Node.js</h3>\n\n<p>There were a few justifications for using Node that Brian listed:</p>\n\n<ul><li>same language on the client and server</li>\n<li>there are many JavaScript programmers</li>\n<li>Node.js is more fun</li>\n</ul><p>These are all interesting justifications, though really, the\nfirst two are rationalizations for the third.  For a talk that started\nout by diving into the science of hedonics and decision theory (albeit\na somewhat Gladwell-esque popularization of it), I was a bit disappointed to\nsee that he didn\u2019t go into more depth on this point.</p>\n\n<p>He said that users call themselves polyglots, so he rejects the claim\nthat a single language is actually relevant.  This is a highly specious\nrebuttal.  I can stand, but I still often find it pleasant to sit.  It\ndoesn\u2019t have to be <em>necessary</em> in order to be valid\nin this case, it only needs to be <em>comfortable</em>.  If you\u2019ve never\nworked in a single-language stack, I highly recommend it.  Even though\nyou can\u2019t share a lot of code in most situations, it does reduce the\ncognitive load switching between different parts of the application.\nThis is the same reason that I\u2019ve suggested using semicolons in\nJavaScript programs that include other non-ASI languages: reducing\nswitching cost is reducing cost.</p>\n\n<p>Brian claimed that the \u201cmany JavaScript programmers\u201d argument is\ninvalid, or at least, not very compelling. We ought to figure out the\nideal platform, he said, and then provide advocacy, education, and\nresources to help people adopt it.  This also strikes me as a bit weird.\nI\u2019m not claiming that one should make all their technical\ndecisions based solely on popularity, of course, but it certainly is not\n<em>irrelevant</em>.  There\u2019s something to be said for pragmatism.</p>\n\n<p>People don\u2019t use Node.js because it\u2019s the same language on the client\nand server.  They use Node.js because that language is <strong>JavaScript</strong>,\nand JavaScript is fun.</p>\n\n<p>There aren\u2019t more JavaScript programmers because of a lack of education\nor advocacy in other languages.  JavaScript is fun (and unavoidable),\nand so all programmers use it.</p>\n\n<p>\u201cNode.js is more fun.\u201d  This reminds Brian of Ruby a few years ago.\nIt\u2019s important to remember, in the context of hedonics especially, that\n\u201cfun\u201d is a highly subtle term worthy of study on its own.</p>\n\n<p>The problem with \u201cJustifications for doing X\u201d is that we do things\n<em>primarily</em> because of our emotions.  Even the action of \u201cbeing rational\u201d\nis a thing that we choose to do because of a positive feeling attached\nto our self-image as a \u201crational person who does smart things\u201d, and the\nassumption that we\u2019ll get some pleasantly winful reward that feels good.\nWhen we really want to do something irrational, we usually have no problem\nreconciling the conflict with our preferred self-image as a rational\nindividual.</p>\n\n<p>Emotions are not just <em>part</em> of motivation, they <em>are</em> motivation.  If you\nwant to know why a person does something, don\u2019t ask them to explain why\nthey do it; try instead to figure out how they feel.  It\u2019s a much more\nchallenging question, but it leads to much more interesting information.</p>\n\n<h3>About the word \u201chype\u201d</h3>\n\n<p>When we have a good feeling about something (or even,\nwhen we just make any choice at all, and don\u2019t quite understand why),\nour brain begins inventing rationalizations right away.  The\nfirst one to pattern-match against \u201cX because Y\u201d is likely\naccepted as the \u201creason\u201d we\u2019re doing something, regardless of how much\nthe truth of \u201cY\u201d actually affects the likelihood of \u201cX\u201d.</p>\n\n<p>Try asking a compulsive gambler why he goes to the casino.  He might\ntell you about his \u201cstrategy\u201d for roulette.  Of course, this is\nbullshit.  Roulette is a deterministically losing game; the more you\nplay, the more you lose.  Same with craps, slots, and\n(unless you\u2019re the best at the table) poker.  It\u2019s the\n<strong>feeling</strong> of winning that he\u2019s chasing, and the <strong>feeling</strong> of the\nchase.  If he was truly motivated by the desire for money,\nthere are obviously much better ways of getting it.</p>\n\n<p>When a person shares their justifications for doing something,\none of two things typically happens, in the \u201cfast-brain\u201d:</p>\n\n<ol><li>You feel the same way about the thing.  The justification\npattern-matches against \u201cI should X-that-I-do because Y\u201d, and so\nyou accept the justification as rational, wise, and well-informed.\nAfter all, you already do it, so you must agree.</li>\n<li>You feel differently about the thing.  Or, at least, it\u2019s not a thing\nyou do, and so you have invented some justifications for not doing\nit.  Your brain pattern-matches against \u201cI should\nX-that-is-stupid because of Y\u201d, and so you reject the justification\nas irrational, foolish, and ignorant.  After all, it\u2019s stupid, so any\njustification must be misguided.</li>\n</ol><p>If you have some vegan friends, and some friends on the paleo diet, and\nfeel like watching some fireworks, ask them in each others company why\nthey eat the way that they do.  No matter how polite they try to be,\neach will <em>subconsiously</em> perceive the statements of the other as an\nattack, and feel the need to defend their position.  If they are wise\nenough to retreat from needing to <em>convince</em> the other, they\u2019ll most\nlikely at least make a big show about \u201cagreeing to disagree\u201d.\n(Of course, if they\u2019ve been on this diet for a while, they may have\nenough practice at these sorts of situations to handle them quite\ngracefully.)</p>\n\n<p>If X is not just \u201cdo this action\u201d, but rather \u201cfeel this way\u201d, and you\ndo not already feel that way, and the justification is not enough to\nincite this feeling (as justifications almost never are),\nthen we label it \u201chype\u201d, and it <em>raises</em> the bar\nthat we now require to take the thing seriously next time.</p>\n\n<p>Like so many cognitive\nshortcuts, this is a really good move much of the time.  After all,\npeople\u2019s justifications are usually self-delusions as often as\nwell-informed and rational reasons for doing or thinking anything.  It\nmakes perfect sense to be extra skeptical when we are at the risk of\nbeing influenced by it.  If we have to be extra skeptical over and over\nagain, we start to pattern match \u201cX is good\u201d into the hype category.\nSuddenly, it\u2019s not just that veganism or paleo is not for me, it\u2019s that\nthe diet is a mark of a foolish <em>person</em>.</p>\n\n<p><strong>The net result is that anyone saying anything positive is likely to be\nlabelled a \u201cfanboi\u201d, and their statement called \u201chype\u201d, no matter what\nthey say.</strong>  This is a dangerous feedback loop that leads technology\ncommunities to stagnation, bitterness, and chest-beating.</p>\n\n<h3>Yo Dawg! I heard you like cognitive distortions, so I distorted your cognition so you can distort while you cognit!</h3>\n\n<p>The mind is such a wonderful thing!  Mistakes in the mistake\ndetection lead to potentially valid statements being\ndiscounted because they are presented <em>along with</em> invalid justifications,\nor presented <em>by</em> a low-status speaker, or are <em>in conflict with</em>\nalready-held beliefs, <em>especially</em> when those already-held beliefs are a\npart of our Tribal Story.</p>\n\n<p>Even worse, you have situations where we see a few \u201cX is good because Y\u201d\njustifications, deem them false, and then subconsciously\ninternalize the fact that we\ngain status in our tribe by applying the \u201chype\u201d label and\ndiscounting it, resulting in spiraling down into the toilet.\nPoliticians and marketers have made a science of getting us to elevate\narbitrary ideas into this Tribal Story, blinding us to any disagreement.</p>\n\n<p>Birds fly.  Fish swim.  Humans make mistakes.  It is our Super Power.\nWe all do this.</p>\n\n<p>We almost never change our minds.  We are influenced in ways we are\nincapable of detecting (and will deny!)  We are motivated by the behavior\nof people who look like us superficially, and believe (at least temporarily)\nliterally everything we hear.</p>\n\n<p>There is virtually no limit to the ability\nof the human mind to find new and creative ways to get out of touch with\nreality.  I don\u2019t want to give the impression that I (or anyone) could\ndelineate all the many subtleties of human cognitive error.  Every one\nis so rich and complicated.  Even this discussion of\npattern-matching \u201cX-because-Y\u201d is a serious oversimplification.</p>\n\n<p>In the ancestral environment of adaptation, disagreement was often\nfatal.  We\u2019ve gotten a bit better at intelligent disagreement, but we\nstill try unconsciously to come to an all-or-nothing agreement within\nour own heads, annihilating any \u201cbad\u201d idea entirely, and shrowding any\n\u201cgood\u201d idea in a halo.</p>\n\n<p>Whenever tempted to call something \u201chype\u201d (or, even, \u201canti-hype\u201d),\nI try to remember to ask the following questions:</p>\n\n<ol><li>Is the provided justification <em>evidence</em>, <em>data</em>, or an expression of\na <em>feeling</em>?  What is the speaker\u2019s experience of the thing being\ndiscussed?  If it\u2019s evidence, is it reproducible?  If it\u2019s data, is\nit relevant?</li>\n<li>How do I feel about the subject?  How did I feel about it\nyesterday?  What are my justifications?</li>\n<li>Am I tempted to dismiss this?  Is it because of bad evidence,\na speaker who holds low status in my tribe,\nor because I disagree with the feeling?  If it\u2019s a lack of evidence,\nwhat evidence <em>would</em> make me feel the same way?  If it\u2019s a feeling I\ndon\u2019t share, what other things <em>do</em> I feel that way about?  If it\u2019s a\nlow-status speaker, how would I feel if <code>&lt;person I respect&gt;</code>\nwas saying it?</li>\n<li>Am I tempted to accept this?  Is it because it agrees with something\nI already think?  What new information does it actually contain?</li>\n</ol><p>This is part of the reason why I try to criticise Node.js\nand npm as harshly and often and publicly as I can.  I do think that\nthey\u2019re tremendously useful tools\u2026 but how can you believe me if I\ntell you that they\u2019re perfect, when I clearly know better?  And if you\ncan\u2019t believe me when I talk about Node.js, then what good am I?</p>\n\n<h3>Better justifications to use Node.js</h3>\n\n<ol><li>The IO paradigm is a good fit for your problem, and V8 is fast enough.\nThis is the case for a lot of web software, but definitely\nnot every program.  Node.js really does make\nit pretty easy to write things like IRC bots and crawlers and\nwebsites, and is probably not ideal for many compute-intensive\napplications.</li>\n<li>It\u2019s fun to write programs in this fashion.  There are time-honored\ntraditions of thinking of data as streams of bytes, and JavaScript is\na relatively simple and expressive language for doing this in\ncreative ways.</li>\n<li>It\u2019s fun to be a part of making a popular platform better.  The\ncommunity is active and still pretty friendly, and that feels good to\nbe a part of.  Newcomers turn into regulars and then celebrities very\nswiftly.  All it takes is a bit of persistence and enthusiasm.</li>\n<li>You prefer the simpler approach to asynchronous programming, using a\ncallback/observer model (or actor model for child processes), rather\nthan something like green threads or coroutines that \u201clook\u201d synchronous.</li>\n</ol><p>If you\u2019re not writing systems that are well served by nonblocking IO, or\nan event loop/observer pattern approach, or if you don\u2019t think it\u2019s fun\nto make programs this way, then you probably shouldn\u2019t use it.</p>\n\n<p>But, even that aversion is worth looking carefully at that, no matter what\nyou decide.  V8 is an extremely fast virtual machine, and\nthese days, a <em>lot</em> of programs are IO-bound.</p>\n\n<p>And even if it\u2019s not, we tend to focus on \u201cthe right tool for the job\u201d,\nat the exclusion of \u201can awesome tool for the job\u201d.  The opposite of\n\u201cright\u201d is \u201cwrong\u201d, but the opposite of \u201cawesome\u201d is \u201cboring\u201d, which is\nsometimes worse, especially if you\u2019re trying to maximize creativity.</p>\n\n<p>I\u2019m not sure how much research Brian did when he went out looking for\njustifications for using Node.js, but I don\u2019t think he really got at\nwhat actually is driving so many people interested in this thing.</p>\n\n<h2>Controversy</h2>\n\n<p>So far, I felt like the setup was nice, but the criticism itself was\nkind of lackluster.  We\u2019ve heard it before.  Node is hyped.  The\nsingle-language stack isn\u2019t all it\u2019s cracked up to be.  Etc.  I was\neager for the meat.</p>\n\n<p>No sooner had I thought this, than the next slide said:</p>\n\n<h3>Node.js rejects reality</h3>\n\n<p>Aha!  There it is.  That primal \u201cunder attack\u201d feeling, the visceral\ntension in my lower abdomen, the warmth on my face.</p>\n\n<p>When I was younger (and still today when I\u2019m not at my best, I must\nadmit) the temptation was to hit back, or dismiss the message.  Fight or\nflight.  I think Brian probably\nlost a bunch of the audience with this slide.  It sure did get my attention.</p>\n\n<p>These days, when I feel that reaction, I try to leverage the added\nawareness that comes with the adrenaline, to be on the lookout for\nwhatever comes next, because it is full of valuable information,\nespecially if it is highly disagreeable.  Beware of the moments\nwhen rationality tries to slip away: those are the times you most need\nit.</p>\n\n<p>As I am somewhat dogmatic about endeavoring to\nreject reality less, I was very excited to hear what we might be\nmissing.</p>\n\n<p>Sadly, the justification for the \u201cignores reality\u201d claim was not as\npointed as I would have liked.  It amounted to:</p>\n\n<ol><li>JavaScript is a garbage collected language.  Garbage collection\npretends that you have infinite memory, and you don\u2019t.</li>\n<li>IO always \u201cactually\u201d blocks somewhere, so the comparison between\nevents and blocking is not valid, since it has to block somewhere.</li>\n</ol><p>For sure, garbage collection is tricky, and the interaction between\nNode.js and the V8 garbage collector could probably be improved.  But to\ncall it a lie is a bit silly.  Garbage collection doesn\u2019t pretend that\nyou have infinite memory; that\u2019s virtual memory.  Garbage collection\npretends that you don\u2019t have to <code>free</code> memory in order for it to be\nre-used.</p>\n\n<p>One of the biggest pain\npoints of non-managed languages is having to explicitly free memory.\nThe biggest pain point in managed languages is having to deal with a\ngarbage collector.  There may be some sort of approach to memory\nmanagement that isn\u2019t collected or manual, but better than either.  If\nso, I don\u2019t know of it, and it doesn\u2019t matter anyway, because <strong>that is\na language design problem, and Node.js is not about designing a\nlanguage</strong>.  If you have a beef with garbage collection, take it up with\nV8 and TC-39.</p>\n\n<p>As for node being single-threaded, and IO always blocking, that\u2019s kind\nof confusing to me.  Of course, you don\u2019t\nactually have application-level <em>processing</em> of IO in parallel,\nsince there\u2019s only a single <em>JavaScript</em> thread, but IO definitely is\nperformed in parallel to the degree that the machine can provide,\nand \u201cnonblocking\u201d is the technical term for the\ntype of IO that node does on sockets.  (Nonblocking IO on files is\nsimulated using threads.)</p>\n\n<p>I\u2019d really like more details about what exactly Brian\nwas referring to on this point about IO \u201calways blocking somewhere\u201d and\nin what way Node.js rejects that reality.</p>\n\n<h3>entire ecosystem of tools and libraries must be built</h3>\n\n<p>This was a valid concern in 2010.  I said at the time that it\nwould not be an issue in a few years.  It\u2019s not an issue today.</p>\n\n<p>To an extent, this was by design.  A large part of\nRyan\u2019s reason for choosing\nJavaScript was that it is the only popular interpreted language with a\nsuitably powerful VM and no existing IO paradigm.  Additionally,\nto the extent that JavaScript <em>does</em> have a tradition of IO, it\u2019s\nXHR and the DOM, which are event-based and asynchronous.</p>\n\n<p>Since the birth of Node.js, a lot of libraries have been built.  There\nare 8500 modules on\nnpm.  There are bindings to every popular database, sophisticated test\nframeworks, template libraries, HTTP routers, and so on.  It\u2019s easy and\nfun to write modules, and so people have written modules.  This approach\nis remarkably valuable.</p>\n\n<p>That being said, module discovery and visibility leaves a lot to be\ndesired.  npm has grown much faster than Rubyforge or PyPI, much earlier\nin the life of Node, and so we have hit these problems earlier.</p>\n\n<p>Regarding tools, things are coming along quite nicely.</p>\n\n<p>Post-mortem debugging with MDB\njust landed in the master branch, and will be in node 0.7.8.  (Node v0.6\nhas had this for a while already.)  Mad props to Dave Pacheco for that.\nSeriously, if you\u2019ve never seen it in action, it\u2019s amazing.  In all my\nyears using PHP, I can\u2019t even count the number of times I\u2019d desparately\nwanted this sort of thing.  The zend IDE had some pretty good debugging\ncapabilities, but Dap\u2019s jsstack stuff is truly magical.  Call me a\nfanboi, I don\u2019t care: believe the hype.  It\u2019s fantastic.\nThe only sad\npoint is that it\u2019s only available in SmartOS, but it\u2019s not exactly\nsurprising that the OS made by Joyent has some special love for Node.js\n;)</p>\n\n<p>The DTrace support in Node is also impressive.  Again, not\nsurprising, given the fact that so many DTrace heavyweights work at\nJoyent, but the go-to DTrace library for node is not written by a Joyent\nemployee.  It\u2019s Chris Andrews\u2019\n<a href=\"https://github.com/chrisa/node-dtrace-provider\">node-dtrace-provider</a>\nmodule.  Anarchy &gt; curation, yet again.</p>\n\n<p>The depth and breadth of information that can be provided by\nDTrace, and the great work by Brendan Gregg and others at Joyent to\nactually massage that data into a format that humans can easily consume,\nis absolutely phenomenal.</p>\n\n<p>Similar work on run-time analytics and post-mortem debugging is underway\nat Microsoft, I\u2019m told.  Windows users: stay tuned.</p>\n\n<p>As a long-time text-editor-and-shell guy\n(moved from TextMate to vim a while ago), I don\u2019t really\nfollow the IDE stuff too closely.  But, Microsoft,\nCloud9, and many others are iterating furiously in this space.\nMany of them are leveraging their existing work on other JavaScript\ntooling, so it\u2019s moving quite fast.</p>\n\n<p>The built-in node debugger client is more my style, but node-inspector\nhooks into the Chrome debug tools, which imo blow away most visual\ndebuggers available.  (They even have heap analysis tools!)  There are\nalso plugins for Eclipse to provide stepwise debugging and analysis, and\na lot of existing Eclipse users are more at home there.</p>\n\n<p>So, it\u2019s not so much that the ecosystem of tools \u201cmust\nbe built\u201d, as much as that it is being built, and leverages the existing\nJavaScript, V8, and system tools that already existed before Node showed\nup.  In many ways, Node.js provides one of the first server-side systems\nthat can fully take advantage of these things in a mostly cross-platform\nfashion.</p>\n\n<h3>Node.js will reproduce the last 15 years of ruby mistakes</h3>\n\n<p>Bold claim.  One that I was excited to see ample justification for.  What\nare the last 15 years of Ruby mistakes?\nHow can we avoid making those\nsame mistakes?  How did ruby fix them?  What can we learn from ruby\u2019s\nexperience?</p>\n\n<p>Brian\u2019s main justification of this point was that the\ncluster module is a repeat of Phusion Passenger.</p>\n\n<p>It\u2019s not entirely\nclear whether he was referring to TJ\u2019s \u201ccluster\u201d package, or the\nbuilt-in \u201ccluster\u201d module in v0.6, or the much improved \u201ccluster\u201d\nmodule in node v0.7.  None of them are a particularly close reproduction\nof passenger, though I suppose that TJ\u2019s is probably the closest.  But\nit\u2019s not as if any of these are an Apache plugin, or tied to a specific\nweb framework.  The analogy is a stretch, to say the least.</p>\n\n<p>What\u2019s even less clear is how Phusion Passenger, a program written in\n2009, and widely recognized as the most effective and popular way to\ndeploy the most effective and popular Ruby application framework, can\npossibly represent a \u201cmistake\u201d, let alone 15 years of mistakes.</p>\n\n<p>I can only conclude that I do not understand what he was trying to say,\nbecause otherwise, I cannot make sense of it.\nMaybe there was something else called \u201cpassenger\u201d in the Ruby world once\nupon a time, which did kernel load balancing, IPC, and not much else.\nPerhaps this \u201cpassenger\u201d was deemed a mistake, and is now gone.</p>\n\n<p>Show me a ruby mistake we\u2019re reproducing, and I\u2019ll make sure it gets\nfixed.</p>\n\n<h3>process concurrency is doomed</h3>\n\n<p>Brian declared that process concurrency will never be able to scale\nadequately.  I cannot accept this without data.  Instead of data, he\ngave some hand-wavey assertions about garbage collection getting out of\ncontrol.</p>\n\n<p>I\u2019ll assume that he was running low on time, and perhaps had to cut out\nthe histograms and demonstrations.  So let\u2019s leave that question open.</p>\n\n<p>Of course, spawning one process per request, or one process per IO\nor timer, is completely unreasonable.\nThat\u2019s why CGI was not adequate, and no one runs a real web platform\non bash.  However, running a single process\nper core, and having multiple HTTP servers share the open socket,\nand then using an event loop for IO and timers, is remarkably effective.</p>\n\n<p>If there is doom on the horizon, don\u2019t hint about it.  Show me the\nevidence.</p>\n\n<h3>symmetric errors, chain of evidence</h3>\n\n<p>Finally!  Something that <em>genuinely sucks a <strong>lot</strong> in Node.js!</em></p>\n\n<p>Domains is on the list for v0.8.  I don\u2019t know that the first pass at\ndomains will be the final and ultimate fix for this, but it\u2019ll be\nsomething to iterate on.  This will make errors much more symmetric, and\nprovide a much clearer chain of evidence.</p>\n\n<p>The chain of evidence is also much improved by having post-mortem\ndebugging of production systems.  If you haven\u2019t yet, check out Bryan\nCantrill\u2019s talk <a href=\"http://www.infoq.com/presentations/Debugging-Production-Systems\">And It All Went Horribly\nWrong</a>.</p>\n\n<p>So, this is important to me, it\u2019s important to Node.js users, it\u2019s\nimportant to the various companies paying the salaries of the node core\nteam.  It\u2019s reasonable to trust it\u2019s high priority.</p>\n\n<h2>Problems I Wish He\u2019d Mentioned</h2>\n\n<p>If you want to know what\u2019s wrong with node, ask a node-core developer.</p>\n\n<p>These are some of the things that are really problematic, some of them\nin a pretty deep way.  Of course, these are the things I know about,\nso they\u2019re things that we\u2019re working on for future releases of Node.js.\nIf there are things that you think belong on this list, let us know.</p>\n\n<p>Some of them are very hard,\nand will require iteration.  Some of them are pretty straightforward,\nand will be addressed soon.  Some of them are not super difficult, but\njust lower priority, and won\u2019t get addressed for a while.</p>\n\n<ol><li>Debugging.\nSee above.  It\u2019s our top issue, and it\u2019s coming along.  It was\nmentioned, but less strongly than I would have liked to see.</li>\n<li>It is very hard to get visibility into which pending actions are\nkeeping the event loop running.  This is a source of subtle errors.\nThe libuv refcount behavior is in the process of being cleaned up,\nand v0.8 will include a mechanism for seeing exactly which handles\nare in an open state.</li>\n<li>The Stream API, which is by all accounts the core use-case for node,\nis remarkably inconsistent and hard to extend.  It\u2019s a lot nicer in\nv0.4 and v0.6 than it was in v0.2 and before, but it\u2019s got a ways to\ngo yet.  We paper over a lot of the inconsistency in the\nStream.pipe() method, but it\u2019s a source of many subtle issues.  Node\nv0.9 will focus primarily on this issue.</li>\n<li>It\u2019s hard to find good node modules.  Reducing the barrier to entry\nfor node package creation has made it a lot easier for more people to\ntake advantage of.  However, when you solve a problem, you open the\ndoor for new ones that were hiding behind it.  We\u2019ve grown faster\nthan most platforms, which means that we\u2019re encountering the\ndiscovery issues sooner.  This will be addressed in the coming months\nwith a new npmjs.org website.</li>\n<li>The Node.js project lacks a consistent and visible continuous\nintegration system, so performance degradations can occur silently.</li>\n<li>Using binary modules is overly difficult, and requires a build\ntoolchain on the install target.  Work is underway to improve this,\nbut it\u2019s tricky.</li>\n</ol><p>And of course, just the fact that Node.js is very young, and has some\nbugs.  It\u2019ll no doubt get more, as we continue to work on it, but the\ngoal is to change things in ways that make these bugs easier to spot and\neasier to fix.</p>\n\n<p>It is not sufficient for Node.js to be better than any other platform.\nIt must be so good that it permanently raises expectations in this\nspace.  It must continue to impress and delight users.  There is so much\nwork yet to do, it\u2019s mind boggling.</p>\n\n<p>Laurels are not very comfortable to rest on.</p>\n\n<h2>And finally\u2026</h2>\n\n<p>If you\u2019ve gotten this far, congratulations.  I try to keep blog posts\nmuch shorter than this, but there was a lot to respond to here, and\ntouched on several issues that are very close to my interests.</p>\n\n<p>Brian\u2019s talk was fascinating.  Even the mistakes were\ninteresting.  When the video comes out, I highly recommend watching it.\nGo get <a href=\"http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374275637/\">Thinking, Fast and\nSlow</a>.\nI haven\u2019t read it, but I\u2019m familiar with some of\nKahneman\u2019s other work in behavioral economics, and I suspect it\u2019s\nevery bit as fantastic as Brian claims.</p>\n\n<p>I got a chance to talk to Brian after the talk, and so hopefully a lot\nof these points (at least, the specific technical details of what sucks\nin Node.js and what we\u2019re doing about it) doesn\u2019t come as a surprise to\nhim.  He seems like a genuinely nice and thoughtful person.</p>\n\n<p>For a talk that started off with a request that we use science and\nmake conflict useful, I was disappointed that his criticisms of Node\nwere lacking in scientific rigor or constructive calls to action.  But\nas I mentioned earlier, it\u2019s hard to fit it all into a 30 minute talk.\nI hope this conversation will not end here.</p>\n\n<p>We\u2019re all humans.  We all think wrong.  We all love, and worry, and try\nto do interesting things.  We all fail, and feel shitty, and try\nto explain why we\u2019re not a bad person for it.  We\nall succeed, and want to brag about it.  We tell ourselves stories, and\nsometimes those stories are true, but usually they\u2019re only just true enough\nto get by.</p>\n\n<p>Try to remember this, the next time you\u2019re telling someone how awesome\n(or over-hyped)\nNode.js is, or any other thing you have feelings about,\nand they suggest that you may be a brainwashed idiot.  They are\njust trying to protect something, as are you, and in the course of this\nprotection, our instincts will cause us to fail.</p>\n\n<p>Show that monkey brain who\u2019s boss!\nSlow down, breathe, and try to remember that this person\nwho disagrees with you is not some big dumb idiot, but most likely a very\nthoughtful person who\u2019s trying to do their best to create truth and beauty\nin the world.  If you don\u2019t learn what motivates them, how can you ever\njoin forces?</p>\n\n<div class=\"small\">Many thanks to Mikeal Rogers, Bryan Cantrill, Marco Rogers for reading early drafts of this post and providing feedback.</div></p>",
            "is_current_item": true,
            "is_root_item": true,
            "post": {
                "id": "20786279320"
            }
        }
    ],
    "type": "text"
}