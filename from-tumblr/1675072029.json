{
    "blog": {
        "description": "Writing and Stuff from Isaac Z. Schlueter",
        "name": "izs",
        "title": "blog.izs.me",
        "updated": 1544051896,
        "url": "http://blog.izs.me/",
        "uuid": "t:qZa3tMNNGjX7PQ45aXJ-jw"
    },
    "blog_name": "izs",
    "body": "<p><strong>OMG UPDAET!</strong> <small>2011-06-19</small></p>\n\n<p>Some of this is no longer 100% accurate, which shouldn&rsquo;t be very surprising, since it was written 7 months ago, and npm had a major version update since then.</p>\n\n<p>Check out <a href=\"http://blog.nodejs.org/category/npm\">the node blog</a> for some of the 1.0 changes.</p>\n\n<hr><p>npm is the node package manager.  Once upon a time, I would have said\n&ldquo;a&rdquo; node package manager, and the humbler part of me would like to\npretend that that&rsquo;s still the case, but SCREW THAT HUMBLER SIDE, I&rsquo;m\nfeeling egotistical and braggy today, so today it&rsquo;s <strong>THE</strong> node package\nmanager.</p>\n\n<p>Also, I&rsquo;m writing a &ldquo;head -n 10&rdquo; blog post, so it&rsquo;s basically a license to be a complete ass.</p>\n\n<p>Yeah, it&rsquo;s that kinda day.  I think tomorrow, Imma eat a turkey.  So there.</p>\n\n<p>You probably know that npm can install stuff, publish stuff, remove\nstuff, and that it makes dependencies magically work.  You may even know that it\nruns without being burdened by unnecessary semicolons.</p>\n\n<p>If you&rsquo;re a node veteran, you may even already know about some of these\nlesser-known features.  But I&rsquo;m hoping that at least one of them is a bit\nsurprising, even for old timers and core node devs.</p>\n\n<h2>1: Handle multiple versions of the same thing at the same time</h2>\n\n<p>One of the reasons I wrote npm is that package managers put you in\ndependency hell, and I simply can&rsquo;t abide that.</p>\n\n<p>npm keeps all its installed packages organized in <code>name/version</code>\nfolders, and versions all the public stuff.  Then, one of them is\n&ldquo;active&rdquo; at any given time in the global space.  (That&rsquo;s what you&rsquo;ll see\nif you install multiple versions of &ldquo;foo&rdquo; and then drop into the repl and\ndo <code>require(\"foo\")</code>.)</p>\n\n<p>But here&rsquo;s where it gets cool:  Let&rsquo;s say that you installed <code>foo@1.0.0</code>\nand <code>foo@2.0.0</code>.  Now, you have <code>bar@1.0.0</code> that depends on <code>foo@1.0.0</code>,\nand <code>baz@1.0.0</code> that depends on <code>foo@2.0.0</code>, and <code>quux@1.0.0</code> that\ndepends on <code>bar</code> and <code>baz</code>.</p>\n\n<p>Here&rsquo;s a diagram:</p>\n\n<pre><code>quux@1.0.0\n|\n+-- bar@1.0.0\n|   |\n|   `-- foo@1.0.0 \\\n|                  \\\n`-- baz@1.0.0       &gt; Conflict?\n    |              /\n    `-- foo@2.0.0 /\n</code></pre>\n\n<p>In most package manager systems, quux would simply never be installable.\nIt needs two packages that can&rsquo;t coexist because they have competing\ndependencies.  Or, you&rsquo;d have to name things stupidly, and bar and\nbaz would have tobe aware of one another.</p>\n\n<p>npm handles that all for you.  Try it.  It works.</p>\n\n<p>It&rsquo;s <strong>MAGIC</strong>.  (Also, it&rsquo;s the commonjs module system&rsquo;s built in\nseparation of scope that doesn&rsquo;t require that the path be a single\nconsistent thing.)</p>\n\n<h2>2: Be gone at runtime</h2>\n\n<p>npm doesn&rsquo;t load your modules.  It installs them.  Then you can even do\n<code>npm rm npm</code> and it&rsquo;ll remove itself.  All the modules you installed?\nYeah, they still work.</p>\n\n<p>It does this by setting up things in the proper places so that node&rsquo;s\nvery simple module loader can find them when it needs them.</p>\n\n<p>Most package managers are sort of hybrid loader/installer things.  npm\nis first and foremost a dependency manager.  It puts things in place,\nand then ducks out of the way so that it&rsquo;s not all in your face telling\nyou how to write your programs.</p>\n\n<h2>3: Structure your program any way you want</h2>\n\n<p>&hellip;provided, of course, you describe that structure in a package.json\nfile.</p>\n\n<p>That is, you can put all your node modules in a folder called &ldquo;src&rdquo; or\n&ldquo;lib&rdquo; or &ldquo;path/to/my/awesome/modules&rdquo;.  npm doesn&rsquo;t care.  In fact, it\ndoesn&rsquo;t even need to be a node program.  If you can describe the package\nin a package.json file, you can install <em>literally anything</em>.  I&rsquo;m\nwaiting for people to figure this out, and see something awful and\nhideous like <code>npm install vim</code>.</p>\n\n<p>A lot of people have objected to this feature.  They called me crazy and\nsaid that we need to form a committee and decide on a set of\nconventions.  Some even went so far as to pound fists on tables, and\ndeclare that madness will surely result from my freewheeling insanity!</p>\n\n<p>To them, I say, HA!  JavaScript is at its heart an anarchic language,\nforged in the great battles of Browsers, lit by the flicker of a\nthousand animated gifs depicting construction workers.  It bears many\nscars from those dark days, but it also resulted in a strong and vibrant\ncommunity, all of whom have strong opinions and found their way here\nbecause they could not agree on much of anything.</p>\n\n<p>npm welcomes your strife.  Like JavaScript itself, it doesn&rsquo;t judge you.</p>\n\n<p>Read through <code>npm help json</code> to learn what you can put in your\npackage.json file.</p>\n\n<h2>4: Start a package.json file for you</h2>\n\n<p>If you run <code>npm init</code> in a folder, it&rsquo;ll ask you a few questions, and\nthen write out a package.json file.</p>\n\n<p>The init command is pretty new, and doesn&rsquo;t do much.  But sometimes all\nyou need is a little nudge to get started.</p>\n\n<h2>5: Verify sha1 hashes of packages</h2>\n\n<p>As of version 0.2.9, sha hashes get generated for all packages as they\nget published, and then are verified after being downloaded.</p>\n\n<p>Checksumming is one of those things where everyone feels a little safer\nknowing it&rsquo;s there, but no one usually pays much attention to it.  When\nit works, it&rsquo;s silent, and that&rsquo;s great.</p>\n\n<p>The good news is that, now, if there&rsquo;s some kind of error downloading\nsomething, or if something gets corrupted in transit in any other way,\nthen npm will stubbornly refuse to proceed.</p>\n\n<p>(You have to compile node with openssl crypto support for this to work.)</p>\n\n<h2>6: Shut The Hell Up</h2>\n\n<p>Sometimes you just need to show your packager who&rsquo;s boss.  &ldquo;Shutting up&rdquo; is a feature.  By\nsetting the <code>loglevel</code> config, you can make npm anywhere from completely\nsilent to ludicrously noisy.  The levels are: silent, win, error, warn,\ninfo, verbose, and silly.</p>\n\n<ul><li>silent: completely silent.  Zero logging output.</li>\n<li>win: Just the &ldquo;npm ok&rdquo; or &ldquo;npm not ok&rdquo; message at the end.</li>\n<li>error: When something unexpected and bad happens.</li>\n<li>warn: When something odd or potentially dangerous is happening.</li>\n<li>info: Helpful information so you can track what&rsquo;s happening.</li>\n<li>verbose: Even more.  Perhaps just a wee bit obnoxious, even.</li>\n<li>silly: Completely fuckin crazy, man.  Dump everything.  Whole objects,\nyou name it, whatever.</li>\n</ul><p>Like any configuration option, you can set the loglevel in a few ways.\nTo set it for just one command just add <code>--loglevel silent</code> to the\ncommand.  This is particularly handy if something breaks, and you want\nto provide a bit more debugging output with <code>--loglevel verbose</code>.</p>\n\n<p>To set it for your user account, you can do <code>npm config set loglevel\nwin</code>.</p>\n\n<p>To set it globally for all users on the machine, you can do <code>npm config\nset loglevel info --global</code>.</p>\n\n<p>You can also set it in the environment if that floats your boat.  Any\nconfig option can be set by the <code>npm_config_&lt;blerg&gt;</code> environ, so doing\n<code>export npm_config_loglevel=verbose</code> will affect all subsequent npm\ncommands.</p>\n\n<p>Oh, and if those <code>npm config set</code> and <code>npm config get</code> commands get\ntedious, you can just do <code>npm c edit</code> to open up the config in your\nfavorite editor.</p>\n\n<p>See <code>npm help config</code> for more info.</p>\n\n<h2>7: Abbreviate commands</h2>\n\n<p>If you&rsquo;re anything like me, then you drink a lot of coffee, hate extra typing,\nand are awesome.  But mostly the typing.  Let&rsquo;s focus on that.</p>\n\n<p>Is &ldquo;install&rdquo; just too long for you?  Try <code>npm inst connect</code>.  Bam.  Done.</p>\n\n<p>Anything that is unambiguous will work just as well.  I don&rsquo;t have this\nlogic implemented for arguments and package names, but that&rsquo;s on the\nroadmap.  It uses the <code>abbrev</code> program, and you can use it in your\nprograms, too.  <code>npm i abbrev</code> to get it.</p>\n\n<p>The most common commands even have super short shorthands, because I\nlove you.</p>\n\n<ul><li>i: install</li>\n<li>r, rm: uninstall</li>\n<li>ln: link</li>\n<li>ls: list</li>\n<li>bn: bundle</li>\n<li>up: update</li>\n<li>c: config</li>\n</ul><p>If you think it stops there, you&rsquo;re wrong.  So wrong.  Go sit in the\ncorner.</p>\n\n<p>In the npm source folder, there&rsquo;s a file called <code>npm-completion.sh</code>.\nSource that bad boy in your bashrc or whatever, and you&rsquo;ve got tab\ncompletion.</p>\n\n<p><em>Tab completion!</em>  The <abbr title=\"Yeah, I know what penultimate means,\nhold on a second\">penultimate</abbr> feature of any unix program, <abbr title=\"see?\">second only to</abbr> tab completion that works and is\nhelpful!</p>\n\n<p>This is where you come in.  Check out what it&rsquo;s doing.  Dig into the\ncode.  Make it better.  Right now it can just tab-complete npm commands,\nnot package names or other useful things.  But if you hack away on the\n<code>lib/completion.js</code> file, you can make it awesomer.</p>\n\n<h2>8: Get help on <em>anything</em></h2>\n\n<p>npm has a ton of documentation.  In fact, the biggest documentation\nproblem at the moment in npm is that there&rsquo;s too much of it, and it&rsquo;s\nprobably impossible for any non-robot to read all if it in a reasonable\namount of time.</p>\n\n<p>In case you&rsquo;re not a robot, here&rsquo;s how you can get the most out of the\ndocs:</p>\n\n<ol><li>run <code>npm</code> without any arguments.  This&rsquo;ll show you what you can do.\nIt lists out the commands and the help topics.</li>\n<li>run <code>npm command -h</code> to quickly view the arguments that command\nexpects.  This is handy when you forget how to do something that you\nknew how to do, and you just need to remember how you did it.</li>\n<li>run <code>npm help &lt;topic&gt;</code> to get more detailed manpage-style\ndocumentation.  For general info about npm itself, you can run <code>npm\nhelp npm</code>.  This page has a few pointers based on your use cases.\nCheck it out.</li>\n</ol><h2>9: View specific fields on published packages</h2>\n\n<p>The <code>npm view</code> command was pretty lame for a while.  Basically it just\nfetched data from the registry and then dumped it to the terminal.  But\nnow, it&rsquo;s so much more.</p>\n\n<p>Specify a package name (in the form of <code>name@version</code> or <code>name@latest</code>\nor <code>name</code> or even <code>name@\"&gt;=1.2.3\"</code> for ranges), and optionally one or\nmore fields, and it&rsquo;ll pull just those fields out and show them to you.</p>\n\n<p>It operates smartly on arrays, and parses out the <code>url</code> and <code>email</code>\nfields from contributors and author names.  So, if you do this:</p>\n\n<pre><code>npm view npm contributors.name\n</code></pre>\n\n<p>then you&rsquo;ll get a list of all the contributor names in npm.  If you just\ndo:</p>\n\n<pre><code>npm view npm contributors\n</code></pre>\n\n<p>then you&rsquo;ll see the list of contributors in the <code>\"name (url) &lt;email&gt;\"</code>\nformat.</p>\n\n<h2>10: Bump your package version FOR YOU OMG HOLY CRAP WHAT!?</h2>\n\n<p>Yeah.  That&rsquo;s right.</p>\n\n<p>It&rsquo;ll even commit the change, and tag it for you, if you do it in a git\nrepo.  Just run:</p>\n\n<pre><code>npm version 1.2.3\n</code></pre>\n\n<p>It&rsquo;ll open up your package.json file, change the version to 1.2.3, <code>git\nadd</code> it, <code>git commit</code> it, and <code>git tag v1.2.3</code> it.</p>\n\n<p>If your git repository is unclean, then it&rsquo;ll recoil in horror at the\ndirty, and tell you to get your act together.  (Of course, if you&rsquo;re not\nusing git, then it won&rsquo;t do the git stuff.  It&rsquo;ll just change the json\nand write it back to package.json.)</p>\n\n<h2>11: Bundle all your dependencies into the package itself</h2>\n\n<p>When you use the <code>npm bundle</code> command, npm will put all your\ndependencies into the <code>node_modules</code> folder in your package.  But it\ndoesn&rsquo;t stop there.</p>\n\n<p>If you want to depend on something that&rsquo;s not on the registry, you can\ndo that.  Just do this:</p>\n\n<pre><code>npm bundle install <a href=\"http://github.com/whoever/whatever/tarball/master\">http://github.com/whoever/whatever/tarball/master</a>\n</code></pre>\n\n<p>This will install the contents of that tarball into the bundle, and then\nyou can list it as a dependency, and it won&rsquo;t try to install it when\nyour package gets installed.</p>\n\n<p>This also is handy if you have your own fork of something, and would\nprefer not to change the name.</p>\n\n<p>In fact, you can run almost any npm command at the bundle.  To see\nwhat&rsquo;s inside, you can do <code>npm bundle ls</code>.  To remove something, do <code>npm\nbundle rm thing</code>.  And, of course, you can install multiple versions and\nactivate the one you want.</p>\n\n<h2>12: Change the very laws of mathematics itself!!</h2>\n\n<p>There are 13 things in this list of 10 things.</p>\n\n<p>npm IS JUST THAT AWESOME.</p>\n\n<h2>13: Always be lowercase</h2>\n\n<p>If you see npm referred to as &ldquo;NPM&rdquo; anywhere except right there in this\nsentence, then you know that I didn&rsquo;t write it.  &ldquo;NPM&rdquo; is the <a href=\"http://npm.org\">National Association of Pastoral Musicians</a>.\nIf you need some church music, use NPM.  If you want node packages\ninstalled, then you need <a href=\"http://npmjs.org/\">npm</a>.</p>\n\n<h2>Other things that didn&rsquo;t make this list because they were too common or not awesome enough</h2>\n\n<ol><li>Cache registry requests using etags.</li>\n<li>Run arbitrary scripts to start, stop, restart, and test packages.</li>\n<li>Set deprecation messages to keep people from using old versions of\nyour stuff.</li>\n<li>compile node addons automatically if it sees a wscript file.</li>\n<li>rebuild packages in a single command so that you can easily keep up\nwith node ABI changes.  <code>npm rebuild</code></li>\n<li>Manage owners of a project with the <code>npm owner</code> command.</li>\n<li>Edit package contents.  See <code>npm edit</code>.  (When used as <code>npm bundle\nedit</code> it&rsquo;s especially handy.)</li>\n<li>Be used as a library in node programs.  (Check the readme for a quick how-to, or <code>cli.js</code> for an example of using npm programmatically.)</li>\n</ol><p>Happy Thanksgiving, Americans.  And non-Americans, Happy Random Thursday When All Your American Friends Are Not Online Much!</p>",
    "can_like": false,
    "can_reblog": false,
    "can_reply": false,
    "can_send_in_message": true,
    "date": "2010-11-25 01:22:00 GMT",
    "display_avatar": true,
    "format": "markdown",
    "id": 1675072029,
    "is_blocks_post_format": false,
    "note_count": 106,
    "post_url": "http://blog.izs.me/post/1675072029/10-cool-things-you-probably-didnt-realize-npm",
    "reblog": {
        "comment": "<p><strong>OMG UPDAET!</strong> <small>2011-06-19</small></p>\n\n<p>Some of this is no longer 100% accurate, which shouldn\u2019t be very surprising, since it was written 7 months ago, and npm had a major version update since then.</p>\n\n<p>Check out <a href=\"http://blog.nodejs.org/category/npm\">the node blog</a> for some of the 1.0 changes.</p>\n\n<hr><p>npm is the node package manager.  Once upon a time, I would have said\n\u201ca\u201d node package manager, and the humbler part of me would like to\npretend that that\u2019s still the case, but SCREW THAT HUMBLER SIDE, I\u2019m\nfeeling egotistical and braggy today, so today it\u2019s <strong>THE</strong> node package\nmanager.</p>\n\n<p>Also, I\u2019m writing a \u201chead -n 10\u201d blog post, so it\u2019s basically a license to be a complete ass.</p>\n\n<p>Yeah, it\u2019s that kinda day.  I think tomorrow, Imma eat a turkey.  So there.</p>\n\n<p>You probably know that npm can install stuff, publish stuff, remove\nstuff, and that it makes dependencies magically work.  You may even know that it\nruns without being burdened by unnecessary semicolons.</p>\n\n<p>If you\u2019re a node veteran, you may even already know about some of these\nlesser-known features.  But I\u2019m hoping that at least one of them is a bit\nsurprising, even for old timers and core node devs.</p>\n\n<h2>1: Handle multiple versions of the same thing at the same time</h2>\n\n<p>One of the reasons I wrote npm is that package managers put you in\ndependency hell, and I simply can\u2019t abide that.</p>\n\n<p>npm keeps all its installed packages organized in <code>name/version</code>\nfolders, and versions all the public stuff.  Then, one of them is\n\u201cactive\u201d at any given time in the global space.  (That\u2019s what you\u2019ll see\nif you install multiple versions of \u201cfoo\u201d and then drop into the repl and\ndo <code>require(\"foo\")</code>.)</p>\n\n<p>But here\u2019s where it gets cool:  Let\u2019s say that you installed <code>foo@1.0.0</code>\nand <code>foo@2.0.0</code>.  Now, you have <code>bar@1.0.0</code> that depends on <code>foo@1.0.0</code>,\nand <code>baz@1.0.0</code> that depends on <code>foo@2.0.0</code>, and <code>quux@1.0.0</code> that\ndepends on <code>bar</code> and <code>baz</code>.</p>\n\n<p>Here\u2019s a diagram:</p>\n\n<pre><code>quux@1.0.0\n|\n+-- bar@1.0.0\n|   |\n|   `-- foo@1.0.0 \\\n|                  \\\n`-- baz@1.0.0       &gt; Conflict?\n    |              /\n    `-- foo@2.0.0 /\n</code></pre>\n\n<p>In most package manager systems, quux would simply never be installable.\nIt needs two packages that can\u2019t coexist because they have competing\ndependencies.  Or, you\u2019d have to name things stupidly, and bar and\nbaz would have tobe aware of one another.</p>\n\n<p>npm handles that all for you.  Try it.  It works.</p>\n\n<p>It\u2019s <strong>MAGIC</strong>.  (Also, it\u2019s the commonjs module system\u2019s built in\nseparation of scope that doesn\u2019t require that the path be a single\nconsistent thing.)</p>\n\n<h2>2: Be gone at runtime</h2>\n\n<p>npm doesn\u2019t load your modules.  It installs them.  Then you can even do\n<code>npm rm npm</code> and it\u2019ll remove itself.  All the modules you installed?\nYeah, they still work.</p>\n\n<p>It does this by setting up things in the proper places so that node\u2019s\nvery simple module loader can find them when it needs them.</p>\n\n<p>Most package managers are sort of hybrid loader/installer things.  npm\nis first and foremost a dependency manager.  It puts things in place,\nand then ducks out of the way so that it\u2019s not all in your face telling\nyou how to write your programs.</p>\n\n<h2>3: Structure your program any way you want</h2>\n\n<p>\u2026provided, of course, you describe that structure in a package.json\nfile.</p>\n\n<p>That is, you can put all your node modules in a folder called \u201csrc\u201d or\n\u201clib\u201d or \u201cpath/to/my/awesome/modules\u201d.  npm doesn\u2019t care.  In fact, it\ndoesn\u2019t even need to be a node program.  If you can describe the package\nin a package.json file, you can install <em>literally anything</em>.  I\u2019m\nwaiting for people to figure this out, and see something awful and\nhideous like <code>npm install vim</code>.</p>\n\n<p>A lot of people have objected to this feature.  They called me crazy and\nsaid that we need to form a committee and decide on a set of\nconventions.  Some even went so far as to pound fists on tables, and\ndeclare that madness will surely result from my freewheeling insanity!</p>\n\n<p>To them, I say, HA!  JavaScript is at its heart an anarchic language,\nforged in the great battles of Browsers, lit by the flicker of a\nthousand animated gifs depicting construction workers.  It bears many\nscars from those dark days, but it also resulted in a strong and vibrant\ncommunity, all of whom have strong opinions and found their way here\nbecause they could not agree on much of anything.</p>\n\n<p>npm welcomes your strife.  Like JavaScript itself, it doesn\u2019t judge you.</p>\n\n<p>Read through <code>npm help json</code> to learn what you can put in your\npackage.json file.</p>\n\n<h2>4: Start a package.json file for you</h2>\n\n<p>If you run <code>npm init</code> in a folder, it\u2019ll ask you a few questions, and\nthen write out a package.json file.</p>\n\n<p>The init command is pretty new, and doesn\u2019t do much.  But sometimes all\nyou need is a little nudge to get started.</p>\n\n<h2>5: Verify sha1 hashes of packages</h2>\n\n<p>As of version 0.2.9, sha hashes get generated for all packages as they\nget published, and then are verified after being downloaded.</p>\n\n<p>Checksumming is one of those things where everyone feels a little safer\nknowing it\u2019s there, but no one usually pays much attention to it.  When\nit works, it\u2019s silent, and that\u2019s great.</p>\n\n<p>The good news is that, now, if there\u2019s some kind of error downloading\nsomething, or if something gets corrupted in transit in any other way,\nthen npm will stubbornly refuse to proceed.</p>\n\n<p>(You have to compile node with openssl crypto support for this to work.)</p>\n\n<h2>6: Shut The Hell Up</h2>\n\n<p>Sometimes you just need to show your packager who\u2019s boss.  \u201cShutting up\u201d is a feature.  By\nsetting the <code>loglevel</code> config, you can make npm anywhere from completely\nsilent to ludicrously noisy.  The levels are: silent, win, error, warn,\ninfo, verbose, and silly.</p>\n\n<ul><li>silent: completely silent.  Zero logging output.</li>\n<li>win: Just the \u201cnpm ok\u201d or \u201cnpm not ok\u201d message at the end.</li>\n<li>error: When something unexpected and bad happens.</li>\n<li>warn: When something odd or potentially dangerous is happening.</li>\n<li>info: Helpful information so you can track what\u2019s happening.</li>\n<li>verbose: Even more.  Perhaps just a wee bit obnoxious, even.</li>\n<li>silly: Completely fuckin crazy, man.  Dump everything.  Whole objects,\nyou name it, whatever.</li>\n</ul><p>Like any configuration option, you can set the loglevel in a few ways.\nTo set it for just one command just add <code>--loglevel silent</code> to the\ncommand.  This is particularly handy if something breaks, and you want\nto provide a bit more debugging output with <code>--loglevel verbose</code>.</p>\n\n<p>To set it for your user account, you can do <code>npm config set loglevel\nwin</code>.</p>\n\n<p>To set it globally for all users on the machine, you can do <code>npm config\nset loglevel info --global</code>.</p>\n\n<p>You can also set it in the environment if that floats your boat.  Any\nconfig option can be set by the <code>npm_config_&lt;blerg&gt;</code> environ, so doing\n<code>export npm_config_loglevel=verbose</code> will affect all subsequent npm\ncommands.</p>\n\n<p>Oh, and if those <code>npm config set</code> and <code>npm config get</code> commands get\ntedious, you can just do <code>npm c edit</code> to open up the config in your\nfavorite editor.</p>\n\n<p>See <code>npm help config</code> for more info.</p>\n\n<h2>7: Abbreviate commands</h2>\n\n<p>If you\u2019re anything like me, then you drink a lot of coffee, hate extra typing,\nand are awesome.  But mostly the typing.  Let\u2019s focus on that.</p>\n\n<p>Is \u201cinstall\u201d just too long for you?  Try <code>npm inst connect</code>.  Bam.  Done.</p>\n\n<p>Anything that is unambiguous will work just as well.  I don\u2019t have this\nlogic implemented for arguments and package names, but that\u2019s on the\nroadmap.  It uses the <code>abbrev</code> program, and you can use it in your\nprograms, too.  <code>npm i abbrev</code> to get it.</p>\n\n<p>The most common commands even have super short shorthands, because I\nlove you.</p>\n\n<ul><li>i: install</li>\n<li>r, rm: uninstall</li>\n<li>ln: link</li>\n<li>ls: list</li>\n<li>bn: bundle</li>\n<li>up: update</li>\n<li>c: config</li>\n</ul><p>If you think it stops there, you\u2019re wrong.  So wrong.  Go sit in the\ncorner.</p>\n\n<p>In the npm source folder, there\u2019s a file called <code>npm-completion.sh</code>.\nSource that bad boy in your bashrc or whatever, and you\u2019ve got tab\ncompletion.</p>\n\n<p><em>Tab completion!</em>  The <abbr title=\"Yeah, I know what penultimate means,\nhold on a second\">penultimate</abbr> feature of any unix program, <abbr title=\"see?\">second only to</abbr> tab completion that works and is\nhelpful!</p>\n\n<p>This is where you come in.  Check out what it\u2019s doing.  Dig into the\ncode.  Make it better.  Right now it can just tab-complete npm commands,\nnot package names or other useful things.  But if you hack away on the\n<code>lib/completion.js</code> file, you can make it awesomer.</p>\n\n<h2>8: Get help on <em>anything</em></h2>\n\n<p>npm has a ton of documentation.  In fact, the biggest documentation\nproblem at the moment in npm is that there\u2019s too much of it, and it\u2019s\nprobably impossible for any non-robot to read all if it in a reasonable\namount of time.</p>\n\n<p>In case you\u2019re not a robot, here\u2019s how you can get the most out of the\ndocs:</p>\n\n<ol><li>run <code>npm</code> without any arguments.  This\u2019ll show you what you can do.\nIt lists out the commands and the help topics.</li>\n<li>run <code>npm command -h</code> to quickly view the arguments that command\nexpects.  This is handy when you forget how to do something that you\nknew how to do, and you just need to remember how you did it.</li>\n<li>run <code>npm help &lt;topic&gt;</code> to get more detailed manpage-style\ndocumentation.  For general info about npm itself, you can run <code>npm\nhelp npm</code>.  This page has a few pointers based on your use cases.\nCheck it out.</li>\n</ol><h2>9: View specific fields on published packages</h2>\n\n<p>The <code>npm view</code> command was pretty lame for a while.  Basically it just\nfetched data from the registry and then dumped it to the terminal.  But\nnow, it\u2019s so much more.</p>\n\n<p>Specify a package name (in the form of <code>name@version</code> or <code>name@latest</code>\nor <code>name</code> or even <code>name@\"&gt;=1.2.3\"</code> for ranges), and optionally one or\nmore fields, and it\u2019ll pull just those fields out and show them to you.</p>\n\n<p>It operates smartly on arrays, and parses out the <code>url</code> and <code>email</code>\nfields from contributors and author names.  So, if you do this:</p>\n\n<pre><code>npm view npm contributors.name\n</code></pre>\n\n<p>then you\u2019ll get a list of all the contributor names in npm.  If you just\ndo:</p>\n\n<pre><code>npm view npm contributors\n</code></pre>\n\n<p>then you\u2019ll see the list of contributors in the <code>\"name (url) &lt;email&gt;\"</code>\nformat.</p>\n\n<h2>10: Bump your package version FOR YOU OMG HOLY CRAP WHAT!?</h2>\n\n<p>Yeah.  That\u2019s right.</p>\n\n<p>It\u2019ll even commit the change, and tag it for you, if you do it in a git\nrepo.  Just run:</p>\n\n<pre><code>npm version 1.2.3\n</code></pre>\n\n<p>It\u2019ll open up your package.json file, change the version to 1.2.3, <code>git\nadd</code> it, <code>git commit</code> it, and <code>git tag v1.2.3</code> it.</p>\n\n<p>If your git repository is unclean, then it\u2019ll recoil in horror at the\ndirty, and tell you to get your act together.  (Of course, if you\u2019re not\nusing git, then it won\u2019t do the git stuff.  It\u2019ll just change the json\nand write it back to package.json.)</p>\n\n<h2>11: Bundle all your dependencies into the package itself</h2>\n\n<p>When you use the <code>npm bundle</code> command, npm will put all your\ndependencies into the <code>node_modules</code> folder in your package.  But it\ndoesn\u2019t stop there.</p>\n\n<p>If you want to depend on something that\u2019s not on the registry, you can\ndo that.  Just do this:</p>\n\n<pre><code>npm bundle install <a href=\"http://github.com/whoever/whatever/tarball/master\">http://github.com/whoever/whatever/tarball/master</a>\n</code></pre>\n\n<p>This will install the contents of that tarball into the bundle, and then\nyou can list it as a dependency, and it won\u2019t try to install it when\nyour package gets installed.</p>\n\n<p>This also is handy if you have your own fork of something, and would\nprefer not to change the name.</p>\n\n<p>In fact, you can run almost any npm command at the bundle.  To see\nwhat\u2019s inside, you can do <code>npm bundle ls</code>.  To remove something, do <code>npm\nbundle rm thing</code>.  And, of course, you can install multiple versions and\nactivate the one you want.</p>\n\n<h2>12: Change the very laws of mathematics itself!!</h2>\n\n<p>There are 13 things in this list of 10 things.</p>\n\n<p>npm IS JUST THAT AWESOME.</p>\n\n<h2>13: Always be lowercase</h2>\n\n<p>If you see npm referred to as \u201cNPM\u201d anywhere except right there in this\nsentence, then you know that I didn\u2019t write it.  \u201cNPM\u201d is the <a href=\"http://npm.org\">National Association of Pastoral Musicians</a>.\nIf you need some church music, use NPM.  If you want node packages\ninstalled, then you need <a href=\"http://npmjs.org/\">npm</a>.</p>\n\n<h2>Other things that didn\u2019t make this list because they were too common or not awesome enough</h2>\n\n<ol><li>Cache registry requests using etags.</li>\n<li>Run arbitrary scripts to start, stop, restart, and test packages.</li>\n<li>Set deprecation messages to keep people from using old versions of\nyour stuff.</li>\n<li>compile node addons automatically if it sees a wscript file.</li>\n<li>rebuild packages in a single command so that you can easily keep up\nwith node ABI changes.  <code>npm rebuild</code></li>\n<li>Manage owners of a project with the <code>npm owner</code> command.</li>\n<li>Edit package contents.  See <code>npm edit</code>.  (When used as <code>npm bundle\nedit</code> it\u2019s especially handy.)</li>\n<li>Be used as a library in node programs.  (Check the readme for a quick how-to, or <code>cli.js</code> for an example of using npm programmatically.)</li>\n</ol><p>Happy Thanksgiving, Americans.  And non-Americans, Happy Random Thursday When All Your American Friends Are Not Online Much!</p>",
        "tree_html": ""
    },
    "reblog_key": "itUZGf5X",
    "recommended_color": null,
    "recommended_source": null,
    "short_url": "https://tmblr.co/Z7nwWy1Zrv8T",
    "slug": "10-cool-things-you-probably-didnt-realize-npm",
    "state": "published",
    "summary": "10 Cool Things You Probably Didn't Realize npm Could Do",
    "tags": [],
    "timestamp": 1290648120,
    "title": "10 Cool Things You Probably Didn't Realize npm Could Do",
    "trail": [
        {
            "blog": {
                "active": true,
                "can_be_followed": true,
                "name": "izs",
                "share_following": false,
                "share_likes": false,
                "theme": {
                    "avatar_shape": "square",
                    "background_color": "#444444",
                    "body_font": "Helvetica Neue",
                    "header_bounds": "978,2448,2355,0",
                    "header_focus_height": 1152,
                    "header_focus_width": 2048,
                    "header_full_height": 3264,
                    "header_full_width": 2448,
                    "header_image": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o.jpg",
                    "header_image_focused": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/mA1nbvglg/tumblr_static_tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_focused_v3.jpg",
                    "header_image_scaled": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_2048_v2.jpg",
                    "header_stretch": true,
                    "link_color": "#FB4C16",
                    "show_avatar": true,
                    "show_description": true,
                    "show_header_image": true,
                    "show_title": true,
                    "title_color": "#fb4c16",
                    "title_font": "Gibson",
                    "title_font_weight": "regular"
                }
            },
            "content": "<p><strong>OMG UPDAET!</strong> <small>2011-06-19</small></p>\n\n<p>Some of this is no longer 100% accurate, which shouldn&rsquo;t be very surprising, since it was written 7 months ago, and npm had a major version update since then.</p>\n\n<p>Check out <a href=\"http://blog.nodejs.org/category/npm\">the node blog</a> for some of the 1.0 changes.</p>\n\n<hr /><p>npm is the node package manager.  Once upon a time, I would have said\n&ldquo;a&rdquo; node package manager, and the humbler part of me would like to\npretend that that&rsquo;s still the case, but SCREW THAT HUMBLER SIDE, I&rsquo;m\nfeeling egotistical and braggy today, so today it&rsquo;s <strong>THE</strong> node package\nmanager.</p>\n\n<p>Also, I&rsquo;m writing a &ldquo;head -n 10&rdquo; blog post, so it&rsquo;s basically a license to be a complete ass.</p>\n\n<p>Yeah, it&rsquo;s that kinda day.  I think tomorrow, Imma eat a turkey.  So there.</p>\n\n<p>You probably know that npm can install stuff, publish stuff, remove\nstuff, and that it makes dependencies magically work.  You may even know that it\nruns without being burdened by unnecessary semicolons.</p>\n\n<p>If you&rsquo;re a node veteran, you may even already know about some of these\nlesser-known features.  But I&rsquo;m hoping that at least one of them is a bit\nsurprising, even for old timers and core node devs.</p>\n\n<h2>1: Handle multiple versions of the same thing at the same time</h2>\n\n<p>One of the reasons I wrote npm is that package managers put you in\ndependency hell, and I simply can&rsquo;t abide that.</p>\n\n<p>npm keeps all its installed packages organized in <code>name/version</code>\nfolders, and versions all the public stuff.  Then, one of them is\n&ldquo;active&rdquo; at any given time in the global space.  (That&rsquo;s what you&rsquo;ll see\nif you install multiple versions of &ldquo;foo&rdquo; and then drop into the repl and\ndo <code>require(\"foo\")</code>.)</p>\n\n<p>But here&rsquo;s where it gets cool:  Let&rsquo;s say that you installed <code>foo@1.0.0</code>\nand <code>foo@2.0.0</code>.  Now, you have <code>bar@1.0.0</code> that depends on <code>foo@1.0.0</code>,\nand <code>baz@1.0.0</code> that depends on <code>foo@2.0.0</code>, and <code>quux@1.0.0</code> that\ndepends on <code>bar</code> and <code>baz</code>.</p>\n\n<p>Here&rsquo;s a diagram:</p>\n\n<pre><code>quux@1.0.0\n|\n+-- bar@1.0.0\n|   |\n|   `-- foo@1.0.0 \\\n|                  \\\n`-- baz@1.0.0       &gt; Conflict?\n    |              /\n    `-- foo@2.0.0 /\n</code></pre>\n\n<p>In most package manager systems, quux would simply never be installable.\nIt needs two packages that can&rsquo;t coexist because they have competing\ndependencies.  Or, you&rsquo;d have to name things stupidly, and bar and\nbaz would have tobe aware of one another.</p>\n\n<p>npm handles that all for you.  Try it.  It works.</p>\n\n<p>It&rsquo;s <strong>MAGIC</strong>.  (Also, it&rsquo;s the commonjs module system&rsquo;s built in\nseparation of scope that doesn&rsquo;t require that the path be a single\nconsistent thing.)</p>\n\n<h2>2: Be gone at runtime</h2>\n\n<p>npm doesn&rsquo;t load your modules.  It installs them.  Then you can even do\n<code>npm rm npm</code> and it&rsquo;ll remove itself.  All the modules you installed?\nYeah, they still work.</p>\n\n<p>It does this by setting up things in the proper places so that node&rsquo;s\nvery simple module loader can find them when it needs them.</p>\n\n<p>Most package managers are sort of hybrid loader/installer things.  npm\nis first and foremost a dependency manager.  It puts things in place,\nand then ducks out of the way so that it&rsquo;s not all in your face telling\nyou how to write your programs.</p>\n\n<h2>3: Structure your program any way you want</h2>\n\n<p>&hellip;provided, of course, you describe that structure in a package.json\nfile.</p>\n\n<p>That is, you can put all your node modules in a folder called &ldquo;src&rdquo; or\n&ldquo;lib&rdquo; or &ldquo;path/to/my/awesome/modules&rdquo;.  npm doesn&rsquo;t care.  In fact, it\ndoesn&rsquo;t even need to be a node program.  If you can describe the package\nin a package.json file, you can install <em>literally anything</em>.  I&rsquo;m\nwaiting for people to figure this out, and see something awful and\nhideous like <code>npm install vim</code>.</p>\n\n<p>A lot of people have objected to this feature.  They called me crazy and\nsaid that we need to form a committee and decide on a set of\nconventions.  Some even went so far as to pound fists on tables, and\ndeclare that madness will surely result from my freewheeling insanity!</p>\n\n<p>To them, I say, HA!  JavaScript is at its heart an anarchic language,\nforged in the great battles of Browsers, lit by the flicker of a\nthousand animated gifs depicting construction workers.  It bears many\nscars from those dark days, but it also resulted in a strong and vibrant\ncommunity, all of whom have strong opinions and found their way here\nbecause they could not agree on much of anything.</p>\n\n<p>npm welcomes your strife.  Like JavaScript itself, it doesn&rsquo;t judge you.</p>\n\n<p>Read through <code>npm help json</code> to learn what you can put in your\npackage.json file.</p>\n\n<h2>4: Start a package.json file for you</h2>\n\n<p>If you run <code>npm init</code> in a folder, it&rsquo;ll ask you a few questions, and\nthen write out a package.json file.</p>\n\n<p>The init command is pretty new, and doesn&rsquo;t do much.  But sometimes all\nyou need is a little nudge to get started.</p>\n\n<h2>5: Verify sha1 hashes of packages</h2>\n\n<p>As of version 0.2.9, sha hashes get generated for all packages as they\nget published, and then are verified after being downloaded.</p>\n\n<p>Checksumming is one of those things where everyone feels a little safer\nknowing it&rsquo;s there, but no one usually pays much attention to it.  When\nit works, it&rsquo;s silent, and that&rsquo;s great.</p>\n\n<p>The good news is that, now, if there&rsquo;s some kind of error downloading\nsomething, or if something gets corrupted in transit in any other way,\nthen npm will stubbornly refuse to proceed.</p>\n\n<p>(You have to compile node with openssl crypto support for this to work.)</p>\n\n<h2>6: Shut The Hell Up</h2>\n\n<p>Sometimes you just need to show your packager who&rsquo;s boss.  &ldquo;Shutting up&rdquo; is a feature.  By\nsetting the <code>loglevel</code> config, you can make npm anywhere from completely\nsilent to ludicrously noisy.  The levels are: silent, win, error, warn,\ninfo, verbose, and silly.</p>\n\n<ul><li>silent: completely silent.  Zero logging output.</li>\n<li>win: Just the &ldquo;npm ok&rdquo; or &ldquo;npm not ok&rdquo; message at the end.</li>\n<li>error: When something unexpected and bad happens.</li>\n<li>warn: When something odd or potentially dangerous is happening.</li>\n<li>info: Helpful information so you can track what&rsquo;s happening.</li>\n<li>verbose: Even more.  Perhaps just a wee bit obnoxious, even.</li>\n<li>silly: Completely fuckin crazy, man.  Dump everything.  Whole objects,\nyou name it, whatever.</li>\n</ul><p>Like any configuration option, you can set the loglevel in a few ways.\nTo set it for just one command just add <code>--loglevel silent</code> to the\ncommand.  This is particularly handy if something breaks, and you want\nto provide a bit more debugging output with <code>--loglevel verbose</code>.</p>\n\n<p>To set it for your user account, you can do <code>npm config set loglevel\nwin</code>.</p>\n\n<p>To set it globally for all users on the machine, you can do <code>npm config\nset loglevel info --global</code>.</p>\n\n<p>You can also set it in the environment if that floats your boat.  Any\nconfig option can be set by the <code>npm_config_&lt;blerg&gt;</code> environ, so doing\n<code>export npm_config_loglevel=verbose</code> will affect all subsequent npm\ncommands.</p>\n\n<p>Oh, and if those <code>npm config set</code> and <code>npm config get</code> commands get\ntedious, you can just do <code>npm c edit</code> to open up the config in your\nfavorite editor.</p>\n\n<p>See <code>npm help config</code> for more info.</p>\n\n<h2>7: Abbreviate commands</h2>\n\n<p>If you&rsquo;re anything like me, then you drink a lot of coffee, hate extra typing,\nand are awesome.  But mostly the typing.  Let&rsquo;s focus on that.</p>\n\n<p>Is &ldquo;install&rdquo; just too long for you?  Try <code>npm inst connect</code>.  Bam.  Done.</p>\n\n<p>Anything that is unambiguous will work just as well.  I don&rsquo;t have this\nlogic implemented for arguments and package names, but that&rsquo;s on the\nroadmap.  It uses the <code>abbrev</code> program, and you can use it in your\nprograms, too.  <code>npm i abbrev</code> to get it.</p>\n\n<p>The most common commands even have super short shorthands, because I\nlove you.</p>\n\n<ul><li>i: install</li>\n<li>r, rm: uninstall</li>\n<li>ln: link</li>\n<li>ls: list</li>\n<li>bn: bundle</li>\n<li>up: update</li>\n<li>c: config</li>\n</ul><p>If you think it stops there, you&rsquo;re wrong.  So wrong.  Go sit in the\ncorner.</p>\n\n<p>In the npm source folder, there&rsquo;s a file called <code>npm-completion.sh</code>.\nSource that bad boy in your bashrc or whatever, and you&rsquo;ve got tab\ncompletion.</p>\n\n<p><em>Tab completion!</em>  The penultimate feature of any unix program, second only to tab completion that works and is\nhelpful!</p>\n\n<p>This is where you come in.  Check out what it&rsquo;s doing.  Dig into the\ncode.  Make it better.  Right now it can just tab-complete npm commands,\nnot package names or other useful things.  But if you hack away on the\n<code>lib/completion.js</code> file, you can make it awesomer.</p>\n\n<h2>8: Get help on <em>anything</em></h2>\n\n<p>npm has a ton of documentation.  In fact, the biggest documentation\nproblem at the moment in npm is that there&rsquo;s too much of it, and it&rsquo;s\nprobably impossible for any non-robot to read all if it in a reasonable\namount of time.</p>\n\n<p>In case you&rsquo;re not a robot, here&rsquo;s how you can get the most out of the\ndocs:</p>\n\n<ol><li>run <code>npm</code> without any arguments.  This&rsquo;ll show you what you can do.\nIt lists out the commands and the help topics.</li>\n<li>run <code>npm command -h</code> to quickly view the arguments that command\nexpects.  This is handy when you forget how to do something that you\nknew how to do, and you just need to remember how you did it.</li>\n<li>run <code>npm help &lt;topic&gt;</code> to get more detailed manpage-style\ndocumentation.  For general info about npm itself, you can run <code>npm\nhelp npm</code>.  This page has a few pointers based on your use cases.\nCheck it out.</li>\n</ol><h2>9: View specific fields on published packages</h2>\n\n<p>The <code>npm view</code> command was pretty lame for a while.  Basically it just\nfetched data from the registry and then dumped it to the terminal.  But\nnow, it&rsquo;s so much more.</p>\n\n<p>Specify a package name (in the form of <code>name@version</code> or <code>name@latest</code>\nor <code>name</code> or even <code>name@\"&gt;=1.2.3\"</code> for ranges), and optionally one or\nmore fields, and it&rsquo;ll pull just those fields out and show them to you.</p>\n\n<p>It operates smartly on arrays, and parses out the <code>url</code> and <code>email</code>\nfields from contributors and author names.  So, if you do this:</p>\n\n<pre><code>npm view npm contributors.name\n</code></pre>\n\n<p>then you&rsquo;ll get a list of all the contributor names in npm.  If you just\ndo:</p>\n\n<pre><code>npm view npm contributors\n</code></pre>\n\n<p>then you&rsquo;ll see the list of contributors in the <code>\"name (url) &lt;email&gt;\"</code>\nformat.</p>\n\n<h2>10: Bump your package version FOR YOU OMG HOLY CRAP WHAT!?</h2>\n\n<p>Yeah.  That&rsquo;s right.</p>\n\n<p>It&rsquo;ll even commit the change, and tag it for you, if you do it in a git\nrepo.  Just run:</p>\n\n<pre><code>npm version 1.2.3\n</code></pre>\n\n<p>It&rsquo;ll open up your package.json file, change the version to 1.2.3, <code>git\nadd</code> it, <code>git commit</code> it, and <code>git tag v1.2.3</code> it.</p>\n\n<p>If your git repository is unclean, then it&rsquo;ll recoil in horror at the\ndirty, and tell you to get your act together.  (Of course, if you&rsquo;re not\nusing git, then it won&rsquo;t do the git stuff.  It&rsquo;ll just change the json\nand write it back to package.json.)</p>\n\n<h2>11: Bundle all your dependencies into the package itself</h2>\n\n<p>When you use the <code>npm bundle</code> command, npm will put all your\ndependencies into the <code>node_modules</code> folder in your package.  But it\ndoesn&rsquo;t stop there.</p>\n\n<p>If you want to depend on something that&rsquo;s not on the registry, you can\ndo that.  Just do this:</p>\n\n<pre><code>npm bundle install <a href=\"http://github.com/whoever/whatever/tarball/master\">http://github.com/whoever/whatever/tarball/master</a>\n</code></pre>\n\n<p>This will install the contents of that tarball into the bundle, and then\nyou can list it as a dependency, and it won&rsquo;t try to install it when\nyour package gets installed.</p>\n\n<p>This also is handy if you have your own fork of something, and would\nprefer not to change the name.</p>\n\n<p>In fact, you can run almost any npm command at the bundle.  To see\nwhat&rsquo;s inside, you can do <code>npm bundle ls</code>.  To remove something, do <code>npm\nbundle rm thing</code>.  And, of course, you can install multiple versions and\nactivate the one you want.</p>\n\n<h2>12: Change the very laws of mathematics itself!!</h2>\n\n<p>There are 13 things in this list of 10 things.</p>\n\n<p>npm IS JUST THAT AWESOME.</p>\n\n<h2>13: Always be lowercase</h2>\n\n<p>If you see npm referred to as &ldquo;NPM&rdquo; anywhere except right there in this\nsentence, then you know that I didn&rsquo;t write it.  &ldquo;NPM&rdquo; is the <a href=\"http://npm.org\">National Association of Pastoral Musicians</a>.\nIf you need some church music, use NPM.  If you want node packages\ninstalled, then you need <a href=\"http://npmjs.org/\">npm</a>.</p>\n\n<h2>Other things that didn&rsquo;t make this list because they were too common or not awesome enough</h2>\n\n<ol><li>Cache registry requests using etags.</li>\n<li>Run arbitrary scripts to start, stop, restart, and test packages.</li>\n<li>Set deprecation messages to keep people from using old versions of\nyour stuff.</li>\n<li>compile node addons automatically if it sees a wscript file.</li>\n<li>rebuild packages in a single command so that you can easily keep up\nwith node ABI changes.  <code>npm rebuild</code></li>\n<li>Manage owners of a project with the <code>npm owner</code> command.</li>\n<li>Edit package contents.  See <code>npm edit</code>.  (When used as <code>npm bundle\nedit</code> it&rsquo;s especially handy.)</li>\n<li>Be used as a library in node programs.  (Check the readme for a quick how-to, or <code>cli.js</code> for an example of using npm programmatically.)</li>\n</ol><p>Happy Thanksgiving, Americans.  And non-Americans, Happy Random Thursday When All Your American Friends Are Not Online Much!</p>",
            "content_raw": "<p><strong>OMG UPDAET!</strong> <small>2011-06-19</small></p>\n\n<p>Some of this is no longer 100% accurate, which shouldn\u2019t be very surprising, since it was written 7 months ago, and npm had a major version update since then.</p>\n\n<p>Check out <a href=\"http://blog.nodejs.org/category/npm\">the node blog</a> for some of the 1.0 changes.</p>\n\n<hr><p>npm is the node package manager.  Once upon a time, I would have said\n\u201ca\u201d node package manager, and the humbler part of me would like to\npretend that that\u2019s still the case, but SCREW THAT HUMBLER SIDE, I\u2019m\nfeeling egotistical and braggy today, so today it\u2019s <strong>THE</strong> node package\nmanager.</p>\n\n<p>Also, I\u2019m writing a \u201chead -n 10\u201d blog post, so it\u2019s basically a license to be a complete ass.</p>\n\n<p>Yeah, it\u2019s that kinda day.  I think tomorrow, Imma eat a turkey.  So there.</p>\n\n<p>You probably know that npm can install stuff, publish stuff, remove\nstuff, and that it makes dependencies magically work.  You may even know that it\nruns without being burdened by unnecessary semicolons.</p>\n\n<p>If you\u2019re a node veteran, you may even already know about some of these\nlesser-known features.  But I\u2019m hoping that at least one of them is a bit\nsurprising, even for old timers and core node devs.</p>\n\n<h2>1: Handle multiple versions of the same thing at the same time</h2>\n\n<p>One of the reasons I wrote npm is that package managers put you in\ndependency hell, and I simply can\u2019t abide that.</p>\n\n<p>npm keeps all its installed packages organized in <code>name/version</code>\nfolders, and versions all the public stuff.  Then, one of them is\n\u201cactive\u201d at any given time in the global space.  (That\u2019s what you\u2019ll see\nif you install multiple versions of \u201cfoo\u201d and then drop into the repl and\ndo <code>require(\"foo\")</code>.)</p>\n\n<p>But here\u2019s where it gets cool:  Let\u2019s say that you installed <code>foo@1.0.0</code>\nand <code>foo@2.0.0</code>.  Now, you have <code>bar@1.0.0</code> that depends on <code>foo@1.0.0</code>,\nand <code>baz@1.0.0</code> that depends on <code>foo@2.0.0</code>, and <code>quux@1.0.0</code> that\ndepends on <code>bar</code> and <code>baz</code>.</p>\n\n<p>Here\u2019s a diagram:</p>\n\n<pre><code>quux@1.0.0\n|\n+-- bar@1.0.0\n|   |\n|   `-- foo@1.0.0 \\\n|                  \\\n`-- baz@1.0.0       &gt; Conflict?\n    |              /\n    `-- foo@2.0.0 /\n</code></pre>\n\n<p>In most package manager systems, quux would simply never be installable.\nIt needs two packages that can\u2019t coexist because they have competing\ndependencies.  Or, you\u2019d have to name things stupidly, and bar and\nbaz would have tobe aware of one another.</p>\n\n<p>npm handles that all for you.  Try it.  It works.</p>\n\n<p>It\u2019s <strong>MAGIC</strong>.  (Also, it\u2019s the commonjs module system\u2019s built in\nseparation of scope that doesn\u2019t require that the path be a single\nconsistent thing.)</p>\n\n<h2>2: Be gone at runtime</h2>\n\n<p>npm doesn\u2019t load your modules.  It installs them.  Then you can even do\n<code>npm rm npm</code> and it\u2019ll remove itself.  All the modules you installed?\nYeah, they still work.</p>\n\n<p>It does this by setting up things in the proper places so that node\u2019s\nvery simple module loader can find them when it needs them.</p>\n\n<p>Most package managers are sort of hybrid loader/installer things.  npm\nis first and foremost a dependency manager.  It puts things in place,\nand then ducks out of the way so that it\u2019s not all in your face telling\nyou how to write your programs.</p>\n\n<h2>3: Structure your program any way you want</h2>\n\n<p>\u2026provided, of course, you describe that structure in a package.json\nfile.</p>\n\n<p>That is, you can put all your node modules in a folder called \u201csrc\u201d or\n\u201clib\u201d or \u201cpath/to/my/awesome/modules\u201d.  npm doesn\u2019t care.  In fact, it\ndoesn\u2019t even need to be a node program.  If you can describe the package\nin a package.json file, you can install <em>literally anything</em>.  I\u2019m\nwaiting for people to figure this out, and see something awful and\nhideous like <code>npm install vim</code>.</p>\n\n<p>A lot of people have objected to this feature.  They called me crazy and\nsaid that we need to form a committee and decide on a set of\nconventions.  Some even went so far as to pound fists on tables, and\ndeclare that madness will surely result from my freewheeling insanity!</p>\n\n<p>To them, I say, HA!  JavaScript is at its heart an anarchic language,\nforged in the great battles of Browsers, lit by the flicker of a\nthousand animated gifs depicting construction workers.  It bears many\nscars from those dark days, but it also resulted in a strong and vibrant\ncommunity, all of whom have strong opinions and found their way here\nbecause they could not agree on much of anything.</p>\n\n<p>npm welcomes your strife.  Like JavaScript itself, it doesn\u2019t judge you.</p>\n\n<p>Read through <code>npm help json</code> to learn what you can put in your\npackage.json file.</p>\n\n<h2>4: Start a package.json file for you</h2>\n\n<p>If you run <code>npm init</code> in a folder, it\u2019ll ask you a few questions, and\nthen write out a package.json file.</p>\n\n<p>The init command is pretty new, and doesn\u2019t do much.  But sometimes all\nyou need is a little nudge to get started.</p>\n\n<h2>5: Verify sha1 hashes of packages</h2>\n\n<p>As of version 0.2.9, sha hashes get generated for all packages as they\nget published, and then are verified after being downloaded.</p>\n\n<p>Checksumming is one of those things where everyone feels a little safer\nknowing it\u2019s there, but no one usually pays much attention to it.  When\nit works, it\u2019s silent, and that\u2019s great.</p>\n\n<p>The good news is that, now, if there\u2019s some kind of error downloading\nsomething, or if something gets corrupted in transit in any other way,\nthen npm will stubbornly refuse to proceed.</p>\n\n<p>(You have to compile node with openssl crypto support for this to work.)</p>\n\n<h2>6: Shut The Hell Up</h2>\n\n<p>Sometimes you just need to show your packager who\u2019s boss.  \u201cShutting up\u201d is a feature.  By\nsetting the <code>loglevel</code> config, you can make npm anywhere from completely\nsilent to ludicrously noisy.  The levels are: silent, win, error, warn,\ninfo, verbose, and silly.</p>\n\n<ul><li>silent: completely silent.  Zero logging output.</li>\n<li>win: Just the \u201cnpm ok\u201d or \u201cnpm not ok\u201d message at the end.</li>\n<li>error: When something unexpected and bad happens.</li>\n<li>warn: When something odd or potentially dangerous is happening.</li>\n<li>info: Helpful information so you can track what\u2019s happening.</li>\n<li>verbose: Even more.  Perhaps just a wee bit obnoxious, even.</li>\n<li>silly: Completely fuckin crazy, man.  Dump everything.  Whole objects,\nyou name it, whatever.</li>\n</ul><p>Like any configuration option, you can set the loglevel in a few ways.\nTo set it for just one command just add <code>--loglevel silent</code> to the\ncommand.  This is particularly handy if something breaks, and you want\nto provide a bit more debugging output with <code>--loglevel verbose</code>.</p>\n\n<p>To set it for your user account, you can do <code>npm config set loglevel\nwin</code>.</p>\n\n<p>To set it globally for all users on the machine, you can do <code>npm config\nset loglevel info --global</code>.</p>\n\n<p>You can also set it in the environment if that floats your boat.  Any\nconfig option can be set by the <code>npm_config_&lt;blerg&gt;</code> environ, so doing\n<code>export npm_config_loglevel=verbose</code> will affect all subsequent npm\ncommands.</p>\n\n<p>Oh, and if those <code>npm config set</code> and <code>npm config get</code> commands get\ntedious, you can just do <code>npm c edit</code> to open up the config in your\nfavorite editor.</p>\n\n<p>See <code>npm help config</code> for more info.</p>\n\n<h2>7: Abbreviate commands</h2>\n\n<p>If you\u2019re anything like me, then you drink a lot of coffee, hate extra typing,\nand are awesome.  But mostly the typing.  Let\u2019s focus on that.</p>\n\n<p>Is \u201cinstall\u201d just too long for you?  Try <code>npm inst connect</code>.  Bam.  Done.</p>\n\n<p>Anything that is unambiguous will work just as well.  I don\u2019t have this\nlogic implemented for arguments and package names, but that\u2019s on the\nroadmap.  It uses the <code>abbrev</code> program, and you can use it in your\nprograms, too.  <code>npm i abbrev</code> to get it.</p>\n\n<p>The most common commands even have super short shorthands, because I\nlove you.</p>\n\n<ul><li>i: install</li>\n<li>r, rm: uninstall</li>\n<li>ln: link</li>\n<li>ls: list</li>\n<li>bn: bundle</li>\n<li>up: update</li>\n<li>c: config</li>\n</ul><p>If you think it stops there, you\u2019re wrong.  So wrong.  Go sit in the\ncorner.</p>\n\n<p>In the npm source folder, there\u2019s a file called <code>npm-completion.sh</code>.\nSource that bad boy in your bashrc or whatever, and you\u2019ve got tab\ncompletion.</p>\n\n<p><em>Tab completion!</em>  The <abbr title=\"Yeah, I know what penultimate means,\nhold on a second\">penultimate</abbr> feature of any unix program, <abbr title=\"see?\">second only to</abbr> tab completion that works and is\nhelpful!</p>\n\n<p>This is where you come in.  Check out what it\u2019s doing.  Dig into the\ncode.  Make it better.  Right now it can just tab-complete npm commands,\nnot package names or other useful things.  But if you hack away on the\n<code>lib/completion.js</code> file, you can make it awesomer.</p>\n\n<h2>8: Get help on <em>anything</em></h2>\n\n<p>npm has a ton of documentation.  In fact, the biggest documentation\nproblem at the moment in npm is that there\u2019s too much of it, and it\u2019s\nprobably impossible for any non-robot to read all if it in a reasonable\namount of time.</p>\n\n<p>In case you\u2019re not a robot, here\u2019s how you can get the most out of the\ndocs:</p>\n\n<ol><li>run <code>npm</code> without any arguments.  This\u2019ll show you what you can do.\nIt lists out the commands and the help topics.</li>\n<li>run <code>npm command -h</code> to quickly view the arguments that command\nexpects.  This is handy when you forget how to do something that you\nknew how to do, and you just need to remember how you did it.</li>\n<li>run <code>npm help &lt;topic&gt;</code> to get more detailed manpage-style\ndocumentation.  For general info about npm itself, you can run <code>npm\nhelp npm</code>.  This page has a few pointers based on your use cases.\nCheck it out.</li>\n</ol><h2>9: View specific fields on published packages</h2>\n\n<p>The <code>npm view</code> command was pretty lame for a while.  Basically it just\nfetched data from the registry and then dumped it to the terminal.  But\nnow, it\u2019s so much more.</p>\n\n<p>Specify a package name (in the form of <code>name@version</code> or <code>name@latest</code>\nor <code>name</code> or even <code>name@\"&gt;=1.2.3\"</code> for ranges), and optionally one or\nmore fields, and it\u2019ll pull just those fields out and show them to you.</p>\n\n<p>It operates smartly on arrays, and parses out the <code>url</code> and <code>email</code>\nfields from contributors and author names.  So, if you do this:</p>\n\n<pre><code>npm view npm contributors.name\n</code></pre>\n\n<p>then you\u2019ll get a list of all the contributor names in npm.  If you just\ndo:</p>\n\n<pre><code>npm view npm contributors\n</code></pre>\n\n<p>then you\u2019ll see the list of contributors in the <code>\"name (url) &lt;email&gt;\"</code>\nformat.</p>\n\n<h2>10: Bump your package version FOR YOU OMG HOLY CRAP WHAT!?</h2>\n\n<p>Yeah.  That\u2019s right.</p>\n\n<p>It\u2019ll even commit the change, and tag it for you, if you do it in a git\nrepo.  Just run:</p>\n\n<pre><code>npm version 1.2.3\n</code></pre>\n\n<p>It\u2019ll open up your package.json file, change the version to 1.2.3, <code>git\nadd</code> it, <code>git commit</code> it, and <code>git tag v1.2.3</code> it.</p>\n\n<p>If your git repository is unclean, then it\u2019ll recoil in horror at the\ndirty, and tell you to get your act together.  (Of course, if you\u2019re not\nusing git, then it won\u2019t do the git stuff.  It\u2019ll just change the json\nand write it back to package.json.)</p>\n\n<h2>11: Bundle all your dependencies into the package itself</h2>\n\n<p>When you use the <code>npm bundle</code> command, npm will put all your\ndependencies into the <code>node_modules</code> folder in your package.  But it\ndoesn\u2019t stop there.</p>\n\n<p>If you want to depend on something that\u2019s not on the registry, you can\ndo that.  Just do this:</p>\n\n<pre><code>npm bundle install <a href=\"http://github.com/whoever/whatever/tarball/master\">http://github.com/whoever/whatever/tarball/master</a>\n</code></pre>\n\n<p>This will install the contents of that tarball into the bundle, and then\nyou can list it as a dependency, and it won\u2019t try to install it when\nyour package gets installed.</p>\n\n<p>This also is handy if you have your own fork of something, and would\nprefer not to change the name.</p>\n\n<p>In fact, you can run almost any npm command at the bundle.  To see\nwhat\u2019s inside, you can do <code>npm bundle ls</code>.  To remove something, do <code>npm\nbundle rm thing</code>.  And, of course, you can install multiple versions and\nactivate the one you want.</p>\n\n<h2>12: Change the very laws of mathematics itself!!</h2>\n\n<p>There are 13 things in this list of 10 things.</p>\n\n<p>npm IS JUST THAT AWESOME.</p>\n\n<h2>13: Always be lowercase</h2>\n\n<p>If you see npm referred to as \u201cNPM\u201d anywhere except right there in this\nsentence, then you know that I didn\u2019t write it.  \u201cNPM\u201d is the <a href=\"http://npm.org\">National Association of Pastoral Musicians</a>.\nIf you need some church music, use NPM.  If you want node packages\ninstalled, then you need <a href=\"http://npmjs.org/\">npm</a>.</p>\n\n<h2>Other things that didn\u2019t make this list because they were too common or not awesome enough</h2>\n\n<ol><li>Cache registry requests using etags.</li>\n<li>Run arbitrary scripts to start, stop, restart, and test packages.</li>\n<li>Set deprecation messages to keep people from using old versions of\nyour stuff.</li>\n<li>compile node addons automatically if it sees a wscript file.</li>\n<li>rebuild packages in a single command so that you can easily keep up\nwith node ABI changes.  <code>npm rebuild</code></li>\n<li>Manage owners of a project with the <code>npm owner</code> command.</li>\n<li>Edit package contents.  See <code>npm edit</code>.  (When used as <code>npm bundle\nedit</code> it\u2019s especially handy.)</li>\n<li>Be used as a library in node programs.  (Check the readme for a quick how-to, or <code>cli.js</code> for an example of using npm programmatically.)</li>\n</ol><p>Happy Thanksgiving, Americans.  And non-Americans, Happy Random Thursday When All Your American Friends Are Not Online Much!</p>",
            "is_current_item": true,
            "is_root_item": true,
            "post": {
                "id": "1675072029"
            }
        }
    ],
    "type": "text"
}