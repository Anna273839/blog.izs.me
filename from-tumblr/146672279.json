{
    "blog": {
        "description": "Writing and Stuff from Isaac Z. Schlueter",
        "name": "izs",
        "title": "blog.izs.me",
        "updated": 1544051896,
        "url": "http://blog.izs.me/",
        "uuid": "t:qZa3tMNNGjX7PQ45aXJ-jw"
    },
    "blog_name": "izs",
    "body": "<p><a href=\"http://iterm.sourceforge.net/\" rev=\"vote-for\">iTerm</a> is a major part of my workspace.  I&rsquo;m a big fan of tabbed interfaces, and my fingers have gotten really good at the Apple-\u2190 and Apple-\u2192 key combos to swap between them.  I usually have three tabs going:</p>\n\n<ol><li>One that runs <a href=\"http://www.cis.upenn.edu/~bcpierce/unison/\" rev=\"vote-for\">Unison</a> in batch mode to keep my mac and BSD machines in sync.  I set the title of this one to &ldquo;unisoner&rdquo;.</li>\n    <li>A second logged into my BSD machine in the package folder to easily relink the site package when I add files to it.  This is the &ldquo;relinker&rdquo;.  (Also, this one occasionally is used to <code>tail -f</code> on the apache log file.)</li>\n    <li>A third sitting in my code folder to do CVS updates, open files, grep for stuff, etc.  This is &ldquo;cvser&rdquo;.</li>\n</ol><p>Of course, it&rsquo;s a pain to go through the steps to set all this up.  So, I wrote this Applescript, and it does it all:</p>\n\n<p><code class=\"block applescript\">tell Application \"iTerm\"\n\u00a0\u00a0activate\n\u00a0\u00a0set myterm to (make new terminal)\n\u00a0\u00a0tell myterm\n\u00a0\u00a0\u00a0\u00a0if (count of sessions) &lt; 3 then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"title unisoner\ncd dev/orion\nunisonpush\nunisondev\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"v\nyroot orion_front\ntitle relinker-tailer\ncd dev/orion/front/package\nyapl\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"title cvser\ncd dev/orion\nopen -a TextMate orion.tmproj\")\n\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0end tell\n\u00a0\u00a0terminate first session of current terminal\nend tell\non open_tab(command)\n\u00a0\u00a0tell Application \"iTerm\" to tell first terminal\n\u00a0\u00a0\u00a0\u00a0launch session \"Default Session\"\n\u00a0\u00a0\u00a0\u00a0tell last session\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0write text command\n\u00a0\u00a0\u00a0\u00a0end tell\n\u00a0\u00a0end tell\nend run_command</code></p>\n\n<p>The only problem is, it requests a password when it ssh'es into my dev box and changes to the project root.  So, that whole piece falls down.</p>\n\n<p>Anyone out there in geek land know of a way to make an Applescript respond to things like that?  Something like this:</p>\n\n<p><code class=\"block applescript broken\">whenever the last line is \"Password:\" then\n\u00a0\u00a0write text returned of (display dialog \"Password:\" default answer \"\")\nend if</code></p>\n\n<h3>Update:</h3>\n\n<p>Turns out, what I suggested is pretty close to what works.  However, since there&rsquo;s no event to listen for that would tell the script that the display has been updated, it takes a bit of fudging, and doesn&rsquo;t always work perfectly.  Basically, you put <code>@@@PASSWORD@@@</code> in the list of commands where you may expect a password prompt, and it&rsquo;ll wait for a second and display a dialog if necessary.</p>\n\n<p><code class=\"block applescript\">\non open_tab(command)\n\u00a0\u00a0set commands to paragraphs in command\n\u00a0\u00a0\n\u00a0\u00a0tell Application \"iTerm\" to tell first terminal\n\u00a0\u00a0\u00a0\u00a0launch session \"Default Session\"\n\u00a0\u00a0\u00a0\u00a0repeat with currentCommand in commands\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (text of currentCommand = \"@@@PASSWORD@@@\") then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0do shell script \"sleep 1\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set pw to last word of (get contents of last session)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if pw = \"Password\" then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell Application \"Finder\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0activate\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set pw to text returned of (display dialog \"Password:\" default answer \"\" with hidden answer)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end tell\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell Application \"iTerm\" to activate\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell last session to write text pw\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell last session to write text currentCommand\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0end repeat\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0end tell\nend open_tab</code></p>\n\n<p>Get the finished product: <a href=\"http://foohack.com/blog/wp-content/uploads/2007/10/workspace.applescript\" title=\"Applescript for iTerm\">Applescript for iTerm</a>.  You&rsquo;ll want to change up the specific commands up near the top, of course.</p>",
    "can_like": false,
    "can_reblog": false,
    "can_reply": false,
    "can_send_in_message": true,
    "date": "2007-10-01 17:00:45 GMT",
    "display_avatar": true,
    "format": "markdown",
    "id": 146672279,
    "is_blocks_post_format": false,
    "note_count": 0,
    "post_url": "http://blog.izs.me/post/146672279/applescript-for-iterm-and-a-request-for-help-with",
    "reblog": {
        "comment": "<p><a href=\"http://iterm.sourceforge.net/\" rev=\"vote-for\">iTerm</a> is a major part of my workspace.  I\u2019m a big fan of tabbed interfaces, and my fingers have gotten really good at the Apple-\u2190 and Apple-\u2192 key combos to swap between them.  I usually have three tabs going:</p>\n\n<ol><li>One that runs <a href=\"http://www.cis.upenn.edu/~bcpierce/unison/\" rev=\"vote-for\">Unison</a> in batch mode to keep my mac and BSD machines in sync.  I set the title of this one to \u201cunisoner\u201d.</li>\n    <li>A second logged into my BSD machine in the package folder to easily relink the site package when I add files to it.  This is the \u201crelinker\u201d.  (Also, this one occasionally is used to <code>tail -f</code> on the apache log file.)</li>\n    <li>A third sitting in my code folder to do CVS updates, open files, grep for stuff, etc.  This is \u201ccvser\u201d.</li>\n</ol><p>Of course, it\u2019s a pain to go through the steps to set all this up.  So, I wrote this Applescript, and it does it all:</p>\n\n<p><code class=\"block applescript\">tell Application \"iTerm\"\n\u00a0\u00a0activate\n\u00a0\u00a0set myterm to (make new terminal)\n\u00a0\u00a0tell myterm\n\u00a0\u00a0\u00a0\u00a0if (count of sessions) &lt; 3 then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"title unisoner\ncd dev/orion\nunisonpush\nunisondev\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"v\nyroot orion_front\ntitle relinker-tailer\ncd dev/orion/front/package\nyapl\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"title cvser\ncd dev/orion\nopen -a TextMate orion.tmproj\")\n\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0end tell\n\u00a0\u00a0terminate first session of current terminal\nend tell\non open_tab(command)\n\u00a0\u00a0tell Application \"iTerm\" to tell first terminal\n\u00a0\u00a0\u00a0\u00a0launch session \"Default Session\"\n\u00a0\u00a0\u00a0\u00a0tell last session\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0write text command\n\u00a0\u00a0\u00a0\u00a0end tell\n\u00a0\u00a0end tell\nend run_command</code></p>\n\n<p>The only problem is, it requests a password when it ssh'es into my dev box and changes to the project root.  So, that whole piece falls down.</p>\n\n<p>Anyone out there in geek land know of a way to make an Applescript respond to things like that?  Something like this:</p>\n\n<p><code class=\"block applescript broken\">whenever the last line is \"Password:\" then\n\u00a0\u00a0write text returned of (display dialog \"Password:\" default answer \"\")\nend if</code></p>\n\n<h3>Update:</h3>\n\n<p>Turns out, what I suggested is pretty close to what works.  However, since there\u2019s no event to listen for that would tell the script that the display has been updated, it takes a bit of fudging, and doesn\u2019t always work perfectly.  Basically, you put <code>@@@PASSWORD@@@</code> in the list of commands where you may expect a password prompt, and it\u2019ll wait for a second and display a dialog if necessary.</p>\n\n<p><code class=\"block applescript\">\non open_tab(command)\n\u00a0\u00a0set commands to paragraphs in command\n\u00a0\u00a0\n\u00a0\u00a0tell Application \"iTerm\" to tell first terminal\n\u00a0\u00a0\u00a0\u00a0launch session \"Default Session\"\n\u00a0\u00a0\u00a0\u00a0repeat with currentCommand in commands\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (text of currentCommand = \"@@@PASSWORD@@@\") then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0do shell script \"sleep 1\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set pw to last word of (get contents of last session)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if pw = \"Password\" then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell Application \"Finder\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0activate\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set pw to text returned of (display dialog \"Password:\" default answer \"\" with hidden answer)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end tell\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell Application \"iTerm\" to activate\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell last session to write text pw\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell last session to write text currentCommand\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0end repeat\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0end tell\nend open_tab</code></p>\n\n<p>Get the finished product: <a href=\"http://foohack.com/blog/wp-content/uploads/2007/10/workspace.applescript\" title=\"Applescript for iTerm\">Applescript for iTerm</a>.  You\u2019ll want to change up the specific commands up near the top, of course.</p>",
        "tree_html": ""
    },
    "reblog_key": "oNd7XBW8",
    "recommended_color": null,
    "recommended_source": null,
    "short_url": "https://tmblr.co/Z7nwWy8lWgN",
    "slug": "applescript-for-iterm-and-a-request-for-help-with",
    "state": "published",
    "summary": "Applescript for iTerm (and a request for help with it)",
    "tags": [
        "Freebie",
        "Request",
        "Tools of the Trade"
    ],
    "timestamp": 1191258045,
    "title": "Applescript for iTerm (and a request for help with it)",
    "trail": [
        {
            "blog": {
                "active": true,
                "can_be_followed": true,
                "name": "izs",
                "share_following": false,
                "share_likes": false,
                "theme": {
                    "avatar_shape": "square",
                    "background_color": "#444444",
                    "body_font": "Helvetica Neue",
                    "header_bounds": "978,2448,2355,0",
                    "header_focus_height": 1152,
                    "header_focus_width": 2048,
                    "header_full_height": 3264,
                    "header_full_width": 2448,
                    "header_image": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o.jpg",
                    "header_image_focused": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/mA1nbvglg/tumblr_static_tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_focused_v3.jpg",
                    "header_image_scaled": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_2048_v2.jpg",
                    "header_stretch": true,
                    "link_color": "#FB4C16",
                    "show_avatar": true,
                    "show_description": true,
                    "show_header_image": true,
                    "show_title": true,
                    "title_color": "#fb4c16",
                    "title_font": "Gibson",
                    "title_font_weight": "regular"
                }
            },
            "content": "<p><a href=\"http://iterm.sourceforge.net/\">iTerm</a> is a major part of my workspace.  I&rsquo;m a big fan of tabbed interfaces, and my fingers have gotten really good at the Apple-&larr; and Apple-&rarr; key combos to swap between them.  I usually have three tabs going:</p>\n\n<ol><li>One that runs <a href=\"http://www.cis.upenn.edu/~bcpierce/unison/\">Unison</a> in batch mode to keep my mac and BSD machines in sync.  I set the title of this one to &ldquo;unisoner&rdquo;.</li>\n    <li>A second logged into my BSD machine in the package folder to easily relink the site package when I add files to it.  This is the &ldquo;relinker&rdquo;.  (Also, this one occasionally is used to <code>tail -f</code> on the apache log file.)</li>\n    <li>A third sitting in my code folder to do CVS updates, open files, grep for stuff, etc.  This is &ldquo;cvser&rdquo;.</li>\n</ol><p>Of course, it&rsquo;s a pain to go through the steps to set all this up.  So, I wrote this Applescript, and it does it all:</p>\n\n<p><code>tell Application \"iTerm\"\n&nbsp;&nbsp;activate\n&nbsp;&nbsp;set myterm to (make new terminal)\n&nbsp;&nbsp;tell myterm\n&nbsp;&nbsp;&nbsp;&nbsp;if (count of sessions) &lt; 3 then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my open_tab(\"title unisoner\ncd dev/orion\nunisonpush\nunisondev\")\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my open_tab(\"v\nyroot orion_front\ntitle relinker-tailer\ncd dev/orion/front/package\nyapl\")\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;my open_tab(\"title cvser\ncd dev/orion\nopen -a TextMate orion.tmproj\")\n&nbsp;&nbsp;&nbsp;&nbsp;end if\n&nbsp;&nbsp;end tell\n&nbsp;&nbsp;terminate first session of current terminal\nend tell\non open_tab(command)\n&nbsp;&nbsp;tell Application \"iTerm\" to tell first terminal\n&nbsp;&nbsp;&nbsp;&nbsp;launch session \"Default Session\"\n&nbsp;&nbsp;&nbsp;&nbsp;tell last session\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write text command\n&nbsp;&nbsp;&nbsp;&nbsp;end tell\n&nbsp;&nbsp;end tell\nend run_command</code></p>\n\n<p>The only problem is, it requests a password when it ssh'es into my dev box and changes to the project root.  So, that whole piece falls down.</p>\n\n<p>Anyone out there in geek land know of a way to make an Applescript respond to things like that?  Something like this:</p>\n\n<p><code>whenever the last line is \"Password:\" then\n&nbsp;&nbsp;write text returned of (display dialog \"Password:\" default answer \"\")\nend if</code></p>\n\n<h3>Update:</h3>\n\n<p>Turns out, what I suggested is pretty close to what works.  However, since there&rsquo;s no event to listen for that would tell the script that the display has been updated, it takes a bit of fudging, and doesn&rsquo;t always work perfectly.  Basically, you put <code>@@@PASSWORD@@@</code> in the list of commands where you may expect a password prompt, and it&rsquo;ll wait for a second and display a dialog if necessary.</p>\n\n<p><code>\non open_tab(command)\n&nbsp;&nbsp;set commands to paragraphs in command\n&nbsp;&nbsp;\n&nbsp;&nbsp;tell Application \"iTerm\" to tell first terminal\n&nbsp;&nbsp;&nbsp;&nbsp;launch session \"Default Session\"\n&nbsp;&nbsp;&nbsp;&nbsp;repeat with currentCommand in commands\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text of currentCommand = \"@@@PASSWORD@@@\") then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do shell script \"sleep 1\"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set pw to last word of (get contents of last session)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if pw = \"Password\" then\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tell Application \"Finder\"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activate\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set pw to text returned of (display dialog \"Password:\" default answer \"\" with hidden answer)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end tell\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tell Application \"iTerm\" to activate\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tell last session to write text pw\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tell last session to write text currentCommand\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;end repeat\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;end tell\nend open_tab</code></p>\n\n<p>Get the finished product: <a href=\"http://foohack.com/blog/wp-content/uploads/2007/10/workspace.applescript\" title=\"Applescript for iTerm\">Applescript for iTerm</a>.  You&rsquo;ll want to change up the specific commands up near the top, of course.</p>",
            "content_raw": "<p><a href=\"http://iterm.sourceforge.net/\" rev=\"vote-for\">iTerm</a> is a major part of my workspace.  I\u2019m a big fan of tabbed interfaces, and my fingers have gotten really good at the Apple-\u2190 and Apple-\u2192 key combos to swap between them.  I usually have three tabs going:</p>\n\n<ol><li>One that runs <a href=\"http://www.cis.upenn.edu/~bcpierce/unison/\" rev=\"vote-for\">Unison</a> in batch mode to keep my mac and BSD machines in sync.  I set the title of this one to \u201cunisoner\u201d.</li>\n    <li>A second logged into my BSD machine in the package folder to easily relink the site package when I add files to it.  This is the \u201crelinker\u201d.  (Also, this one occasionally is used to <code>tail -f</code> on the apache log file.)</li>\n    <li>A third sitting in my code folder to do CVS updates, open files, grep for stuff, etc.  This is \u201ccvser\u201d.</li>\n</ol><p>Of course, it\u2019s a pain to go through the steps to set all this up.  So, I wrote this Applescript, and it does it all:</p>\n\n<p><code class=\"block applescript\">tell Application \"iTerm\"\n\u00a0\u00a0activate\n\u00a0\u00a0set myterm to (make new terminal)\n\u00a0\u00a0tell myterm\n\u00a0\u00a0\u00a0\u00a0if (count of sessions) &lt; 3 then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"title unisoner\ncd dev/orion\nunisonpush\nunisondev\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"v\nyroot orion_front\ntitle relinker-tailer\ncd dev/orion/front/package\nyapl\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0my open_tab(\"title cvser\ncd dev/orion\nopen -a TextMate orion.tmproj\")\n\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0end tell\n\u00a0\u00a0terminate first session of current terminal\nend tell\non open_tab(command)\n\u00a0\u00a0tell Application \"iTerm\" to tell first terminal\n\u00a0\u00a0\u00a0\u00a0launch session \"Default Session\"\n\u00a0\u00a0\u00a0\u00a0tell last session\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0write text command\n\u00a0\u00a0\u00a0\u00a0end tell\n\u00a0\u00a0end tell\nend run_command</code></p>\n\n<p>The only problem is, it requests a password when it ssh'es into my dev box and changes to the project root.  So, that whole piece falls down.</p>\n\n<p>Anyone out there in geek land know of a way to make an Applescript respond to things like that?  Something like this:</p>\n\n<p><code class=\"block applescript broken\">whenever the last line is \"Password:\" then\n\u00a0\u00a0write text returned of (display dialog \"Password:\" default answer \"\")\nend if</code></p>\n\n<h3>Update:</h3>\n\n<p>Turns out, what I suggested is pretty close to what works.  However, since there\u2019s no event to listen for that would tell the script that the display has been updated, it takes a bit of fudging, and doesn\u2019t always work perfectly.  Basically, you put <code>@@@PASSWORD@@@</code> in the list of commands where you may expect a password prompt, and it\u2019ll wait for a second and display a dialog if necessary.</p>\n\n<p><code class=\"block applescript\">\non open_tab(command)\n\u00a0\u00a0set commands to paragraphs in command\n\u00a0\u00a0\n\u00a0\u00a0tell Application \"iTerm\" to tell first terminal\n\u00a0\u00a0\u00a0\u00a0launch session \"Default Session\"\n\u00a0\u00a0\u00a0\u00a0repeat with currentCommand in commands\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (text of currentCommand = \"@@@PASSWORD@@@\") then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0do shell script \"sleep 1\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set pw to last word of (get contents of last session)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if pw = \"Password\" then\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell Application \"Finder\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0activate\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set pw to text returned of (display dialog \"Password:\" default answer \"\" with hidden answer)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end tell\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell Application \"iTerm\" to activate\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell last session to write text pw\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tell last session to write text currentCommand\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end if\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0end repeat\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0end tell\nend open_tab</code></p>\n\n<p>Get the finished product: <a href=\"http://foohack.com/blog/wp-content/uploads/2007/10/workspace.applescript\" title=\"Applescript for iTerm\">Applescript for iTerm</a>.  You\u2019ll want to change up the specific commands up near the top, of course.</p>",
            "is_current_item": true,
            "is_root_item": true,
            "post": {
                "id": "146672279"
            }
        }
    ],
    "type": "text"
}