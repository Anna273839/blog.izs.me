{
    "blog": {
        "description": "Writing and Stuff from Isaac Z. Schlueter",
        "name": "izs",
        "title": "blog.izs.me",
        "updated": 1544051896,
        "url": "http://blog.izs.me/",
        "uuid": "t:qZa3tMNNGjX7PQ45aXJ-jw"
    },
    "blog_name": "izs",
    "body": "<p>I got this email last night from Sean Silva:</p>\n\n<blockquote>\n  <p>I was browsing the code for your npm.js project (this file in\n  particular:\u00a0<a href=\"https://github.com/isaacs/npm/blob/master/lib/npm.js\">https://github.com/isaacs/npm/blob/master/lib/npm.js</a>),\n  and noticed you using a style where you line up your commas under\n  the &lsquo;r&rsquo; of your var statements, and under your [ and { in\n  array/object literals. I&rsquo;m very fond of this kind of formatting, but\n  have been reluctant to use it since most js resources expound a fear\n  of js&rsquo;s automatic semicolon insertion wreaking havoc on your code if\n  you don&rsquo;t end lines with something which implies a continuation.</p>\n  \n  <p>Is this safe to place commas like this in browser code, or is it\n  just node where this is possible?</p>\n  \n  <p><ins>2011-12-20 updated link to file</ins></p>\n</blockquote>\n\n<p>I wrote a few paragraphs, and then decided to shorten it to just this\nresponse:</p>\n\n<blockquote>\n  <p>Yes, it&rsquo;s quite safe, and perfectly valid JS that every browser\n  understands.  Closure compiler, yuicompressor, packer, and jsmin all\n  can properly minify it.  There is no performance impact anywhere.</p>\n  \n  <p>I am sorry that, instead of educating you, the leaders in this\n  language community have given you lies and fear. \u00a0That was shameful.\n  I recommend learning how statements in JS are actually terminated\n  (and in which cases they are <em>not</em> terminated), so that you can\n  write code that you find beautiful.</p>\n</blockquote>\n\n<p>Inimino posted <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\">this\nvery clear explanation</a>.  In his typical style, it is crisp, clear,\nauthoritative, well researched, and he generally kept his opinions to\nhimself.</p>\n\n<p>I am going to be a bit more opinionated.</p>\n\n<h3>The Rules</h3>\n\n<p>In general, <code>\\n</code> ends a statement unless:</p>\n\n<ol><li>The statement has an unclosed paren, array literal, or object\nliteral or ends in some other way that is not a valid way to end a\nstatement.  (For instance, ending with <code>.</code> or <code>,</code>.)</li>\n<li>The line is <code>--</code> or <code>++</code> (in which case it will decrement/increment\nthe next token.)</li>\n<li>It is a <code>for()</code>, <code>while()</code>, <code>do</code>, <code>if()</code>, or <code>else</code>, and there is\nno <code>{</code></li>\n<li>The next line starts with <code>[</code>, <code>(</code>, <code>+</code>, <code>*</code>, <code>/</code>, <code>-</code>, <code>,</code>, <code>.</code>,\nor some other binary operator that can only be found between two\ntokens in a single expression.</li>\n</ol><p>The first is pretty obvious.  Even JSLint is ok with <code>\\n</code> chars in\nJSON and parenthesized constructs, and with <code>var</code> statements that span\nmultiple lines ending in <code>,</code>.</p>\n\n<p>The second is super weird.  I&rsquo;ve never seen a case (outside of these\nsorts of conversations) where you&rsquo;d want to do write <code>i\\n++\\nj</code>, but,\npoint of fact, that&rsquo;s parsed as <code>i; ++j</code>, not <code>i++; j</code>.</p>\n\n<p>The third is well understood, if generally despised.  <code>if (x)\\ny()</code> is\nequivalent to <code>if (x) { y() }</code>.  The construct doesn&rsquo;t end until it\nreaches either a block, or a statement.</p>\n\n<p><code>;</code> is a valid JavaScript statement, so <code>if(x);</code> is equivalent to\n<code>if(x){}</code> or, &ldquo;If x, do nothing.&rdquo;  This is more commonly applied to\nloops where the loop check also is the update function.  Unusual, but\nnot unheard of.</p>\n\n<p>The fourth is generally the fud-inducing &ldquo;oh noes, you need\nsemicolons!&rdquo; case.  But, as it turns out, it&rsquo;s quite easy to <em>prefix</em>\nthose lines with semicolons if you don&rsquo;t mean them to be continuations\nof the previous line.  For example, instead of this:</p>\n\n<pre><code>foo();\n[1,2,3].forEach(bar);\n</code></pre>\n\n<p>you could do this:</p>\n\n<pre><code>foo()\n;[1,2,3].forEach(bar)\n</code></pre>\n\n<p>The advantage is that the prefixes are easier to notice, once you are\naccustomed to never seeing lines starting with <code>(</code> or <code>[</code> without\nsemis.</p>\n\n<h3>Restricted Productions</h3>\n\n<p>The other common argument for semicolons has to do with semicolon\ninsertion and &ldquo;restricted productions&rdquo;.  That is, if you have a <code>\\n</code>\nimmediately after a <code>return</code>, <code>throw</code>, <code>break</code>, or <code>continue</code> token,\nor a <code>++</code> or <code>--</code> as a postfix operator (that is, <code>x++\\n</code> or <code>y--\\n</code>),\nthen it will terminate the statement, no exceptions.</p>\n\n<pre><code>//ok\nreturn 7\n\n//probably a mistake\nreturn\n       7\n</code></pre>\n\n<p>However, again, this is in fact <em>easier</em> to spot and avoid once you\nget out of the habit of terminating every statement with a semicolon.\nWhen I see the second, my brain instinctively associates the <code>\\n</code> with\n&ldquo;ok, this is over now&rdquo;, because return is <em>always</em> terminated by just\na linebreak.</p>\n\n<p>Lining up the most relevant tokens on the left edge of the screen\nmakes them demonstrably easier for humans to quickly scan.  Piles of\nresearch on the subject of speed reading and eye-tracking suggest that\na missing token on the right is far more likely to be overlooked than\none on the left.  So, I say, make the right-edge irrelevant, and put\nthe important things on the left.</p>\n\n<h3>So which style is better?</h3>\n\n<p>To the extent that there is an objectively &ldquo;better&rdquo; choice, it appears\nto me that the minimal-semicolon/comma-first style is <strong>slightly</strong>\nsuperior, both because it is fundamentally more scannable and because\nit encourages programmers to better understand the language they use.</p>\n\n<p>I can pretty well guarantee that, if you care about this even a\nlittle, I care less about your JavaScript style than you do about\nmine.  This isn&rsquo;t an article where I try to convince you to write your\ncode like I write mine.  <a href=\"http://groups.google.com/group/nodejs/msg/428220ab8cd199d2\">We should all decide the pants policy in our\nown\nhomes.</a></p>\n\n<p>Just as a show of good faith&hellip;</p>\n\n<h3 id=\"good-reasons\">Good Reasons to Put Semicolons Everywhere</h3>\n\n<p>The best reasons for excessive semicolon usage are esthetics and\npolitics.</p>\n\n<p>&ldquo;I put semicolons in my JavaScript because without semicolons, it&rsquo;s\nnot valid C/C++/Java/Whatever.&rdquo;  If you have to write a bunch of Java\nor C code in a project, and want your JavaScript to not look too\ndifferent, then that is a valid concern.\n(<a href=\"http://cassisjs.org\">Cassis</a> takes this approach to its absurd end.)</p>\n\n<p>&ldquo;We do it this way because we use this linter, and it says to.&rdquo;\nConsistency is important, and linters are one way to help a group of\npeople stay consistent.  Writing an npm-style linter is on my todo\nlist, but it&rsquo;s not very high up on it.</p>\n\n<h3>The Most Terrible Reason to Put Semicolons Everywhere</h3>\n\n<p>&ldquo;They&rsquo;re required because ASI is unreliable.&rdquo;  Seriously!?</p>\n\n<p>These rules date back to the early days of JavaScript, in the late\n90s.  They&rsquo;re not new, and in my opinion there is no excuse for\nsomeone calling themselves a professional JavaScripter and not\nunderstanding statement termination.  <strong>It is blatantly irresponsible\nof the thought leaders in the JavaScript community to continue to\nspread uncertainty rather than understanding.</strong></p>\n\n<p>Furthermore, the typical place where &ldquo;automatic semicolon insertion&rdquo;\nbites unexpectedly is with the restricted productions.  <strong>Adding\nsemicolons to every line will not make <code>return\\nfoo</code> return anything\nother than <code>undefined</code>.</strong>  The problem is that you <strong>do</strong> use line\nbreaks, not that you <strong>don&rsquo;t</strong> use semicolons.</p>\n\n<p>The only way to prevent restricted productions from <em>ever</em> being an\nissue is to always use semicolons <em>and never use linebreaks</em>.  No one\nis suggesting that.  So stop talking about restricted productions as\nif they matter, or offering semicolon overuse as an alternative to\nunderstanding ASI.  You have to understand ASI to be a competent\nJavaScripter, period.</p>\n\n<p>Which leads me to&hellip;</p>\n\n<h3>The Part Where I Get All Opinionated and Piss You Off (despite a noble effort to the contrary)</h3>\n\n<p>If you don&rsquo;t understand how statements in JavaScript are terminated,\nthen you just don&rsquo;t know JavaScript very well, and shouldn&rsquo;t write\nJavaScript programs professionally without supervision, and you\n<em>definitely</em> should not tell anyone else how to write their JavaScript\nprograms.</p>\n\n<p>I&rsquo;m guessing I just insulted you.  That&rsquo;s unfortunate.  I know that\nyou probably know all sorts of things <em>around</em> JavaScript, like the\nDOM, and CSS, and MSIE&rsquo;s little quirks, and jQuery.  You have maybe\nalso spent some time learning about closures and prototypes and scope\nand activation objects, and even hacked a few extensions onto V8 or\nSpiderMonkey.  You&rsquo;re not a dummy, I&rsquo;m sure.  In fact, you&rsquo;re almost\ncertainly smarter than I am, and probably better looking and nicer,\ntoo.  I&rsquo;m sure we have a lot in common, and could maybe even be\nfriends.</p>\n\n<p>But if you don&rsquo;t understand <em>what a JavaScript statement <b>is</b></em>,\nthen there is a huge hole in your understanding of perhaps the most\nfundamental aspect of the language.</p>\n\n<p>And that&rsquo;s ok.  I don&rsquo;t speak Spanish very well and my C is pretty\nnovice; I also don&rsquo;t call myself an expert in either one, though I\nknow enough to get by in many situations.  If I were to get a job that\ninvolved a lot of Spanish speaking or C coding, I&rsquo;d want someone\nwatching to help me avoid making any serious mistakes.</p>\n\n<p>Like most things in JavaScript, the statement termination rules are\nnot very <em>well</em> designed, but they&rsquo;re also not particularly <em>hard</em> to\nunderstand and use.  That understanding just takes a bit of time and\neffort.</p>\n\n<p>Cozy up with some hot chocolate and the ECMAScript spec some Saturday\nafternoon.  Practice a little.  Play around with some test programs.\nIt&rsquo;s a good time.</p>\n\n<p>Or don&rsquo;t do that, if you don&rsquo;t feel like it.  It&rsquo;s your life.  You\nalmost certainly have better things to do with it.</p>\n\n<p>Just please stop making authoritative claims like &ldquo;terminate all lines\nwith semicolons to be safe.&rdquo;  It&rsquo;s not any safer, or more reliable.</p>\n\n<h3>Addenda 1: &ldquo;leaders&rdquo;</h3>\n\n<blockquote>\n  <p>So, mr ruffler of feathers, who are these &ldquo;leaders&rdquo; you speak of?\n  Why didn&rsquo;t you name names?</p>\n</blockquote>\n\n<p>Because there are too many to name, and I don&rsquo;t know all of them.</p>\n\n<p>If you have been writing JavaScript for a while, and you provide\nguidance or leadership to another person who has been writing\nJavaScript for less time than you, then I&rsquo;m talking to you.  Being a\nleader is a responsibility.  Take it seriously.  Don&rsquo;t spread lies. Be\nan expert, or admit you&rsquo;re not an expert.  But don&rsquo;t drive that car\nwithout a license.</p>\n\n<h3 id=\"literary\">Addenda 2: Literary Programmer</h3>\n\n<blockquote>\n  <p>but in English, we put punctuation at the end, not the beginning</p>\n</blockquote>\n\n<p>JavaScript isn&rsquo;t english.  We also don&rsquo;t denote ownership (or\nsubject-verb connection) using a period in English.  We don&rsquo;t have\nObject Literals in English, and we only indent the first line of\nparagraphs, not all the middle sentences.</p>\n\n<p>This is such a silly argument, I have no choice but to fall in love\nwith it.  I started out your detractor, but you won my heart, Literary\nProgrammer.  From now on, I&rsquo;m going to only put line-breaks at the end\nof functions, and never in the middle, and indent the first line of\neach.</p>\n\n<h3>Addenda 3: Pedantry</h3>\n\n<blockquote>\n  <p>Why you wanna change my codes? What are you some kinda pedant?</p>\n</blockquote>\n\n<p>Code however you want.  I don&rsquo;t care, even a little.</p>\n\n<p>Please just don&rsquo;t lie to people.  That&rsquo;s all I&rsquo;m asking.  It&rsquo;s such a\nlittle bit of politeness.  It&rsquo;s not hard.  Just say true things,\ninstead of being a liar, that&rsquo;s all that this is about.</p>",
    "can_like": false,
    "can_reblog": false,
    "can_reply": false,
    "can_send_in_message": true,
    "date": "2010-12-18 00:50:00 GMT",
    "display_avatar": true,
    "format": "markdown",
    "id": 2353458699,
    "is_blocks_post_format": false,
    "note_count": 206,
    "post_url": "http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding",
    "reblog": {
        "comment": "<p>I got this email last night from Sean Silva:</p>\n\n<blockquote>\n  <p>I was browsing the code for your npm.js project (this file in\n  particular:\u00a0<a href=\"https://github.com/isaacs/npm/blob/master/lib/npm.js\">https://github.com/isaacs/npm/blob/master/lib/npm.js</a>),\n  and noticed you using a style where you line up your commas under\n  the \u2018r\u2019 of your var statements, and under your [ and { in\n  array/object literals. I\u2019m very fond of this kind of formatting, but\n  have been reluctant to use it since most js resources expound a fear\n  of js\u2019s automatic semicolon insertion wreaking havoc on your code if\n  you don\u2019t end lines with something which implies a continuation.</p>\n  \n  <p>Is this safe to place commas like this in browser code, or is it\n  just node where this is possible?</p>\n  \n  <p><ins>2011-12-20 updated link to file</ins></p>\n</blockquote>\n\n<p>I wrote a few paragraphs, and then decided to shorten it to just this\nresponse:</p>\n\n<blockquote>\n  <p>Yes, it\u2019s quite safe, and perfectly valid JS that every browser\n  understands.  Closure compiler, yuicompressor, packer, and jsmin all\n  can properly minify it.  There is no performance impact anywhere.</p>\n  \n  <p>I am sorry that, instead of educating you, the leaders in this\n  language community have given you lies and fear. \u00a0That was shameful.\n  I recommend learning how statements in JS are actually terminated\n  (and in which cases they are <em>not</em> terminated), so that you can\n  write code that you find beautiful.</p>\n</blockquote>\n\n<p>Inimino posted <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\">this\nvery clear explanation</a>.  In his typical style, it is crisp, clear,\nauthoritative, well researched, and he generally kept his opinions to\nhimself.</p>\n\n<p>I am going to be a bit more opinionated.</p>\n\n<h3>The Rules</h3>\n\n<p>In general, <code>\\n</code> ends a statement unless:</p>\n\n<ol><li>The statement has an unclosed paren, array literal, or object\nliteral or ends in some other way that is not a valid way to end a\nstatement.  (For instance, ending with <code>.</code> or <code>,</code>.)</li>\n<li>The line is <code>--</code> or <code>++</code> (in which case it will decrement/increment\nthe next token.)</li>\n<li>It is a <code>for()</code>, <code>while()</code>, <code>do</code>, <code>if()</code>, or <code>else</code>, and there is\nno <code>{</code></li>\n<li>The next line starts with <code>[</code>, <code>(</code>, <code>+</code>, <code>*</code>, <code>/</code>, <code>-</code>, <code>,</code>, <code>.</code>,\nor some other binary operator that can only be found between two\ntokens in a single expression.</li>\n</ol><p>The first is pretty obvious.  Even JSLint is ok with <code>\\n</code> chars in\nJSON and parenthesized constructs, and with <code>var</code> statements that span\nmultiple lines ending in <code>,</code>.</p>\n\n<p>The second is super weird.  I\u2019ve never seen a case (outside of these\nsorts of conversations) where you\u2019d want to do write <code>i\\n++\\nj</code>, but,\npoint of fact, that\u2019s parsed as <code>i; ++j</code>, not <code>i++; j</code>.</p>\n\n<p>The third is well understood, if generally despised.  <code>if (x)\\ny()</code> is\nequivalent to <code>if (x) { y() }</code>.  The construct doesn\u2019t end until it\nreaches either a block, or a statement.</p>\n\n<p><code>;</code> is a valid JavaScript statement, so <code>if(x);</code> is equivalent to\n<code>if(x){}</code> or, \u201cIf x, do nothing.\u201d  This is more commonly applied to\nloops where the loop check also is the update function.  Unusual, but\nnot unheard of.</p>\n\n<p>The fourth is generally the fud-inducing \u201coh noes, you need\nsemicolons!\u201d case.  But, as it turns out, it\u2019s quite easy to <em>prefix</em>\nthose lines with semicolons if you don\u2019t mean them to be continuations\nof the previous line.  For example, instead of this:</p>\n\n<pre><code>foo();\n[1,2,3].forEach(bar);\n</code></pre>\n\n<p>you could do this:</p>\n\n<pre><code>foo()\n;[1,2,3].forEach(bar)\n</code></pre>\n\n<p>The advantage is that the prefixes are easier to notice, once you are\naccustomed to never seeing lines starting with <code>(</code> or <code>[</code> without\nsemis.</p>\n\n<h3>Restricted Productions</h3>\n\n<p>The other common argument for semicolons has to do with semicolon\ninsertion and \u201crestricted productions\u201d.  That is, if you have a <code>\\n</code>\nimmediately after a <code>return</code>, <code>throw</code>, <code>break</code>, or <code>continue</code> token,\nor a <code>++</code> or <code>--</code> as a postfix operator (that is, <code>x++\\n</code> or <code>y--\\n</code>),\nthen it will terminate the statement, no exceptions.</p>\n\n<pre><code>//ok\nreturn 7\n\n//probably a mistake\nreturn\n       7\n</code></pre>\n\n<p>However, again, this is in fact <em>easier</em> to spot and avoid once you\nget out of the habit of terminating every statement with a semicolon.\nWhen I see the second, my brain instinctively associates the <code>\\n</code> with\n\u201cok, this is over now\u201d, because return is <em>always</em> terminated by just\na linebreak.</p>\n\n<p>Lining up the most relevant tokens on the left edge of the screen\nmakes them demonstrably easier for humans to quickly scan.  Piles of\nresearch on the subject of speed reading and eye-tracking suggest that\na missing token on the right is far more likely to be overlooked than\none on the left.  So, I say, make the right-edge irrelevant, and put\nthe important things on the left.</p>\n\n<h3>So which style is better?</h3>\n\n<p>To the extent that there is an objectively \u201cbetter\u201d choice, it appears\nto me that the minimal-semicolon/comma-first style is <strong>slightly</strong>\nsuperior, both because it is fundamentally more scannable and because\nit encourages programmers to better understand the language they use.</p>\n\n<p>I can pretty well guarantee that, if you care about this even a\nlittle, I care less about your JavaScript style than you do about\nmine.  This isn\u2019t an article where I try to convince you to write your\ncode like I write mine.  <a href=\"http://groups.google.com/group/nodejs/msg/428220ab8cd199d2\">We should all decide the pants policy in our\nown\nhomes.</a></p>\n\n<p>Just as a show of good faith\u2026</p>\n\n<h3 id=\"good-reasons\">Good Reasons to Put Semicolons Everywhere</h3>\n\n<p>The best reasons for excessive semicolon usage are esthetics and\npolitics.</p>\n\n<p>\u201cI put semicolons in my JavaScript because without semicolons, it\u2019s\nnot valid C/C++/Java/Whatever.\u201d  If you have to write a bunch of Java\nor C code in a project, and want your JavaScript to not look too\ndifferent, then that is a valid concern.\n(<a href=\"http://cassisjs.org\">Cassis</a> takes this approach to its absurd end.)</p>\n\n<p>\u201cWe do it this way because we use this linter, and it says to.\u201d\nConsistency is important, and linters are one way to help a group of\npeople stay consistent.  Writing an npm-style linter is on my todo\nlist, but it\u2019s not very high up on it.</p>\n\n<h3>The Most Terrible Reason to Put Semicolons Everywhere</h3>\n\n<p>\u201cThey\u2019re required because ASI is unreliable.\u201d  Seriously!?</p>\n\n<p>These rules date back to the early days of JavaScript, in the late\n90s.  They\u2019re not new, and in my opinion there is no excuse for\nsomeone calling themselves a professional JavaScripter and not\nunderstanding statement termination.  <strong>It is blatantly irresponsible\nof the thought leaders in the JavaScript community to continue to\nspread uncertainty rather than understanding.</strong></p>\n\n<p>Furthermore, the typical place where \u201cautomatic semicolon insertion\u201d\nbites unexpectedly is with the restricted productions.  <strong>Adding\nsemicolons to every line will not make <code>return\\nfoo</code> return anything\nother than <code>undefined</code>.</strong>  The problem is that you <strong>do</strong> use line\nbreaks, not that you <strong>don\u2019t</strong> use semicolons.</p>\n\n<p>The only way to prevent restricted productions from <em>ever</em> being an\nissue is to always use semicolons <em>and never use linebreaks</em>.  No one\nis suggesting that.  So stop talking about restricted productions as\nif they matter, or offering semicolon overuse as an alternative to\nunderstanding ASI.  You have to understand ASI to be a competent\nJavaScripter, period.</p>\n\n<p>Which leads me to\u2026</p>\n\n<h3>The Part Where I Get All Opinionated and Piss You Off (despite a noble effort to the contrary)</h3>\n\n<p>If you don\u2019t understand how statements in JavaScript are terminated,\nthen you just don\u2019t know JavaScript very well, and shouldn\u2019t write\nJavaScript programs professionally without supervision, and you\n<em>definitely</em> should not tell anyone else how to write their JavaScript\nprograms.</p>\n\n<p>I\u2019m guessing I just insulted you.  That\u2019s unfortunate.  I know that\nyou probably know all sorts of things <em>around</em> JavaScript, like the\nDOM, and CSS, and MSIE\u2019s little quirks, and jQuery.  You have maybe\nalso spent some time learning about closures and prototypes and scope\nand activation objects, and even hacked a few extensions onto V8 or\nSpiderMonkey.  You\u2019re not a dummy, I\u2019m sure.  In fact, you\u2019re almost\ncertainly smarter than I am, and probably better looking and nicer,\ntoo.  I\u2019m sure we have a lot in common, and could maybe even be\nfriends.</p>\n\n<p>But if you don\u2019t understand <em>what a JavaScript statement <b>is</b></em>,\nthen there is a huge hole in your understanding of perhaps the most\nfundamental aspect of the language.</p>\n\n<p>And that\u2019s ok.  I don\u2019t speak Spanish very well and my C is pretty\nnovice; I also don\u2019t call myself an expert in either one, though I\nknow enough to get by in many situations.  If I were to get a job that\ninvolved a lot of Spanish speaking or C coding, I\u2019d want someone\nwatching to help me avoid making any serious mistakes.</p>\n\n<p>Like most things in JavaScript, the statement termination rules are\nnot very <em>well</em> designed, but they\u2019re also not particularly <em>hard</em> to\nunderstand and use.  That understanding just takes a bit of time and\neffort.</p>\n\n<p>Cozy up with some hot chocolate and the ECMAScript spec some Saturday\nafternoon.  Practice a little.  Play around with some test programs.\nIt\u2019s a good time.</p>\n\n<p>Or don\u2019t do that, if you don\u2019t feel like it.  It\u2019s your life.  You\nalmost certainly have better things to do with it.</p>\n\n<p>Just please stop making authoritative claims like \u201cterminate all lines\nwith semicolons to be safe.\u201d  It\u2019s not any safer, or more reliable.</p>\n\n<h3>Addenda 1: \u201cleaders\u201d</h3>\n\n<blockquote>\n  <p>So, mr ruffler of feathers, who are these \u201cleaders\u201d you speak of?\n  Why didn\u2019t you name names?</p>\n</blockquote>\n\n<p>Because there are too many to name, and I don\u2019t know all of them.</p>\n\n<p>If you have been writing JavaScript for a while, and you provide\nguidance or leadership to another person who has been writing\nJavaScript for less time than you, then I\u2019m talking to you.  Being a\nleader is a responsibility.  Take it seriously.  Don\u2019t spread lies. Be\nan expert, or admit you\u2019re not an expert.  But don\u2019t drive that car\nwithout a license.</p>\n\n<h3 id=\"literary\">Addenda 2: Literary Programmer</h3>\n\n<blockquote>\n  <p>but in English, we put punctuation at the end, not the beginning</p>\n</blockquote>\n\n<p>JavaScript isn\u2019t english.  We also don\u2019t denote ownership (or\nsubject-verb connection) using a period in English.  We don\u2019t have\nObject Literals in English, and we only indent the first line of\nparagraphs, not all the middle sentences.</p>\n\n<p>This is such a silly argument, I have no choice but to fall in love\nwith it.  I started out your detractor, but you won my heart, Literary\nProgrammer.  From now on, I\u2019m going to only put line-breaks at the end\nof functions, and never in the middle, and indent the first line of\neach.</p>\n\n<h3>Addenda 3: Pedantry</h3>\n\n<blockquote>\n  <p>Why you wanna change my codes? What are you some kinda pedant?</p>\n</blockquote>\n\n<p>Code however you want.  I don\u2019t care, even a little.</p>\n\n<p>Please just don\u2019t lie to people.  That\u2019s all I\u2019m asking.  It\u2019s such a\nlittle bit of politeness.  It\u2019s not hard.  Just say true things,\ninstead of being a liar, that\u2019s all that this is about.</p>",
        "tree_html": ""
    },
    "reblog_key": "IYNRfrPQ",
    "recommended_color": null,
    "recommended_source": null,
    "short_url": "https://tmblr.co/Z7nwWy2CHkuB",
    "slug": "an-open-letter-to-javascript-leaders-regarding",
    "state": "published",
    "summary": "An Open Letter to JavaScript Leaders Regarding Semicolons",
    "tags": [],
    "timestamp": 1292633400,
    "title": "An Open Letter to JavaScript Leaders Regarding Semicolons",
    "trail": [
        {
            "blog": {
                "active": true,
                "can_be_followed": true,
                "name": "izs",
                "share_following": false,
                "share_likes": false,
                "theme": {
                    "avatar_shape": "square",
                    "background_color": "#444444",
                    "body_font": "Helvetica Neue",
                    "header_bounds": "978,2448,2355,0",
                    "header_focus_height": 1152,
                    "header_focus_width": 2048,
                    "header_full_height": 3264,
                    "header_full_width": 2448,
                    "header_image": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o.jpg",
                    "header_image_focused": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/mA1nbvglg/tumblr_static_tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_focused_v3.jpg",
                    "header_image_scaled": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_2048_v2.jpg",
                    "header_stretch": true,
                    "link_color": "#FB4C16",
                    "show_avatar": true,
                    "show_description": true,
                    "show_header_image": true,
                    "show_title": true,
                    "title_color": "#fb4c16",
                    "title_font": "Gibson",
                    "title_font_weight": "regular"
                }
            },
            "content": "<p>I got this email last night from Sean Silva:</p>\n\n<blockquote>\n  <p>I was browsing the code for your npm.js project (this file in\n  particular:&nbsp;<a href=\"https://github.com/isaacs/npm/blob/master/lib/npm.js\">https://github.com/isaacs/npm/blob/master/lib/npm.js</a>),\n  and noticed you using a style where you line up your commas under\n  the &lsquo;r&rsquo; of your var statements, and under your [ and { in\n  array/object literals. I&rsquo;m very fond of this kind of formatting, but\n  have been reluctant to use it since most js resources expound a fear\n  of js&rsquo;s automatic semicolon insertion wreaking havoc on your code if\n  you don&rsquo;t end lines with something which implies a continuation.</p>\n  \n  <p>Is this safe to place commas like this in browser code, or is it\n  just node where this is possible?</p>\n  \n  <p>2011-12-20 updated link to file</p>\n</blockquote>\n\n<p>I wrote a few paragraphs, and then decided to shorten it to just this\nresponse:</p>\n\n<blockquote>\n  <p>Yes, it&rsquo;s quite safe, and perfectly valid JS that every browser\n  understands.  Closure compiler, yuicompressor, packer, and jsmin all\n  can properly minify it.  There is no performance impact anywhere.</p>\n  \n  <p>I am sorry that, instead of educating you, the leaders in this\n  language community have given you lies and fear. &nbsp;That was shameful.\n  I recommend learning how statements in JS are actually terminated\n  (and in which cases they are <em>not</em> terminated), so that you can\n  write code that you find beautiful.</p>\n</blockquote>\n\n<p>Inimino posted <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\">this\nvery clear explanation</a>.  In his typical style, it is crisp, clear,\nauthoritative, well researched, and he generally kept his opinions to\nhimself.</p>\n\n<p>I am going to be a bit more opinionated.</p>\n\n<h3>The Rules</h3>\n\n<p>In general, <code>\\n</code> ends a statement unless:</p>\n\n<ol><li>The statement has an unclosed paren, array literal, or object\nliteral or ends in some other way that is not a valid way to end a\nstatement.  (For instance, ending with <code>.</code> or <code>,</code>.)</li>\n<li>The line is <code>--</code> or <code>++</code> (in which case it will decrement/increment\nthe next token.)</li>\n<li>It is a <code>for()</code>, <code>while()</code>, <code>do</code>, <code>if()</code>, or <code>else</code>, and there is\nno <code>{</code></li>\n<li>The next line starts with <code>[</code>, <code>(</code>, <code>+</code>, <code>*</code>, <code>/</code>, <code>-</code>, <code>,</code>, <code>.</code>,\nor some other binary operator that can only be found between two\ntokens in a single expression.</li>\n</ol><p>The first is pretty obvious.  Even JSLint is ok with <code>\\n</code> chars in\nJSON and parenthesized constructs, and with <code>var</code> statements that span\nmultiple lines ending in <code>,</code>.</p>\n\n<p>The second is super weird.  I&rsquo;ve never seen a case (outside of these\nsorts of conversations) where you&rsquo;d want to do write <code>i\\n++\\nj</code>, but,\npoint of fact, that&rsquo;s parsed as <code>i; ++j</code>, not <code>i++; j</code>.</p>\n\n<p>The third is well understood, if generally despised.  <code>if (x)\\ny()</code> is\nequivalent to <code>if (x) { y() }</code>.  The construct doesn&rsquo;t end until it\nreaches either a block, or a statement.</p>\n\n<p><code>;</code> is a valid JavaScript statement, so <code>if(x);</code> is equivalent to\n<code>if(x){}</code> or, &ldquo;If x, do nothing.&rdquo;  This is more commonly applied to\nloops where the loop check also is the update function.  Unusual, but\nnot unheard of.</p>\n\n<p>The fourth is generally the fud-inducing &ldquo;oh noes, you need\nsemicolons!&rdquo; case.  But, as it turns out, it&rsquo;s quite easy to <em>prefix</em>\nthose lines with semicolons if you don&rsquo;t mean them to be continuations\nof the previous line.  For example, instead of this:</p>\n\n<pre><code>foo();\n[1,2,3].forEach(bar);\n</code></pre>\n\n<p>you could do this:</p>\n\n<pre><code>foo()\n;[1,2,3].forEach(bar)\n</code></pre>\n\n<p>The advantage is that the prefixes are easier to notice, once you are\naccustomed to never seeing lines starting with <code>(</code> or <code>[</code> without\nsemis.</p>\n\n<h3>Restricted Productions</h3>\n\n<p>The other common argument for semicolons has to do with semicolon\ninsertion and &ldquo;restricted productions&rdquo;.  That is, if you have a <code>\\n</code>\nimmediately after a <code>return</code>, <code>throw</code>, <code>break</code>, or <code>continue</code> token,\nor a <code>++</code> or <code>--</code> as a postfix operator (that is, <code>x++\\n</code> or <code>y--\\n</code>),\nthen it will terminate the statement, no exceptions.</p>\n\n<pre><code>//ok\nreturn 7\n\n//probably a mistake\nreturn\n       7\n</code></pre>\n\n<p>However, again, this is in fact <em>easier</em> to spot and avoid once you\nget out of the habit of terminating every statement with a semicolon.\nWhen I see the second, my brain instinctively associates the <code>\\n</code> with\n&ldquo;ok, this is over now&rdquo;, because return is <em>always</em> terminated by just\na linebreak.</p>\n\n<p>Lining up the most relevant tokens on the left edge of the screen\nmakes them demonstrably easier for humans to quickly scan.  Piles of\nresearch on the subject of speed reading and eye-tracking suggest that\na missing token on the right is far more likely to be overlooked than\none on the left.  So, I say, make the right-edge irrelevant, and put\nthe important things on the left.</p>\n\n<h3>So which style is better?</h3>\n\n<p>To the extent that there is an objectively &ldquo;better&rdquo; choice, it appears\nto me that the minimal-semicolon/comma-first style is <strong>slightly</strong>\nsuperior, both because it is fundamentally more scannable and because\nit encourages programmers to better understand the language they use.</p>\n\n<p>I can pretty well guarantee that, if you care about this even a\nlittle, I care less about your JavaScript style than you do about\nmine.  This isn&rsquo;t an article where I try to convince you to write your\ncode like I write mine.  <a href=\"http://groups.google.com/group/nodejs/msg/428220ab8cd199d2\">We should all decide the pants policy in our\nown\nhomes.</a></p>\n\n<p>Just as a show of good faith&hellip;</p>\n\n<h3>Good Reasons to Put Semicolons Everywhere</h3>\n\n<p>The best reasons for excessive semicolon usage are esthetics and\npolitics.</p>\n\n<p>&ldquo;I put semicolons in my JavaScript because without semicolons, it&rsquo;s\nnot valid C/C++/Java/Whatever.&rdquo;  If you have to write a bunch of Java\nor C code in a project, and want your JavaScript to not look too\ndifferent, then that is a valid concern.\n(<a href=\"http://cassisjs.org\">Cassis</a> takes this approach to its absurd end.)</p>\n\n<p>&ldquo;We do it this way because we use this linter, and it says to.&rdquo;\nConsistency is important, and linters are one way to help a group of\npeople stay consistent.  Writing an npm-style linter is on my todo\nlist, but it&rsquo;s not very high up on it.</p>\n\n<h3>The Most Terrible Reason to Put Semicolons Everywhere</h3>\n\n<p>&ldquo;They&rsquo;re required because ASI is unreliable.&rdquo;  Seriously!?</p>\n\n<p>These rules date back to the early days of JavaScript, in the late\n90s.  They&rsquo;re not new, and in my opinion there is no excuse for\nsomeone calling themselves a professional JavaScripter and not\nunderstanding statement termination.  <strong>It is blatantly irresponsible\nof the thought leaders in the JavaScript community to continue to\nspread uncertainty rather than understanding.</strong></p>\n\n<p>Furthermore, the typical place where &ldquo;automatic semicolon insertion&rdquo;\nbites unexpectedly is with the restricted productions.  <strong>Adding\nsemicolons to every line will not make <code>return\\nfoo</code> return anything\nother than <code>undefined</code>.</strong>  The problem is that you <strong>do</strong> use line\nbreaks, not that you <strong>don&rsquo;t</strong> use semicolons.</p>\n\n<p>The only way to prevent restricted productions from <em>ever</em> being an\nissue is to always use semicolons <em>and never use linebreaks</em>.  No one\nis suggesting that.  So stop talking about restricted productions as\nif they matter, or offering semicolon overuse as an alternative to\nunderstanding ASI.  You have to understand ASI to be a competent\nJavaScripter, period.</p>\n\n<p>Which leads me to&hellip;</p>\n\n<h3>The Part Where I Get All Opinionated and Piss You Off (despite a noble effort to the contrary)</h3>\n\n<p>If you don&rsquo;t understand how statements in JavaScript are terminated,\nthen you just don&rsquo;t know JavaScript very well, and shouldn&rsquo;t write\nJavaScript programs professionally without supervision, and you\n<em>definitely</em> should not tell anyone else how to write their JavaScript\nprograms.</p>\n\n<p>I&rsquo;m guessing I just insulted you.  That&rsquo;s unfortunate.  I know that\nyou probably know all sorts of things <em>around</em> JavaScript, like the\nDOM, and CSS, and MSIE&rsquo;s little quirks, and jQuery.  You have maybe\nalso spent some time learning about closures and prototypes and scope\nand activation objects, and even hacked a few extensions onto V8 or\nSpiderMonkey.  You&rsquo;re not a dummy, I&rsquo;m sure.  In fact, you&rsquo;re almost\ncertainly smarter than I am, and probably better looking and nicer,\ntoo.  I&rsquo;m sure we have a lot in common, and could maybe even be\nfriends.</p>\n\n<p>But if you don&rsquo;t understand <em>what a JavaScript statement <b>is</b></em>,\nthen there is a huge hole in your understanding of perhaps the most\nfundamental aspect of the language.</p>\n\n<p>And that&rsquo;s ok.  I don&rsquo;t speak Spanish very well and my C is pretty\nnovice; I also don&rsquo;t call myself an expert in either one, though I\nknow enough to get by in many situations.  If I were to get a job that\ninvolved a lot of Spanish speaking or C coding, I&rsquo;d want someone\nwatching to help me avoid making any serious mistakes.</p>\n\n<p>Like most things in JavaScript, the statement termination rules are\nnot very <em>well</em> designed, but they&rsquo;re also not particularly <em>hard</em> to\nunderstand and use.  That understanding just takes a bit of time and\neffort.</p>\n\n<p>Cozy up with some hot chocolate and the ECMAScript spec some Saturday\nafternoon.  Practice a little.  Play around with some test programs.\nIt&rsquo;s a good time.</p>\n\n<p>Or don&rsquo;t do that, if you don&rsquo;t feel like it.  It&rsquo;s your life.  You\nalmost certainly have better things to do with it.</p>\n\n<p>Just please stop making authoritative claims like &ldquo;terminate all lines\nwith semicolons to be safe.&rdquo;  It&rsquo;s not any safer, or more reliable.</p>\n\n<h3>Addenda 1: &ldquo;leaders&rdquo;</h3>\n\n<blockquote>\n  <p>So, mr ruffler of feathers, who are these &ldquo;leaders&rdquo; you speak of?\n  Why didn&rsquo;t you name names?</p>\n</blockquote>\n\n<p>Because there are too many to name, and I don&rsquo;t know all of them.</p>\n\n<p>If you have been writing JavaScript for a while, and you provide\nguidance or leadership to another person who has been writing\nJavaScript for less time than you, then I&rsquo;m talking to you.  Being a\nleader is a responsibility.  Take it seriously.  Don&rsquo;t spread lies. Be\nan expert, or admit you&rsquo;re not an expert.  But don&rsquo;t drive that car\nwithout a license.</p>\n\n<h3>Addenda 2: Literary Programmer</h3>\n\n<blockquote>\n  <p>but in English, we put punctuation at the end, not the beginning</p>\n</blockquote>\n\n<p>JavaScript isn&rsquo;t english.  We also don&rsquo;t denote ownership (or\nsubject-verb connection) using a period in English.  We don&rsquo;t have\nObject Literals in English, and we only indent the first line of\nparagraphs, not all the middle sentences.</p>\n\n<p>This is such a silly argument, I have no choice but to fall in love\nwith it.  I started out your detractor, but you won my heart, Literary\nProgrammer.  From now on, I&rsquo;m going to only put line-breaks at the end\nof functions, and never in the middle, and indent the first line of\neach.</p>\n\n<h3>Addenda 3: Pedantry</h3>\n\n<blockquote>\n  <p>Why you wanna change my codes? What are you some kinda pedant?</p>\n</blockquote>\n\n<p>Code however you want.  I don&rsquo;t care, even a little.</p>\n\n<p>Please just don&rsquo;t lie to people.  That&rsquo;s all I&rsquo;m asking.  It&rsquo;s such a\nlittle bit of politeness.  It&rsquo;s not hard.  Just say true things,\ninstead of being a liar, that&rsquo;s all that this is about.</p>",
            "content_raw": "<p>I got this email last night from Sean Silva:</p>\n\n<blockquote>\n  <p>I was browsing the code for your npm.js project (this file in\n  particular:\u00a0<a href=\"https://github.com/isaacs/npm/blob/master/lib/npm.js\">https://github.com/isaacs/npm/blob/master/lib/npm.js</a>),\n  and noticed you using a style where you line up your commas under\n  the \u2018r\u2019 of your var statements, and under your [ and { in\n  array/object literals. I\u2019m very fond of this kind of formatting, but\n  have been reluctant to use it since most js resources expound a fear\n  of js\u2019s automatic semicolon insertion wreaking havoc on your code if\n  you don\u2019t end lines with something which implies a continuation.</p>\n  \n  <p>Is this safe to place commas like this in browser code, or is it\n  just node where this is possible?</p>\n  \n  <p><ins>2011-12-20 updated link to file</ins></p>\n</blockquote>\n\n<p>I wrote a few paragraphs, and then decided to shorten it to just this\nresponse:</p>\n\n<blockquote>\n  <p>Yes, it\u2019s quite safe, and perfectly valid JS that every browser\n  understands.  Closure compiler, yuicompressor, packer, and jsmin all\n  can properly minify it.  There is no performance impact anywhere.</p>\n  \n  <p>I am sorry that, instead of educating you, the leaders in this\n  language community have given you lies and fear. \u00a0That was shameful.\n  I recommend learning how statements in JS are actually terminated\n  (and in which cases they are <em>not</em> terminated), so that you can\n  write code that you find beautiful.</p>\n</blockquote>\n\n<p>Inimino posted <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\">this\nvery clear explanation</a>.  In his typical style, it is crisp, clear,\nauthoritative, well researched, and he generally kept his opinions to\nhimself.</p>\n\n<p>I am going to be a bit more opinionated.</p>\n\n<h3>The Rules</h3>\n\n<p>In general, <code>\\n</code> ends a statement unless:</p>\n\n<ol><li>The statement has an unclosed paren, array literal, or object\nliteral or ends in some other way that is not a valid way to end a\nstatement.  (For instance, ending with <code>.</code> or <code>,</code>.)</li>\n<li>The line is <code>--</code> or <code>++</code> (in which case it will decrement/increment\nthe next token.)</li>\n<li>It is a <code>for()</code>, <code>while()</code>, <code>do</code>, <code>if()</code>, or <code>else</code>, and there is\nno <code>{</code></li>\n<li>The next line starts with <code>[</code>, <code>(</code>, <code>+</code>, <code>*</code>, <code>/</code>, <code>-</code>, <code>,</code>, <code>.</code>,\nor some other binary operator that can only be found between two\ntokens in a single expression.</li>\n</ol><p>The first is pretty obvious.  Even JSLint is ok with <code>\\n</code> chars in\nJSON and parenthesized constructs, and with <code>var</code> statements that span\nmultiple lines ending in <code>,</code>.</p>\n\n<p>The second is super weird.  I\u2019ve never seen a case (outside of these\nsorts of conversations) where you\u2019d want to do write <code>i\\n++\\nj</code>, but,\npoint of fact, that\u2019s parsed as <code>i; ++j</code>, not <code>i++; j</code>.</p>\n\n<p>The third is well understood, if generally despised.  <code>if (x)\\ny()</code> is\nequivalent to <code>if (x) { y() }</code>.  The construct doesn\u2019t end until it\nreaches either a block, or a statement.</p>\n\n<p><code>;</code> is a valid JavaScript statement, so <code>if(x);</code> is equivalent to\n<code>if(x){}</code> or, \u201cIf x, do nothing.\u201d  This is more commonly applied to\nloops where the loop check also is the update function.  Unusual, but\nnot unheard of.</p>\n\n<p>The fourth is generally the fud-inducing \u201coh noes, you need\nsemicolons!\u201d case.  But, as it turns out, it\u2019s quite easy to <em>prefix</em>\nthose lines with semicolons if you don\u2019t mean them to be continuations\nof the previous line.  For example, instead of this:</p>\n\n<pre><code>foo();\n[1,2,3].forEach(bar);\n</code></pre>\n\n<p>you could do this:</p>\n\n<pre><code>foo()\n;[1,2,3].forEach(bar)\n</code></pre>\n\n<p>The advantage is that the prefixes are easier to notice, once you are\naccustomed to never seeing lines starting with <code>(</code> or <code>[</code> without\nsemis.</p>\n\n<h3>Restricted Productions</h3>\n\n<p>The other common argument for semicolons has to do with semicolon\ninsertion and \u201crestricted productions\u201d.  That is, if you have a <code>\\n</code>\nimmediately after a <code>return</code>, <code>throw</code>, <code>break</code>, or <code>continue</code> token,\nor a <code>++</code> or <code>--</code> as a postfix operator (that is, <code>x++\\n</code> or <code>y--\\n</code>),\nthen it will terminate the statement, no exceptions.</p>\n\n<pre><code>//ok\nreturn 7\n\n//probably a mistake\nreturn\n       7\n</code></pre>\n\n<p>However, again, this is in fact <em>easier</em> to spot and avoid once you\nget out of the habit of terminating every statement with a semicolon.\nWhen I see the second, my brain instinctively associates the <code>\\n</code> with\n\u201cok, this is over now\u201d, because return is <em>always</em> terminated by just\na linebreak.</p>\n\n<p>Lining up the most relevant tokens on the left edge of the screen\nmakes them demonstrably easier for humans to quickly scan.  Piles of\nresearch on the subject of speed reading and eye-tracking suggest that\na missing token on the right is far more likely to be overlooked than\none on the left.  So, I say, make the right-edge irrelevant, and put\nthe important things on the left.</p>\n\n<h3>So which style is better?</h3>\n\n<p>To the extent that there is an objectively \u201cbetter\u201d choice, it appears\nto me that the minimal-semicolon/comma-first style is <strong>slightly</strong>\nsuperior, both because it is fundamentally more scannable and because\nit encourages programmers to better understand the language they use.</p>\n\n<p>I can pretty well guarantee that, if you care about this even a\nlittle, I care less about your JavaScript style than you do about\nmine.  This isn\u2019t an article where I try to convince you to write your\ncode like I write mine.  <a href=\"http://groups.google.com/group/nodejs/msg/428220ab8cd199d2\">We should all decide the pants policy in our\nown\nhomes.</a></p>\n\n<p>Just as a show of good faith\u2026</p>\n\n<h3 id=\"good-reasons\">Good Reasons to Put Semicolons Everywhere</h3>\n\n<p>The best reasons for excessive semicolon usage are esthetics and\npolitics.</p>\n\n<p>\u201cI put semicolons in my JavaScript because without semicolons, it\u2019s\nnot valid C/C++/Java/Whatever.\u201d  If you have to write a bunch of Java\nor C code in a project, and want your JavaScript to not look too\ndifferent, then that is a valid concern.\n(<a href=\"http://cassisjs.org\">Cassis</a> takes this approach to its absurd end.)</p>\n\n<p>\u201cWe do it this way because we use this linter, and it says to.\u201d\nConsistency is important, and linters are one way to help a group of\npeople stay consistent.  Writing an npm-style linter is on my todo\nlist, but it\u2019s not very high up on it.</p>\n\n<h3>The Most Terrible Reason to Put Semicolons Everywhere</h3>\n\n<p>\u201cThey\u2019re required because ASI is unreliable.\u201d  Seriously!?</p>\n\n<p>These rules date back to the early days of JavaScript, in the late\n90s.  They\u2019re not new, and in my opinion there is no excuse for\nsomeone calling themselves a professional JavaScripter and not\nunderstanding statement termination.  <strong>It is blatantly irresponsible\nof the thought leaders in the JavaScript community to continue to\nspread uncertainty rather than understanding.</strong></p>\n\n<p>Furthermore, the typical place where \u201cautomatic semicolon insertion\u201d\nbites unexpectedly is with the restricted productions.  <strong>Adding\nsemicolons to every line will not make <code>return\\nfoo</code> return anything\nother than <code>undefined</code>.</strong>  The problem is that you <strong>do</strong> use line\nbreaks, not that you <strong>don\u2019t</strong> use semicolons.</p>\n\n<p>The only way to prevent restricted productions from <em>ever</em> being an\nissue is to always use semicolons <em>and never use linebreaks</em>.  No one\nis suggesting that.  So stop talking about restricted productions as\nif they matter, or offering semicolon overuse as an alternative to\nunderstanding ASI.  You have to understand ASI to be a competent\nJavaScripter, period.</p>\n\n<p>Which leads me to\u2026</p>\n\n<h3>The Part Where I Get All Opinionated and Piss You Off (despite a noble effort to the contrary)</h3>\n\n<p>If you don\u2019t understand how statements in JavaScript are terminated,\nthen you just don\u2019t know JavaScript very well, and shouldn\u2019t write\nJavaScript programs professionally without supervision, and you\n<em>definitely</em> should not tell anyone else how to write their JavaScript\nprograms.</p>\n\n<p>I\u2019m guessing I just insulted you.  That\u2019s unfortunate.  I know that\nyou probably know all sorts of things <em>around</em> JavaScript, like the\nDOM, and CSS, and MSIE\u2019s little quirks, and jQuery.  You have maybe\nalso spent some time learning about closures and prototypes and scope\nand activation objects, and even hacked a few extensions onto V8 or\nSpiderMonkey.  You\u2019re not a dummy, I\u2019m sure.  In fact, you\u2019re almost\ncertainly smarter than I am, and probably better looking and nicer,\ntoo.  I\u2019m sure we have a lot in common, and could maybe even be\nfriends.</p>\n\n<p>But if you don\u2019t understand <em>what a JavaScript statement <b>is</b></em>,\nthen there is a huge hole in your understanding of perhaps the most\nfundamental aspect of the language.</p>\n\n<p>And that\u2019s ok.  I don\u2019t speak Spanish very well and my C is pretty\nnovice; I also don\u2019t call myself an expert in either one, though I\nknow enough to get by in many situations.  If I were to get a job that\ninvolved a lot of Spanish speaking or C coding, I\u2019d want someone\nwatching to help me avoid making any serious mistakes.</p>\n\n<p>Like most things in JavaScript, the statement termination rules are\nnot very <em>well</em> designed, but they\u2019re also not particularly <em>hard</em> to\nunderstand and use.  That understanding just takes a bit of time and\neffort.</p>\n\n<p>Cozy up with some hot chocolate and the ECMAScript spec some Saturday\nafternoon.  Practice a little.  Play around with some test programs.\nIt\u2019s a good time.</p>\n\n<p>Or don\u2019t do that, if you don\u2019t feel like it.  It\u2019s your life.  You\nalmost certainly have better things to do with it.</p>\n\n<p>Just please stop making authoritative claims like \u201cterminate all lines\nwith semicolons to be safe.\u201d  It\u2019s not any safer, or more reliable.</p>\n\n<h3>Addenda 1: \u201cleaders\u201d</h3>\n\n<blockquote>\n  <p>So, mr ruffler of feathers, who are these \u201cleaders\u201d you speak of?\n  Why didn\u2019t you name names?</p>\n</blockquote>\n\n<p>Because there are too many to name, and I don\u2019t know all of them.</p>\n\n<p>If you have been writing JavaScript for a while, and you provide\nguidance or leadership to another person who has been writing\nJavaScript for less time than you, then I\u2019m talking to you.  Being a\nleader is a responsibility.  Take it seriously.  Don\u2019t spread lies. Be\nan expert, or admit you\u2019re not an expert.  But don\u2019t drive that car\nwithout a license.</p>\n\n<h3 id=\"literary\">Addenda 2: Literary Programmer</h3>\n\n<blockquote>\n  <p>but in English, we put punctuation at the end, not the beginning</p>\n</blockquote>\n\n<p>JavaScript isn\u2019t english.  We also don\u2019t denote ownership (or\nsubject-verb connection) using a period in English.  We don\u2019t have\nObject Literals in English, and we only indent the first line of\nparagraphs, not all the middle sentences.</p>\n\n<p>This is such a silly argument, I have no choice but to fall in love\nwith it.  I started out your detractor, but you won my heart, Literary\nProgrammer.  From now on, I\u2019m going to only put line-breaks at the end\nof functions, and never in the middle, and indent the first line of\neach.</p>\n\n<h3>Addenda 3: Pedantry</h3>\n\n<blockquote>\n  <p>Why you wanna change my codes? What are you some kinda pedant?</p>\n</blockquote>\n\n<p>Code however you want.  I don\u2019t care, even a little.</p>\n\n<p>Please just don\u2019t lie to people.  That\u2019s all I\u2019m asking.  It\u2019s such a\nlittle bit of politeness.  It\u2019s not hard.  Just say true things,\ninstead of being a liar, that\u2019s all that this is about.</p>",
            "is_current_item": true,
            "is_root_item": true,
            "post": {
                "id": "2353458699"
            }
        }
    ],
    "type": "text"
}