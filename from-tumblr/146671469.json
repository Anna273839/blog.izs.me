{
    "blog": {
        "description": "Writing and Stuff from Isaac Z. Schlueter",
        "name": "izs",
        "title": "blog.izs.me",
        "updated": 1544051896,
        "url": "http://blog.izs.me/",
        "uuid": "t:qZa3tMNNGjX7PQ45aXJ-jw"
    },
    "blog_name": "izs",
    "body": "<p>Javascript provides two very handy operators, <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:in_Operator\">in</a> and <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:delete_Operator\">delete</a>.</p>\n\n<p>Consider this code fragment:</p>\n\n<p><code class=\"block javascript\">var obj = {\n\u00a0foo : 'quux',\n\u00a0bar : 'baz',\n\u00a0doSomething : function () {\n\u00a0\u00a0// do something...\n\u00a0}\n};</code></p>\n\n<p>So, we&rsquo;ve created an object, and then some other things happen.  Later in the code, we want to remove the &ldquo;foo&rdquo; property, so we do this:</p>\n\n<p><code class=\"javascript block\">obj.foo = undefined;</code></p>\n\n<p>Still later, we only want to do something if the foo property has not been unset, so we check it:</p>\n\n<p><code class=\"javascript block\">if ( obj.foo !== undefined ) {\n\u00a0// do something\n}</code></p>\n\n<p>That works, and it&rsquo;s fairly common, but it&rsquo;s klunky, and not as readable as this:</p>\n\n<p><code class=\"javascript block\">delete obj.foo;</code></p>\n\n<p><code class=\"javascript block\">if ( 'foo' in obj ) {\n\u00a0// do something\n}</code></p>\n\n<p>The first one says, <q>Delete &ldquo;foo&rdquo; from the object.</q>  The second asks, <q>Is &ldquo;foo&rdquo; in the object?</q>  The difference between the first and second approaches is that the second uses intuitive wording in the code.</p>\n\n<p>Note: You <em>must</em> use <code>delete</code> if you want to use <code>in</code>.  Setting something to <code>undefined</code> manually will not cause it to return false when testing whether the property is <code>in</code> the object.</p>\n\n<p>As an added bonus, using the <code>delete</code> operator also removes the property from the for/in iteration loop, since it actually removes it from the object&rsquo;s key list rather than simply setting it&rsquo;s value to <code>undefined</code>.</p>\n\n<p><code class=\"block javascript\">var obj = {asdf:'foo',bar:'baz'};\nobj.asdf = undefined;\nfor ( var i in obj ) {\n\u00a0console.log(i,obj[i]);\n}\n// outputs:\n// asdf undefined\n// bar baz</code></p>\n\n<p><code class=\"block javascript\">var obj = {asdf:'foo',bar:'baz'};\ndelete obj.asdf;\nfor ( var i in obj ) {\n\u00a0console.log(i,obj[i]);\n}\n// outputs:\n// bar baz</code></p>\n\n<p>Note: you&rsquo;ll need to wrap the &ldquo;in&rdquo; statement in parentheses if you want to negate it.  For example, this is a bug:</p>\n\n<p><code class=\"block javascript\">var obj = { asdf:'foo',bar:'baz' };\nvar f = 'quux';\nif ( !f in obj ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<p>The alert will never fire.  Can you figure out what&rsquo;s happening?  Here&rsquo;s a clue:</p>\n\n<p><code class=\"block javascript\">var obj = { 'false':1, asdf:'foo', bar:'baz' };\nvar f = 'quux';\nif ( !f in obj ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<p>Now the alert will fire.  What&rsquo;s up?</p>\n\n<p>The order of operations is this:</p>\n\n<ol><li>Process the !f, which converts &lsquo;quux&rsquo; to a boolean (true), and then gets the opposite (false).</li>\n    <li>The &ldquo;in&rdquo; operator converts the value back to a string, and false.toString() is the string 'false&rsquo;.</li>\n    <li>Since 'false&rsquo; is not a key in the object, the &ldquo;in&rdquo; operator returns false, and the conditional fails.</li>\n</ol><p>In the second case, since the string 'false&rsquo; <em>is</em> a key in the object, the &ldquo;in&rdquo; operator returns true, and the conditional fires.  Of course, using &ldquo;false&rdquo; as a key in an object is a really stupid thing to do, but if some bunk data comes into your program somehow, it can happen.  Always wrap your &ldquo;in&rdquo; clauses in parentheses, and you&rsquo;ll never have a problem.  In this case, it works as expected:</p>\n\n<p><code class=\"block javascript\">var obj = { asdf:'foo', bar:'baz' };\nvar f = 'quux';\nif ( !(f in obj) ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<h3>Update</h3>\n\n<p>I&rsquo;m finding that a lot of people are hitting this page with search queries that seem to indicate they&rsquo;re looking to remove a style property from a Dom node.  <code>delete</code> won&rsquo;t help you much there, since the <code>style</code> property is a get-and-set-only property.  (IE, you can read from and write to it, but you can&rsquo;t delete from it.)</p>\n\n<p>Most of the time, you shouldn&rsquo;t be messing with the <code>style</code> property directly in Javascript, anyhow.  Instead, add and remove semantically meaningful class names, and put the style information related to those states in the CSS.  Of course that&rsquo;s not always an option, I know.  So, you can remove the inline setting by simply setting it to an empty string, like this:</p>\n\n<p><code class=\"block javascript\">document.body.style.background=\"red\"; // turns the page red.\ndocument.body.style.background=\"\"; // turns the page back to whatever it was.</code></p>\n\n<p>Cheers!</p>",
    "can_like": false,
    "can_reblog": false,
    "can_reply": false,
    "can_send_in_message": true,
    "date": "2007-06-18 17:00:03 GMT",
    "display_avatar": true,
    "format": "markdown",
    "id": 146671469,
    "is_blocks_post_format": false,
    "note_count": 2,
    "post_url": "http://blog.izs.me/post/146671469/javascript-style-tip-use-in-and-delete",
    "reblog": {
        "comment": "<p>Javascript provides two very handy operators, <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:in_Operator\">in</a> and <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:delete_Operator\">delete</a>.</p>\n\n<p>Consider this code fragment:</p>\n\n<p><code class=\"block javascript\">var obj = {\n\u00a0foo : 'quux',\n\u00a0bar : 'baz',\n\u00a0doSomething : function () {\n\u00a0\u00a0// do something...\n\u00a0}\n};</code></p>\n\n<p>So, we\u2019ve created an object, and then some other things happen.  Later in the code, we want to remove the \u201cfoo\u201d property, so we do this:</p>\n\n<p><code class=\"javascript block\">obj.foo = undefined;</code></p>\n\n<p>Still later, we only want to do something if the foo property has not been unset, so we check it:</p>\n\n<p><code class=\"javascript block\">if ( obj.foo !== undefined ) {\n\u00a0// do something\n}</code></p>\n\n<p>That works, and it\u2019s fairly common, but it\u2019s klunky, and not as readable as this:</p>\n\n<p><code class=\"javascript block\">delete obj.foo;</code></p>\n\n<p><code class=\"javascript block\">if ( 'foo' in obj ) {\n\u00a0// do something\n}</code></p>\n\n<p>The first one says, <q>Delete \u201cfoo\u201d from the object.</q>  The second asks, <q>Is \u201cfoo\u201d in the object?</q>  The difference between the first and second approaches is that the second uses intuitive wording in the code.</p>\n\n<p>Note: You <em>must</em> use <code>delete</code> if you want to use <code>in</code>.  Setting something to <code>undefined</code> manually will not cause it to return false when testing whether the property is <code>in</code> the object.</p>\n\n<p>As an added bonus, using the <code>delete</code> operator also removes the property from the for/in iteration loop, since it actually removes it from the object\u2019s key list rather than simply setting it\u2019s value to <code>undefined</code>.</p>\n\n<p><code class=\"block javascript\">var obj = {asdf:'foo',bar:'baz'};\nobj.asdf = undefined;\nfor ( var i in obj ) {\n\u00a0console.log(i,obj[i]);\n}\n// outputs:\n// asdf undefined\n// bar baz</code></p>\n\n<p><code class=\"block javascript\">var obj = {asdf:'foo',bar:'baz'};\ndelete obj.asdf;\nfor ( var i in obj ) {\n\u00a0console.log(i,obj[i]);\n}\n// outputs:\n// bar baz</code></p>\n\n<p>Note: you\u2019ll need to wrap the \u201cin\u201d statement in parentheses if you want to negate it.  For example, this is a bug:</p>\n\n<p><code class=\"block javascript\">var obj = { asdf:'foo',bar:'baz' };\nvar f = 'quux';\nif ( !f in obj ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<p>The alert will never fire.  Can you figure out what\u2019s happening?  Here\u2019s a clue:</p>\n\n<p><code class=\"block javascript\">var obj = { 'false':1, asdf:'foo', bar:'baz' };\nvar f = 'quux';\nif ( !f in obj ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<p>Now the alert will fire.  What\u2019s up?</p>\n\n<p>The order of operations is this:</p>\n\n<ol><li>Process the !f, which converts \u2018quux\u2019 to a boolean (true), and then gets the opposite (false).</li>\n    <li>The \u201cin\u201d operator converts the value back to a string, and false.toString() is the string 'false\u2019.</li>\n    <li>Since 'false\u2019 is not a key in the object, the \u201cin\u201d operator returns false, and the conditional fails.</li>\n</ol><p>In the second case, since the string 'false\u2019 <em>is</em> a key in the object, the \u201cin\u201d operator returns true, and the conditional fires.  Of course, using \u201cfalse\u201d as a key in an object is a really stupid thing to do, but if some bunk data comes into your program somehow, it can happen.  Always wrap your \u201cin\u201d clauses in parentheses, and you\u2019ll never have a problem.  In this case, it works as expected:</p>\n\n<p><code class=\"block javascript\">var obj = { asdf:'foo', bar:'baz' };\nvar f = 'quux';\nif ( !(f in obj) ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<h3>Update</h3>\n\n<p>I\u2019m finding that a lot of people are hitting this page with search queries that seem to indicate they\u2019re looking to remove a style property from a Dom node.  <code>delete</code> won\u2019t help you much there, since the <code>style</code> property is a get-and-set-only property.  (IE, you can read from and write to it, but you can\u2019t delete from it.)</p>\n\n<p>Most of the time, you shouldn\u2019t be messing with the <code>style</code> property directly in Javascript, anyhow.  Instead, add and remove semantically meaningful class names, and put the style information related to those states in the CSS.  Of course that\u2019s not always an option, I know.  So, you can remove the inline setting by simply setting it to an empty string, like this:</p>\n\n<p><code class=\"block javascript\">document.body.style.background=\"red\"; // turns the page red.\ndocument.body.style.background=\"\"; // turns the page back to whatever it was.</code></p>\n\n<p>Cheers!</p>",
        "tree_html": ""
    },
    "reblog_key": "SN6aA7eK",
    "recommended_color": null,
    "recommended_source": null,
    "short_url": "https://tmblr.co/Z7nwWy8lWTj",
    "slug": "javascript-style-tip-use-in-and-delete",
    "state": "published",
    "summary": "Javascript Style Tip: Use \"in\" and \"delete\"",
    "tags": [
        "Code Beauty",
        "Javascript"
    ],
    "timestamp": 1182186003,
    "title": "Javascript Style Tip: Use \"in\" and \"delete\"",
    "trail": [
        {
            "blog": {
                "active": true,
                "can_be_followed": true,
                "name": "izs",
                "share_following": false,
                "share_likes": false,
                "theme": {
                    "avatar_shape": "square",
                    "background_color": "#444444",
                    "body_font": "Helvetica Neue",
                    "header_bounds": "978,2448,2355,0",
                    "header_focus_height": 1152,
                    "header_focus_width": 2048,
                    "header_full_height": 3264,
                    "header_full_width": 2448,
                    "header_image": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o.jpg",
                    "header_image_focused": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/mA1nbvglg/tumblr_static_tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_focused_v3.jpg",
                    "header_image_scaled": "https://static.tumblr.com/d248e27715343669f06a3852fd2cda53/utow0jf/nwUnbvgl6/tumblr_static_d2yiqqjdv1w8gsw0s0g4goc0o_2048_v2.jpg",
                    "header_stretch": true,
                    "link_color": "#FB4C16",
                    "show_avatar": true,
                    "show_description": true,
                    "show_header_image": true,
                    "show_title": true,
                    "title_color": "#fb4c16",
                    "title_font": "Gibson",
                    "title_font_weight": "regular"
                }
            },
            "content": "<p>Javascript provides two very handy operators, <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:in_Operator\">in</a> and <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:delete_Operator\">delete</a>.</p>\n\n<p>Consider this code fragment:</p>\n\n<p><code>var obj = {\n&nbsp;foo : 'quux',\n&nbsp;bar : 'baz',\n&nbsp;doSomething : function () {\n&nbsp;&nbsp;// do something...\n&nbsp;}\n};</code></p>\n\n<p>So, we&rsquo;ve created an object, and then some other things happen.  Later in the code, we want to remove the &ldquo;foo&rdquo; property, so we do this:</p>\n\n<p><code>obj.foo = undefined;</code></p>\n\n<p>Still later, we only want to do something if the foo property has not been unset, so we check it:</p>\n\n<p><code>if ( obj.foo !== undefined ) {\n&nbsp;// do something\n}</code></p>\n\n<p>That works, and it&rsquo;s fairly common, but it&rsquo;s klunky, and not as readable as this:</p>\n\n<p><code>delete obj.foo;</code></p>\n\n<p><code>if ( 'foo' in obj ) {\n&nbsp;// do something\n}</code></p>\n\n<p>The first one says, Delete &ldquo;foo&rdquo; from the object.  The second asks, Is &ldquo;foo&rdquo; in the object?  The difference between the first and second approaches is that the second uses intuitive wording in the code.</p>\n\n<p>Note: You <em>must</em> use <code>delete</code> if you want to use <code>in</code>.  Setting something to <code>undefined</code> manually will not cause it to return false when testing whether the property is <code>in</code> the object.</p>\n\n<p>As an added bonus, using the <code>delete</code> operator also removes the property from the for/in iteration loop, since it actually removes it from the object&rsquo;s key list rather than simply setting it&rsquo;s value to <code>undefined</code>.</p>\n\n<p><code>var obj = {asdf:'foo',bar:'baz'};\nobj.asdf = undefined;\nfor ( var i in obj ) {\n&nbsp;console.log(i,obj[i]);\n}\n// outputs:\n// asdf undefined\n// bar baz</code></p>\n\n<p><code>var obj = {asdf:'foo',bar:'baz'};\ndelete obj.asdf;\nfor ( var i in obj ) {\n&nbsp;console.log(i,obj[i]);\n}\n// outputs:\n// bar baz</code></p>\n\n<p>Note: you&rsquo;ll need to wrap the &ldquo;in&rdquo; statement in parentheses if you want to negate it.  For example, this is a bug:</p>\n\n<p><code>var obj = { asdf:'foo',bar:'baz' };\nvar f = 'quux';\nif ( !f in obj ) {\n&nbsp;alert( 'not there!' );\n}</code></p>\n\n<p>The alert will never fire.  Can you figure out what&rsquo;s happening?  Here&rsquo;s a clue:</p>\n\n<p><code>var obj = { 'false':1, asdf:'foo', bar:'baz' };\nvar f = 'quux';\nif ( !f in obj ) {\n&nbsp;alert( 'not there!' );\n}</code></p>\n\n<p>Now the alert will fire.  What&rsquo;s up?</p>\n\n<p>The order of operations is this:</p>\n\n<ol><li>Process the !f, which converts &lsquo;quux&rsquo; to a boolean (true), and then gets the opposite (false).</li>\n    <li>The &ldquo;in&rdquo; operator converts the value back to a string, and false.toString() is the string 'false&rsquo;.</li>\n    <li>Since 'false&rsquo; is not a key in the object, the &ldquo;in&rdquo; operator returns false, and the conditional fails.</li>\n</ol><p>In the second case, since the string 'false&rsquo; <em>is</em> a key in the object, the &ldquo;in&rdquo; operator returns true, and the conditional fires.  Of course, using &ldquo;false&rdquo; as a key in an object is a really stupid thing to do, but if some bunk data comes into your program somehow, it can happen.  Always wrap your &ldquo;in&rdquo; clauses in parentheses, and you&rsquo;ll never have a problem.  In this case, it works as expected:</p>\n\n<p><code>var obj = { asdf:'foo', bar:'baz' };\nvar f = 'quux';\nif ( !(f in obj) ) {\n&nbsp;alert( 'not there!' );\n}</code></p>\n\n<h3>Update</h3>\n\n<p>I&rsquo;m finding that a lot of people are hitting this page with search queries that seem to indicate they&rsquo;re looking to remove a style property from a Dom node.  <code>delete</code> won&rsquo;t help you much there, since the <code>style</code> property is a get-and-set-only property.  (IE, you can read from and write to it, but you can&rsquo;t delete from it.)</p>\n\n<p>Most of the time, you shouldn&rsquo;t be messing with the <code>style</code> property directly in Javascript, anyhow.  Instead, add and remove semantically meaningful class names, and put the style information related to those states in the CSS.  Of course that&rsquo;s not always an option, I know.  So, you can remove the inline setting by simply setting it to an empty string, like this:</p>\n\n<p><code>document.body.style.background=\"red\"; // turns the page red.\ndocument.body.style.background=\"\"; // turns the page back to whatever it was.</code></p>\n\n<p>Cheers!</p>",
            "content_raw": "<p>Javascript provides two very handy operators, <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:in_Operator\">in</a> and <a href=\"http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:delete_Operator\">delete</a>.</p>\n\n<p>Consider this code fragment:</p>\n\n<p><code class=\"block javascript\">var obj = {\n\u00a0foo : 'quux',\n\u00a0bar : 'baz',\n\u00a0doSomething : function () {\n\u00a0\u00a0// do something...\n\u00a0}\n};</code></p>\n\n<p>So, we\u2019ve created an object, and then some other things happen.  Later in the code, we want to remove the \u201cfoo\u201d property, so we do this:</p>\n\n<p><code class=\"javascript block\">obj.foo = undefined;</code></p>\n\n<p>Still later, we only want to do something if the foo property has not been unset, so we check it:</p>\n\n<p><code class=\"javascript block\">if ( obj.foo !== undefined ) {\n\u00a0// do something\n}</code></p>\n\n<p>That works, and it\u2019s fairly common, but it\u2019s klunky, and not as readable as this:</p>\n\n<p><code class=\"javascript block\">delete obj.foo;</code></p>\n\n<p><code class=\"javascript block\">if ( 'foo' in obj ) {\n\u00a0// do something\n}</code></p>\n\n<p>The first one says, <q>Delete \u201cfoo\u201d from the object.</q>  The second asks, <q>Is \u201cfoo\u201d in the object?</q>  The difference between the first and second approaches is that the second uses intuitive wording in the code.</p>\n\n<p>Note: You <em>must</em> use <code>delete</code> if you want to use <code>in</code>.  Setting something to <code>undefined</code> manually will not cause it to return false when testing whether the property is <code>in</code> the object.</p>\n\n<p>As an added bonus, using the <code>delete</code> operator also removes the property from the for/in iteration loop, since it actually removes it from the object\u2019s key list rather than simply setting it\u2019s value to <code>undefined</code>.</p>\n\n<p><code class=\"block javascript\">var obj = {asdf:'foo',bar:'baz'};\nobj.asdf = undefined;\nfor ( var i in obj ) {\n\u00a0console.log(i,obj[i]);\n}\n// outputs:\n// asdf undefined\n// bar baz</code></p>\n\n<p><code class=\"block javascript\">var obj = {asdf:'foo',bar:'baz'};\ndelete obj.asdf;\nfor ( var i in obj ) {\n\u00a0console.log(i,obj[i]);\n}\n// outputs:\n// bar baz</code></p>\n\n<p>Note: you\u2019ll need to wrap the \u201cin\u201d statement in parentheses if you want to negate it.  For example, this is a bug:</p>\n\n<p><code class=\"block javascript\">var obj = { asdf:'foo',bar:'baz' };\nvar f = 'quux';\nif ( !f in obj ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<p>The alert will never fire.  Can you figure out what\u2019s happening?  Here\u2019s a clue:</p>\n\n<p><code class=\"block javascript\">var obj = { 'false':1, asdf:'foo', bar:'baz' };\nvar f = 'quux';\nif ( !f in obj ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<p>Now the alert will fire.  What\u2019s up?</p>\n\n<p>The order of operations is this:</p>\n\n<ol><li>Process the !f, which converts \u2018quux\u2019 to a boolean (true), and then gets the opposite (false).</li>\n    <li>The \u201cin\u201d operator converts the value back to a string, and false.toString() is the string 'false\u2019.</li>\n    <li>Since 'false\u2019 is not a key in the object, the \u201cin\u201d operator returns false, and the conditional fails.</li>\n</ol><p>In the second case, since the string 'false\u2019 <em>is</em> a key in the object, the \u201cin\u201d operator returns true, and the conditional fires.  Of course, using \u201cfalse\u201d as a key in an object is a really stupid thing to do, but if some bunk data comes into your program somehow, it can happen.  Always wrap your \u201cin\u201d clauses in parentheses, and you\u2019ll never have a problem.  In this case, it works as expected:</p>\n\n<p><code class=\"block javascript\">var obj = { asdf:'foo', bar:'baz' };\nvar f = 'quux';\nif ( !(f in obj) ) {\n\u00a0alert( 'not there!' );\n}</code></p>\n\n<h3>Update</h3>\n\n<p>I\u2019m finding that a lot of people are hitting this page with search queries that seem to indicate they\u2019re looking to remove a style property from a Dom node.  <code>delete</code> won\u2019t help you much there, since the <code>style</code> property is a get-and-set-only property.  (IE, you can read from and write to it, but you can\u2019t delete from it.)</p>\n\n<p>Most of the time, you shouldn\u2019t be messing with the <code>style</code> property directly in Javascript, anyhow.  Instead, add and remove semantically meaningful class names, and put the style information related to those states in the CSS.  Of course that\u2019s not always an option, I know.  So, you can remove the inline setting by simply setting it to an empty string, like this:</p>\n\n<p><code class=\"block javascript\">document.body.style.background=\"red\"; // turns the page red.\ndocument.body.style.background=\"\"; // turns the page back to whatever it was.</code></p>\n\n<p>Cheers!</p>",
            "is_current_item": true,
            "is_root_item": true,
            "post": {
                "id": "146671469"
            }
        }
    ],
    "type": "text"
}